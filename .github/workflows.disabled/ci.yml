# AI Company CI/CD Pipeline
name: AI Company Test Suite

"on":
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  lint:
    name: 🎨 Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run Black formatter check
        run: black --check workers/ libs/ tests/
      
      - name: Run isort import check
        run: isort --check-only workers/ libs/ tests/
      
      - name: Run Flake8 linter
        run: flake8 workers/ libs/ tests/ --max-line-length=120 --extend-ignore=E203,W503
      
      - name: Run MyPy type checker
        run: mypy workers/ libs/ --ignore-missing-imports

  test:
    name: 🧪 Test Suite (${{ matrix.test-type }})
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
      fail-fast: false
    
    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl jq
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run ${{ matrix.test-type }} tests
        run: |
          pytest -m ${{ matrix.test-type }} --junitxml=junit/test-results-${{ matrix.test-type }}.xml
        env:
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
          PYTHONPATH: ${{ github.workspace }}
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: junit/test-results-${{ matrix.test-type }}.xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.test-type == 'unit'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  ai-test-generation:
    name: 🤖 AI Test Generation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate new tests
        run: |
          python scripts/generate_tests.py --coverage-threshold 90
        env:
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: '🤖 [Auto] Add AI-generated tests'
          title: '🧪 AI-Generated Tests for Improved Coverage'
          body: |
            ## 🤖 AI-Generated Tests
            
            This PR contains automatically generated tests to improve code coverage.
            
            ### Changes:
            - New test cases based on uncovered code paths
            - Edge case scenarios identified by AI analysis
            - Performance benchmarks for critical functions
            
            Please review the generated tests before merging.
          branch: auto/ai-generated-tests
          delete-branch: true

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production..."
          # ここに実際のデプロイスクリプトを追加
      
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 AI Company deployed to production!
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
