name: Elders Guild CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16'
  REDIS_VERSION: '7'

jobs:
  # Phase 1: Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Security Checks

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy bandit safety

    - name: Run Black (Code Formatting)
      run: black --check --diff .

    - name: Run Flake8 (Linting)
      run: flake8 --max-line-length=100 --ignore=E203,W503 .

    - name: Run MyPy (Type Checking)
      run: mypy libs/ --ignore-missing-imports

    - name: Run Bandit (Security Scanning)
      run: bandit -r libs/ -f json -o bandit-report.json

    - name: Run Safety (Dependency Vulnerability Check)
      run: safety check --json --output safety-report.json

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Phase 2: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: code-quality

    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-xdist

    - name: Run Unit Tests
      run: |
        pytest tests/unit/ \
          --cov=libs/ \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -n auto

    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/

  # Phase 3: Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: unit-tests

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: elders_guild_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-integration

    - name: Install PostgreSQL Extensions
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client-16
        PGPASSWORD=postgres psql -h localhost -U postgres -d elders_guild_test -c "CREATE EXTENSION IF NOT EXISTS vector;"

    - name: Setup Test Database
      run: |
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/elders_guild_test
        export REDIS_URL=redis://localhost:6379/0
        python -m libs.elders_guild_db_manager --create-tables

    - name: Run Integration Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elders_guild_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        pytest tests/integration/ \
          --cov=libs/ \
          --cov-report=xml \
          --junitxml=integration-test-results.xml \
          -v

    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: integration-test-results.xml

  # Phase 4: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: integration-tests

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: elders_guild_perf
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust

    - name: Run Performance Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elders_guild_perf
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/performance/ \
          --benchmark-json=benchmark-results.json \
          --benchmark-compare-fail=min:5%

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results.json

  # Phase 5: Build & Package
  build:
    runs-on: ubuntu-latest
    name: Build & Package
    needs: [code-quality, unit-tests, integration-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build Package
      run: |
        python -m build

    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Phase 6: Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: build

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Docker Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Phase 7: Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [docker-build, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Staging deployment logic would go here

    - name: Run Smoke Tests
      run: |
        echo "Running smoke tests..."
        # Smoke test logic would go here

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Staging deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Phase 8: Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Production deployment logic would go here

    - name: Run Health Checks
      run: |
        echo "Running production health checks..."
        # Health check logic would go here

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Production deployment completed'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Phase 9: Cleanup
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old artifacts..."
        # Cleanup logic would go here
