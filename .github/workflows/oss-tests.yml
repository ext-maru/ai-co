name: OSS Tests

on:
  push:
    branches: [ feature/issue-93-oss-migration ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  PYTEST_ADDOPTS: "-v --tb=short --strict-markers"

jobs:
  pytest:
    name: pytest Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-group: [unit, integration, e2e]
        python-version: ["3.11", "3.12"]

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-oss.txt

    - name: Run pytest
      run: |
        pytest tests/${{ matrix.test-group }} \
          --cov=libs \
          --cov=workers \
          --cov-report=xml \
          --cov-report=html \
          --junit-xml=test-results-${{ matrix.test-group }}.xml \
          -n auto
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.test-group }}-py${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-group }}-py${{ matrix.python-version }}
        path: test-results-*.xml

  celery-tests:
    name: Celery Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-oss.txt

    - name: Run Celery tests
      run: |
        pytest tests/celery \
          -v \
          --tb=short
      env:
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/1

  ray-tests:
    name: Ray Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-oss.txt

    - name: Run Ray tests
      run: |
        pytest tests/ray \
          -v \
          --tb=short
      env:
        RAY_ADDRESS: local

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: [pytest, celery-tests, ray-tests]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        merge-multiple: true

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=elders-guild-oss
          -Dsonar.sources=libs,workers
          -Dsonar.tests=tests
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.version=3.12

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: sonarqube

    steps:
    - name: Check Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
