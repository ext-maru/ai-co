# Docker Compose設定 - OSS移行プロジェクト
# Issue #93: pytest, Celery/Ray, SonarQube統合環境
# 作成日: 2025年7月19日

version: '3.8'

services:
  # Redis - Celeryブローカー & Rayバックエンド
  redis:
    image: redis:7-alpine
    container_name: oss_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL - テスト用データベース
  postgres:
    image: postgres:15-alpine
    container_name: oss_postgres
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ - Celery代替ブローカー（オプション）
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: oss_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Flower - Celery監視ツール
  flower:
    image: mher/flower:latest
    container_name: oss_flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery flower

  # SonarQube - コード品質管理
  sonarqube:
    image: sonarqube:9-community
    container_name: oss_sonarqube
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # テスト実行環境
  test_runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: oss_test_runner
    volumes:
      - .:/app
      - test_cache:/app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - PYTEST_ADDOPTS=-c pytest-oss.ini
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://testuser:testpass@postgres:5432/testdb
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: tail -f /dev/null  # Keep container running

  # Ray Head Node
  ray_head:
    image: rayproject/ray:latest
    container_name: oss_ray_head
    shm_size: '2gb'
    ports:
      - "8265:8265"  # Ray Dashboard
      - "10001:10001"
    environment:
      - RAY_ADDRESS=ray://ray_head:10001
    command: ray start --head --dashboard-host 0.0.0.0
    healthcheck:
      test: ["CMD", "ray", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ray Worker Node (スケール可能)
  ray_worker:
    image: rayproject/ray:latest
    container_name: oss_ray_worker
    shm_size: '1gb'
    environment:
      - RAY_ADDRESS=ray://ray_head:10001
    depends_on:
      ray_head:
        condition: service_healthy
    command: ray start --address=ray_head:6379 --block
    deploy:
      replicas: 2

volumes:
  redis_data:
  postgres_data:
  rabbitmq_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  test_cache:

networks:
  default:
    name: oss_network
