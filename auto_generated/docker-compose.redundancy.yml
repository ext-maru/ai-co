version: '3.8'
services:
  pm-worker-primary:
    image: ai-company/pm-worker:latest
    container_name: pm-worker-primary
    restart: always
    networks:
    - ai-company-network
    environment: &id001
      RABBITMQ_HOST: rabbitmq
      LOG_LEVEL: INFO
      WORKER_TYPE: pm
      SERVICE_ROLE: backup
      SERVICE_NAME: pm-worker
      REDUNDANCY_ENABLED: 'true'
    volumes: []
    depends_on: &id002
    - monitoring-dashboard
    healthcheck:
      test: python3 -c "import workers.async_pm_worker_simple; print('OK')" || exit
        1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  pm-worker-backup:
    image: ai-company/pm-worker:latest
    container_name: pm-worker-backup
    restart: always
    networks:
    - ai-company-network
    environment: *id001
    volumes: []
    depends_on: *id002
    healthcheck:
      test: python3 -c "import workers.async_pm_worker_simple; print('OK')" || exit
        1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  task-worker-primary:
    image: ai-company/task-worker:latest
    container_name: task-worker-primary
    restart: always
    networks:
    - ai-company-network
    environment: &id003
      RABBITMQ_HOST: rabbitmq
      LOG_LEVEL: INFO
      WORKER_TYPE: task
      SERVICE_ROLE: backup
      SERVICE_NAME: task-worker
      REDUNDANCY_ENABLED: 'true'
    volumes: []
    depends_on: &id004
    - monitoring-dashboard
    healthcheck:
      test: python3 -c "import workers.simple_task_worker; print('OK')" || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  task-worker-backup:
    image: ai-company/task-worker:latest
    container_name: task-worker-backup
    restart: always
    networks:
    - ai-company-network
    environment: *id003
    volumes: []
    depends_on: *id004
    healthcheck:
      test: python3 -c "import workers.simple_task_worker; print('OK')" || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  task-worker:
    image: ai-company/task-worker:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 0s
        failure_action: pause
        monitor: 60s
    networks:
    - ai-company-network
    environment: *id003
    volumes: []
    healthcheck:
      test: python3 -c "import workers.simple_task_worker; print('OK')" || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  monitoring-dashboard-primary:
    image: ai-company/monitoring:latest
    container_name: monitoring-dashboard-primary
    restart: always
    networks:
    - ai-company-network
    environment:
      LOG_LEVEL: INFO
      WEB_PORT: '8000'
      SERVICE_ROLE: primary
      SERVICE_NAME: monitoring-dashboard
      REDUNDANCY_ENABLED: 'true'
    volumes:
    - ./data:/app/data
    - ./logs:/app/logs
    depends_on: []
    ports:
    - 8000:8000
    healthcheck:
      test: curl -f http://localhost:8000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
networks:
  ai-company-network:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: 'false'
volumes:
  ai_company_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/aicompany/ai_co/data
  ai_company_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/aicompany/ai_co/logs
  ai_company_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /home/aicompany/ai_co/config
