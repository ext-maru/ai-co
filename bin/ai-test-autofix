#!/bin/bash
# AI Company „ÉÜ„Çπ„ÉàËá™Âãï‰øÆÊ≠£„Ç∑„Çπ„ÉÜ„É†„ÅÆËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

set -e

cd /home/aicompany/ai_co
source venv/bin/activate

echo "ü§ñ AI Company Test Auto-Fix System"
echo "=================================="
echo ""

# Èñ¢Êï∞ÂÆöÁæ©
start_workers() {
    echo "üöÄ Starting Test Auto-Fix Workers..."
    
    # SE„ÉØ„Éº„Ç´„Éº„ÇíËµ∑Âãï
    echo "Starting SE Worker..."
    tmux new-session -d -s se_worker "cd /home/aicompany/ai_co && source venv/bin/activate && python3 workers/se_worker.py --worker-id se-1"
    
    # „ÉÜ„Çπ„ÉàÂØæÂøúPM„ÉØ„Éº„Ç´„Éº„ÇíËµ∑Âãï
    echo "Starting Test-Enabled PM Worker..."
    tmux new-session -d -s test_pm_worker "cd /home/aicompany/ai_co && source venv/bin/activate && python3 workers/test_enabled_pm_worker.py --worker-id test-pm-1"
    
    echo "‚úÖ Workers started"
}

stop_workers() {
    echo "üõë Stopping Test Auto-Fix Workers..."
    
    tmux kill-session -t se_worker 2>/dev/null || true
    tmux kill-session -t test_pm_worker 2>/dev/null || true
    
    echo "‚úÖ Workers stopped"
}

status_workers() {
    echo "üìä Worker Status:"
    echo "----------------"
    
    # SE„ÉØ„Éº„Ç´„Éº„ÅÆÁä∂ÊÖã
    if tmux has-session -t se_worker 2>/dev/null; then
        echo "‚úÖ SE Worker: Running"
    else
        echo "‚ùå SE Worker: Stopped"
    fi
    
    # PM„ÉØ„Éº„Ç´„Éº„ÅÆÁä∂ÊÖã
    if tmux has-session -t test_pm_worker 2>/dev/null; then
        echo "‚úÖ Test-PM Worker: Running"
    else
        echo "‚ùå Test-PM Worker: Stopped"
    fi
    
    # „Ç≠„É•„Éº„ÅÆÁä∂ÊÖã
    echo ""
    echo "üìã Queue Status:"
    sudo rabbitmqctl list_queues name messages | grep -E "ai_se|ai_pm" || echo "Queues not found"
}

test_system() {
    echo "üß™ Testing Auto-Fix System..."
    echo ""
    
    # „ÉÜ„Çπ„ÉàÁî®„ÅÆÂ§±Êïó„Åô„Çã„ÉÜ„Çπ„Éà„Çí‰ΩúÊàê
    cat > tests/test_auto_fix_demo.py << 'EOF'
import pytest

def test_will_fail():
    """This test will fail initially"""
    # This assertion will fail
    assert 1 + 1 == 3, "Math is broken!"

def test_import_error():
    """This test has an import error"""
    from nonexistent_module import something
    assert True
EOF

    # „ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
    python3 -c "
import pika
import json

connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

# PM„Ç≠„É•„Éº„Å´„ÉÜ„Çπ„Éà„Çø„Çπ„ÇØ„ÇíÈÄÅ‰ø°
task = {
    'task_id': 'test_autofix_demo',
    'task_type': 'test',
    'files_created': ['tests/test_auto_fix_demo.py'],
    'prompt': 'Test auto-fix system'
}

channel.basic_publish(
    exchange='',
    routing_key='ai_pm',
    body=json.dumps(task)
)

print('‚úÖ Test message sent to PM Worker')
connection.close()
"

    echo ""
    echo "üìã Monitor the fix process:"
    echo "  tmux attach -t se_worker      # SE Worker logs"
    echo "  tmux attach -t test_pm_worker # PM Worker logs"
}

monitor_logs() {
    echo "üìä Monitoring Test Auto-Fix Logs..."
    echo "Press Ctrl+C to exit"
    echo ""
    
    # ‰∏°Êñπ„ÅÆ„É≠„Ç∞„ÇíÂêåÊôÇ„Å´Ë°®Á§∫
    tail -f logs/se_worker.log logs/pm_worker.log 2>/dev/null || \
    tail -f logs/test_pm_worker.log 2>/dev/null || \
    echo "Log files not found. Workers may not have started yet."
}

# „É°„Ç§„É≥Âá¶ÁêÜ
case "$1" in
    start)
        start_workers
        ;;
    stop)
        stop_workers
        ;;
    restart)
        stop_workers
        sleep 2
        start_workers
        ;;
    status)
        status_workers
        ;;
    test)
        test_system
        ;;
    monitor)
        monitor_logs
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status|test|monitor}"
        echo ""
        echo "Commands:"
        echo "  start    - Start SE and Test-PM workers"
        echo "  stop     - Stop all workers"
        echo "  restart  - Restart all workers"
        echo "  status   - Show worker and queue status"
        echo "  test     - Send a test task to verify system"
        echo "  monitor  - Monitor worker logs"
        exit 1
        ;;
esac
