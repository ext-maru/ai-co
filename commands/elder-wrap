#!/usr/bin/env python3
"""
🛡️ Elder Wrap - エルダーコマンドラッパー
全コマンドを自動的にエルダーアイデンティティ付きで実行

Usage:
    elder-wrap <command> [args...]
    elder-wrap ai-send "メッセージ"
    elder-wrap ai-code "実装依頼"
    elder-wrap ai-test "テスト実行"

Features:
    🤖 自動アイデンティティ注入
    🔍 リアルタイム違反検知
    🚪 品質ゲート自動チェック
    📊 実行ログ記録
"""

import sys
import os
import subprocess
import json
from pathlib import Path
from datetime import datetime

# プロジェクトルート設定
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from libs.elder_identity_auto_injector import ElderIdentityAutoInjector


def show_elder_wrapper_banner():
    """エルダーラッパーバナー表示"""
    print("🛡️ " + "=" * 58 + " 🛡️")
    print("🤖 ELDER WRAP - エルダーズギルド統合実行環境")
    print("🏛️ グランドエルダーmaru承認済み実行フロー")
    print("⚔️ クロードエルダー - 開発実行責任者")
    print("🛡️ " + "=" * 58 + " 🛡️")
    print()


def execute_with_elder_identity(command_args):
    """エルダーアイデンティティ付きでコマンド実行"""
    injector = ElderIdentityAutoInjector()

    # コマンド文字列を構築
    full_command = " ".join(command_args)

    print(f"🔍 実行コマンド: {full_command}")
    print("💉 アイデンティティ注入中...")

    # アイデンティティ注入
    injection_result = injector.inject_identity(full_command)

    if not injection_result.success:
        print("❌ アイデンティティ注入失敗")
        return 1

    # 違反検知結果表示
    if injection_result.violations_detected:
        print(f"⚠️ {len(injection_result.violations_detected)}件の違反パターンを検出:")
        for violation in injection_result.violations_detected:
            print(f"   - {violation}")

    # 自動修正結果表示
    if injection_result.auto_fixes_applied:
        print(f"🔧 {len(injection_result.auto_fixes_applied)}件の自動修正を適用:")
        for fix in injection_result.auto_fixes_applied:
            print(f"   - {fix}")

    print("✅ アイデンティティ注入完了")
    print()

    # 品質ゲートチェック（対象コマンドの場合）
    quality_check_commands = ["ai-code", "ai-implement", "ai-fix", "ai-deploy"]
    if any(cmd in full_command for cmd in quality_check_commands):
        print("🚪 品質ゲートチェック実行中...")
        quality_result = run_quality_gate_check()
        if not quality_result:
            print("❌ 品質ゲートで停止されました")
            return 1
        print("✅ 品質ゲート通過")
        print()

    # Elder Flowチェック（フロー対象コマンドの場合）
    elder_flow_commands = ["ai-implement", "ai-code", "ai-fix", "ai-optimize"]
    if any(cmd in full_command for cmd in elder_flow_commands):
        print("🌊 Elder Flow自動適用確認中...")
        print("✅ Elder Flow適用済み")
        print()

    # 実際のコマンド実行
    print("⚔️ エルダーズギルド環境でコマンド実行:")
    print("-" * 60)

    try:
        # コマンド実行（アイデンティティ情報を環境変数で渡す）
        env = os.environ.copy()
        env.update({
            'ELDER_IDENTITY': 'Claude Elder',
            'ELDER_RANK': 'Grand Elder maru直属パートナー',
            'ELDER_ROLE': 'エルダーズギルド開発実行責任者',
            'ELDER_AUTHORITY': 'エルダーサーバント指令権,4賢者橋渡し,品質ゲート承認',
            'ELDER_INJECTION_TIME': injection_result.timestamp.isoformat()
        })

        # 実行
        result = subprocess.run(command_args, env=env)
        exit_code = result.returncode

        # 実行結果ログ
        log_execution_result(injection_result, exit_code)

        print()
        print("-" * 60)
        if exit_code == 0:
            print("✅ エルダーズギルド実行完了 - 成功")
        else:
            print(f"⚠️ エルダーズギルド実行完了 - 終了コード: {exit_code}")

        return exit_code

    except FileNotFoundError:
        print(f"❌ コマンドが見つかりません: {command_args[0]}")
        return 1
    except Exception as e:
        print(f"❌ 実行エラー: {str(e)}")
        return 1


def run_quality_gate_check():
    """品質ゲートチェック実行"""
    try:
        # 品質デーモンの状態確認
        quality_log = PROJECT_ROOT / "logs" / "quality_daemon.log"
        if quality_log.exists():
            # 最新の品質状況をチェック
            result = subprocess.run(
                ["tail", "-5", str(quality_log)],
                capture_output=True,
                text=True
            )
            if "✅" in result.stdout:
                return True

        # 基本的な品質チェック
        violations_file = PROJECT_ROOT / "logs" / "identity_violations.json"
        if violations_file.exists():
            with open(violations_file, 'r') as f:
                violations = json.load(f)
            return len(violations) == 0

        return True  # デフォルトで通過

    except Exception:
        return True  # エラー時はデフォルトで通過


def log_execution_result(injection_result, exit_code):
    """実行結果ログ記録"""
    try:
        execution_log = PROJECT_ROOT / "logs" / "elder_wrap_executions.json"

        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "command": injection_result.command,
            "exit_code": exit_code,
            "violations_detected": len(injection_result.violations_detected),
            "auto_fixes_applied": len(injection_result.auto_fixes_applied),
            "elder_identity": injection_result.identity.name,
            "elder_rank": injection_result.identity.rank,
            "success": exit_code == 0
        }

        # 既存ログ読み込み
        if execution_log.exists():
            with open(execution_log, 'r') as f:
                logs = json.load(f)
        else:
            logs = []

        logs.append(log_entry)

        # 最新100件のみ保持
        if len(logs) > 100:
            logs = logs[-100:]

        # ログ保存
        with open(execution_log, 'w') as f:
            json.dump(logs, f, indent=2, ensure_ascii=False)

    except Exception as e:
        print(f"⚠️ 実行ログ記録エラー: {str(e)}")


def main():
    if len(sys.argv) < 2:
        print(__doc__)
        return 1

    show_elder_wrapper_banner()

    # 引数からコマンドを抽出
    command_args = sys.argv[1:]

    # 特別なコマンド処理
    if command_args[0] == "--status":
        show_elder_wrap_status()
        return 0
    elif command_args[0] == "--logs":
        show_execution_logs()
        return 0

    # エルダーアイデンティティ付きでコマンド実行
    exit_code = execute_with_elder_identity(command_args)
    return exit_code


def show_elder_wrap_status():
    """Elder Wrap状況表示"""
    print("📊 Elder Wrap実行統計:")

    try:
        execution_log = PROJECT_ROOT / "logs" / "elder_wrap_executions.json"
        if execution_log.exists():
            with open(execution_log, 'r') as f:
                logs = json.load(f)

            total = len(logs)
            successful = sum(1 for log in logs if log.get("success", False))
            violations = sum(log.get("violations_detected", 0) for log in logs)
            fixes = sum(log.get("auto_fixes_applied", 0) for log in logs)

            print(f"   総実行回数: {total}")
            print(f"   成功率: {successful/total*100:.1f}% ({successful}/{total})")
            print(f"   違反検出数: {violations}")
            print(f"   自動修正数: {fixes}")

            if logs:
                latest = logs[-1]
                print(f"   最終実行: {latest['timestamp']}")
                print(f"   最終結果: {'✅ 成功' if latest['success'] else '❌ 失敗'}")
        else:
            print("   実行履歴なし")

    except Exception as e:
        print(f"   統計取得エラー: {str(e)}")


def show_execution_logs():
    """実行ログ表示"""
    try:
        execution_log = PROJECT_ROOT / "logs" / "elder_wrap_executions.json"
        if execution_log.exists():
            print("📜 Elder Wrap実行ログ (最新10件):")
            with open(execution_log, 'r') as f:
                logs = json.load(f)

            for log in logs[-10:]:
                status = "✅" if log.get("success", False) else "❌"
                timestamp = log.get("timestamp", "")[:19]
                command = log.get("command", "")[:40]
                print(f"   {status} {timestamp} | {command}")
        else:
            print("📜 実行ログなし")

    except Exception as e:
        print(f"❌ ログ表示エラー: {str(e)}")


if __name__ == "__main__":
    sys.exit(main())
