#!/usr/bin/env python3
"""
EldersGuildConfig - Elder's Guild шинхоЪчобчРЖ

чТ░хвГхдЙцХ░уБишинхоЪуГХуВбуВдуГлуВТч╡▒хРИуБЧуБЯшинхоЪчобчРЖуВ╖уВ╣уГЖуГауАВ
"""

import json
import os
from dataclasses import dataclass, field
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from .common_utils import get_project_paths, load_json_file, safe_get


@dataclass
class RabbitMQConfig:
    """RabbitMQшинхоЪ"""

    host: str = os.getenv("RABBITMQ_HOST", "localhost")
    port: int = int(os.getenv("RABBITMQ_PORT", "5672"))
    username: str = os.getenv("RABBITMQ_USER", "guest")
    password: str = os.getenv("RABBITMQ_PASSWORD", "guest")
    heartbeat: int = 600
    blocked_connection_timeout: int = 300

    @classmethod
    def from_env(cls) -> "RabbitMQConfig":
        """чТ░хвГхдЙцХ░уБЛуВЙшинхоЪуВТшкнуБ┐ш╛╝уБ┐"""
        return cls(
            host=os.getenv("RABBITMQ_HOST", "localhost"),
            port=int(os.getenv("RABBITMQ_PORT", "5672")),
            username=os.getenv("RABBITMQ_USER", "guest"),
            password=os.getenv("RABBITMQ_PASSWORD", "guest"),
            heartbeat=int(os.getenv("RABBITMQ_HEARTBEAT", "600")),
            blocked_connection_timeout=int(os.getenv("RABBITMQ_TIMEOUT", "300")),
        )


@dataclass
class SlackConfig:
    """SlackшинхоЪ"""

    webhook_url: str = ""
    channel: str = "#general"
    username: str = "уВиуГлуГАуГ╝уВ║уВоуГлуГЙBot"
    enabled: bool = True

    # Slack PollingшинхоЪ
    bot_token: str = ""
    polling_channel_id: str = ""
    polling_interval: int = 20
    polling_enabled: bool = False
    require_mention: bool = True

    # Slack MonitorшинхоЪ
    monitor_enabled: bool = False
    error_channel: str = "#elders-guild-errors"
    notification_channel: str = "#elders-guild-notifications"
    monitor_interval: int = 10
    error_threshold: int = 3
    error_surge_threshold: int = 20

    # щАЪчЯешинхоЪ
    mention_on_critical: bool = True
    mention_users: str = "@channel"
    rate_limit_max: int = 10
    rate_limit_cooldown: int = 60

    # уВнуГ╝уГпуГ╝уГЙшинхоЪ
    critical_keywords: List[str] = field(
        default_factory=lambda: ["CRITICAL", "FATAL", "ERROR", "Exception", "Traceback"]
    )

    @classmethod
    def from_file(cls, config_path: Path) -> "SlackConfig":
        """шинхоЪуГХуВбуВдуГлуБЛуВЙшкнуБ┐ш╛╝уБ┐"""
        config = {}

        if config_path.exists():
            with open(config_path, "r") as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#") and "=" in line:
                        key, value = line.split("=", 1)
                        config[key.strip()] = value.strip().strip('"')

        # slack_config.jsonуВВшкнуБ┐ш╛╝уБ┐
        json_config = {}
        json_path = config_path.parent / "slack_config.json"
        if json_path.exists():
            json_config = load_json_file(json_path) or {}

        return cls(
            webhook_url=config.get("SLACK_WEBHOOK_URL", ""),
            channel=config.get("SLACK_CHANNEL", "#general"),
            username=config.get("SLACK_USERNAME", "уВиуГлуГАуГ╝уВ║уВоуГлуГЙBot"),
            enabled=config.get("ENABLE_SLACK", "true").lower() == "true",
            # BotшинхоЪ
            bot_token=config.get("SLACK_BOT_TOKEN", json_config.get("bot_token", "")),
            polling_channel_id=config.get(
                "SLACK_POLLING_CHANNEL_ID", json_config.get("polling_channel_id", "")
            ),
            polling_interval=int(
                config.get(
                    "SLACK_POLLING_INTERVAL", json_config.get("polling_interval", 20)
                )
            ),
            polling_enabled=config.get("SLACK_POLLING_ENABLED", "false").lower()
            == "true",
            require_mention=config.get("SLACK_REQUIRE_MENTION", "true").lower()
            == "true",
            # MonitorшинхоЪ
            monitor_enabled=config.get("SLACK_MONITOR_ENABLED", "false").lower()
            == "true",
            error_channel=config.get(
                "SLACK_ERROR_CHANNEL",
                json_config.get("error_channel", "#elders-guild-errors"),
            ),
            notification_channel=config.get(
                "SLACK_NOTIFICATION_CHANNEL",
                json_config.get("notification_channel", "#elders-guild-notifications"),
            ),
            monitor_interval=int(
                config.get(
                    "SLACK_MONITOR_INTERVAL", json_config.get("monitor_interval", 10)
                )
            ),
            error_threshold=int(
                config.get(
                    "SLACK_ERROR_THRESHOLD", json_config.get("error_threshold", 3)
                )
            ),
            error_surge_threshold=int(
                config.get(
                    "SLACK_ERROR_SURGE_THRESHOLD",
                    json_config.get("error_surge_threshold", 20),
                )
            ),
            # щАЪчЯешинхоЪ
            mention_on_critical=config.get("SLACK_MENTION_ON_CRITICAL", "true").lower()
            == "true",
            mention_users=config.get(
                "SLACK_MENTION_USERS",
                json_config.get("notification_settings", {}).get(
                    "mention_users", ["@channel"]
                )[0],
            ),
            rate_limit_max=int(
                config.get(
                    "SLACK_RATE_LIMIT_MAX",
                    json_config.get("notification_settings", {})
                    .get("rate_limit", {})
                    .get("max_messages_per_minute", 10),
                )
            ),
            rate_limit_cooldown=int(
                config.get(
                    "SLACK_RATE_LIMIT_COOLDOWN",
                    json_config.get("notification_settings", {})
                    .get("rate_limit", {})
                    .get("cooldown_seconds", 60),
                )
            ),
            # уВнуГ╝уГпуГ╝уГЙ
            critical_keywords=json_config.get(
                "critical_keywords",
                ["CRITICAL", "FATAL", "ERROR", "Exception", "Traceback"],
            ),
        )


@dataclass
class WorkerConfig:
    """уГпуГ╝уВлуГ╝шинхоЪ"""

    default_model: str = "claude-sonnet-4-20250514"
    timeout: int = 300
    max_retries: int = 3
    prefetch_count: int = 1
    scaling_enabled: bool = True
    min_workers: int = 1
    max_workers: int = 5
    scale_check_interval: int = 30
    health_check_interval: int = 60


@dataclass
class StorageConfig:
    """уВ╣уГИуГмуГ╝уВ╕шинхоЪ"""

    max_file_size_mb: int = 100
    allowed_extensions: List[str] = field(
        default_factory=lambda: [
            ".py",
            ".js",
            ".html",
            ".css",
            ".json",
            ".yaml",
            ".yml",
            ".sh",
            ".bash",
            ".conf",
            ".ini",
            ".md",
            ".txt",
        ]
    )
    retention_days: int = 30
    auto_cleanup: bool = True


@dataclass
class LanguageConfig:
    """шиАшкЮшинхоЪ"""

    default_language: str = "ja"
    supported_languages: List[str] = field(default_factory=lambda: ["ja", "en"])
    date_format: str = "%Yх╣┤%mцЬИ%dцЧе"
    time_format: str = "%HцЩВ%MхИЖ%SчзТ"
    timezone: str = "Asia/Tokyo"
    encoding: str = "utf-8"


@dataclass
class GitConfig:
    """GitшинхоЪ"""

    auto_commit: bool = True
    auto_push: bool = True
    remote: str = "origin"
    branch: str = "master"
    commit_prefix: str = "ЁЯдЦ AIшЗкхЛХчФЯцИР:"


class EldersGuildConfig:
    """уВиуГлуГАуГ╝уВ║уВоуГлуГЙч╡▒хРИшинхоЪчобчРЖ"""

    def __init__(self, config_dir: Optional[Path] = None):
        """
        Args:
            config_dir: шинхоЪуГЗуВгуГмуВпуГИуГкя╝ИцЬкцМЗхоЪцЩВуБпуГЗуГХуВйуГлуГИя╝Й
        """
        self.paths = get_project_paths()
        self.config_dir = config_dir or self.paths["config"]

        # хРДшинхоЪуБохИЭцЬЯхМЦ
        self.rabbitmq = RabbitMQConfig.from_env()
        self.slack = SlackConfig.from_file(self.config_dir / "slack.conf")
        self.worker = WorkerConfig()
        self.storage = StorageConfig()
        self.git = GitConfig()
        self.language = LanguageConfig()

        # уВлуВ╣уВ┐уГашинхоЪ
        self._custom_configs: Dict[str, Any] = {}

        # шинхоЪуГХуВбуВдуГлуБЛуВЙуБошкнуБ┐ш╛╝уБ┐
        self._load_config_files()

    def _load_config_files(self):
        """шинхоЪуГХуВбуВдуГлуБошкнуБ┐ш╛╝уБ┐"""
        # worker.json
        worker_config = load_json_file(self.config_dir / "worker.json")
        if worker_config:
            self._update_dataclass(self.worker, worker_config)

        # storage.json
        storage_config = load_json_file(self.config_dir / "storage.json")
        if storage_config:
            self._update_dataclass(self.storage, storage_config)

        # git.json
        git_config = load_json_file(self.config_dir / "git.json")
        if git_config:
            self._update_dataclass(self.git, git_config)

        # language.json
        language_config = load_json_file(self.config_dir / "language.json")
        if language_config:
            self._update_dataclass(self.language, language_config)

        # custom.jsonя╝ИуВлуВ╣уВ┐уГашинхоЪя╝Й
        custom_config = load_json_file(self.config_dir / "custom.json")
        if custom_config:
            self._custom_configs.update(custom_config)

    def _update_dataclass(self, obj: Any, updates: Dict[str, Any]):
        """уГЗуГ╝уВ┐уВпуГйуВ╣уБоцЫ┤цЦ░"""
        for key, value in updates.items():
            if hasattr(obj, key):
                setattr(obj, key, value)

    def get(self, key_path: str, default: Any = None) -> Any:
        """
        шинхоЪхАдуБохПЦх╛Чя╝ИуГЙуГГуГИшиШц│Ххп╛х┐Ья╝Й

        Args:
            key_path: уВнуГ╝уГСуВ╣я╝Иф╛Л: "worker.timeout"я╝Й
            default: уГЗуГХуВйуГлуГИхАд

        Returns:
            шинхоЪхАд
        """
        # ч╡ДуБ┐ш╛╝уБ┐шинхоЪуБочв║шкН
        parts = key_path.split(".")
        if len(parts) >= 2:
            section = parts[0]
            attr = ".".join(parts[1:])

            if hasattr(self, section):
                obj = getattr(self, section)
                return safe_get(obj.__dict__, attr, default)

        # уВлуВ╣уВ┐уГашинхоЪуБочв║шкН
        return safe_get(self._custom_configs, key_path, default)

    def set(self, key_path: str, value: Any):
        """
        шинхоЪхАдуБошинхоЪя╝ИхоЯшбМцЩВуБоуБ┐уАБц░╕ч╢ЪхМЦуБкуБЧя╝Й

        Args:
            key_path: уВнуГ╝уГСуВ╣
            value: шинхоЪхАд
        """
        parts = key_path.split(".")

        if len(parts) >= 2:
            section = parts[0]
            attr = parts[1]

            if hasattr(self, section) and len(parts) == 2:
                obj = getattr(self, section)
                if hasattr(obj, attr):
                    setattr(obj, attr, value)
                    return

        # уВлуВ╣уВ┐уГашинхоЪуБиуБЧуБжф┐ЭхнШ
        self._set_nested(self._custom_configs, key_path, value)

    def _set_nested(self, dictionary: Dict[str, Any], key_path: str, value: Any):
        """уГНуВ╣уГИуБХуВМуБЯш╛ЮцЫ╕уБлхАдуВТшинхоЪ"""
        keys = key_path.split(".")

        for key in keys[:-1]:
            if key not in dictionary:
                dictionary[key] = {}
            dictionary = dictionary[key]

        dictionary[keys[-1]] = value

    def get_all(self) -> Dict[str, Any]:
        """хЕишинхоЪуВТш╛ЮцЫ╕уБиуБЧуБжхПЦх╛Ч"""
        return {
            "rabbitmq": self.rabbitmq.__dict__,
            "slack": self.slack.__dict__,
            "worker": self.worker.__dict__,
            "storage": self.storage.__dict__,
            "git": self.git.__dict__,
            "language": self.language.__dict__,
            "custom": self._custom_configs,
            "paths": {k: str(v) for k, v in self.paths.items()},
        }

    def validate(self) -> List[str]:
        """
        шинхоЪуБоцдЬши╝

        Returns:
            уВиуГйуГ╝уГбуГГуВ╗уГ╝уВ╕уБоуГкуВ╣уГИ
        """
        errors = []

        # SlackшинхоЪуБоцдЬши╝
        if self.slack.enabled and not self.slack.webhook_url:
            errors.append("SlackуБМцЬЙхК╣уБзуБЩуБМWebhook URLуБМшинхоЪуБХуВМуБжуБДуБ╛уБЫуВУ")

        # уГпуГ╝уВлуГ╝шинхоЪуБоцдЬши╝
        if self.worker.min_workers > self.worker.max_workers:
            errors.append("min_workers уБп max_workers ф╗еф╕ЛуБзуБВуВЛх┐ЕшжБуБМуБВуВКуБ╛уБЩ")

        if self.worker.timeout <= 0:
            errors.append("timeout уБпцнгуБохАдуБзуБВуВЛх┐ЕшжБуБМуБВуВКуБ╛уБЩ")

        # уВ╣уГИуГмуГ╝уВ╕шинхоЪуБоцдЬши╝
        if self.storage.max_file_size_mb <= 0:
            errors.append("max_file_size_mb уБпцнгуБохАдуБзуБВуВЛх┐ЕшжБуБМуБВуВКуБ╛уБЩ")

        return errors

    def save_custom_config(self) -> bool:
        """уВлуВ╣уВ┐уГашинхоЪуБоф┐ЭхнШ"""
        custom_path = self.config_dir / "custom.json"

        try:
            with open(custom_path, "w", encoding="utf-8") as f:
                json.dump(self._custom_configs, f, indent=2, ensure_ascii=False)
            return True
        except Exception:
            return False

    def __repr__(self) -> str:
        """шинхоЪуБоцЦЗхнЧхИЧшбичП╛"""
        return f"EldersGuildConfig(rabbitmq={self.rabbitmq.host}, slack_enabled={self.slack.enabled}, workers={self.worker.min_workers}-{self.worker.max_workers})"


# уВ░уГнуГ╝уГРуГлшинхоЪуВдуГ│уВ╣уВ┐уГ│уВ╣я╝ИуВ╖уГ│уВ░уГлуГИуГ│я╝Й
_global_config: Optional[EldersGuildConfig] = None


def get_config() -> EldersGuildConfig:
    """уВ░уГнуГ╝уГРуГлшинхоЪуВдуГ│уВ╣уВ┐уГ│уВ╣уБохПЦх╛Ч"""
    global _global_config

    if _global_config is None:
        _global_config = EldersGuildConfig()

    return _global_config


def reload_config() -> EldersGuildConfig:
    """шинхоЪуБохЖНшкнуБ┐ш╛╝уБ┐"""
    global _global_config
    _global_config = EldersGuildConfig()
    return _global_config


if __name__ == "__main__":
    # уГЖуВ╣уГИхоЯшбМ
    config = get_config()

    print("уВиуГлуГАуГ╝уВ║уВоуГлуГЙ шинхоЪ:")
    print(f"  RabbitMQ: {config.rabbitmq.host}:{config.rabbitmq.port}")
    print(f"  Slack: {'цЬЙхК╣' if config.slack.enabled else 'чДбхК╣'}")
    print(f"  уГЗуГХуВйуГлуГИуГвуГЗуГл: {config.worker.default_model}")
    print(f"  уГпуГ╝уВлуГ╝цХ░: {config.worker.min_workers}-{config.worker.max_workers}")

    # цдЬши╝
    errors = config.validate()
    if errors:
        print("\nшинхоЪуВиуГйуГ╝:")
        for error in errors:
            print(f"  - {error}")
    else:
        print("\nтЬЕ шинхоЪцдЬши╝: OK")
