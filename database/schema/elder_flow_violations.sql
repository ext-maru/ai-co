-- Elder Flow違反記録データベーススキーマ
-- Generated by Claude Elder

-- 違反記録テーブル
CREATE TABLE IF NOT EXISTS elder_flow_violations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    violation_type VARCHAR(100) NOT NULL,
    category VARCHAR(50) NOT NULL,
    severity VARCHAR(20) NOT NULL,
    description TEXT NOT NULL,

    -- コンテキスト情報
    context_command TEXT,
    context_file_path TEXT,
    context_timestamp TIMESTAMP NOT NULL,
    context_additional_info JSONB DEFAULT '{}',

    -- 時間情報
    detected_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP,

    -- 解決情報
    resolution_notes TEXT,
    auto_fixed BOOLEAN DEFAULT FALSE,
    auto_fixable BOOLEAN DEFAULT FALSE,

    -- インデックス用
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- インデックス
CREATE INDEX idx_violations_type ON elder_flow_violations(violation_type);
CREATE INDEX idx_violations_category ON elder_flow_violations(category);
CREATE INDEX idx_violations_severity ON elder_flow_violations(severity);
CREATE INDEX idx_violations_detected_at ON elder_flow_violations(detected_at);
CREATE INDEX idx_violations_resolved_at ON elder_flow_violations(resolved_at);
CREATE INDEX idx_violations_active ON elder_flow_violations(resolved_at) WHERE resolved_at IS NULL;

-- 違反修正提案テーブル
CREATE TABLE IF NOT EXISTS violation_fix_suggestions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    violation_id UUID NOT NULL REFERENCES elder_flow_violations(id) ON DELETE CASCADE,
    suggestion_text TEXT NOT NULL,
    applied BOOLEAN DEFAULT FALSE,
    applied_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 違反パターン学習テーブル（将来の機械学習用）
CREATE TABLE IF NOT EXISTS violation_patterns (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    pattern_name VARCHAR(100) NOT NULL UNIQUE,
    pattern_regex TEXT NOT NULL,
    violation_type VARCHAR(100) NOT NULL,
    confidence_score DECIMAL(3,2) DEFAULT 0.80,
    false_positive_count INTEGER DEFAULT 0,
    true_positive_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 違反統計ビュー
CREATE OR REPLACE VIEW violation_statistics AS
SELECT
    COUNT(*) as total_violations,
    COUNT(CASE WHEN resolved_at IS NULL THEN 1 END) as active_violations,
    COUNT(CASE WHEN severity = 'critical' THEN 1 END) as critical_violations,
    COUNT(CASE WHEN severity = 'high' THEN 1 END) as high_violations,
    COUNT(CASE WHEN severity = 'medium' THEN 1 END) as medium_violations,
    COUNT(CASE WHEN severity = 'low' THEN 1 END) as low_violations,
    COUNT(CASE WHEN auto_fixed = true THEN 1 END) as auto_fixed_violations
FROM elder_flow_violations;

-- 最近の違反ビュー
CREATE OR REPLACE VIEW recent_violations AS
SELECT
    id,
    violation_type,
    category,
    severity,
    description,
    context_command,
    detected_at,
    resolved_at,
    auto_fixable
FROM elder_flow_violations
ORDER BY detected_at DESC
LIMIT 100;

-- カテゴリ別統計ビュー
CREATE OR REPLACE VIEW violations_by_category AS
SELECT
    category,
    COUNT(*) as violation_count,
    COUNT(CASE WHEN resolved_at IS NULL THEN 1 END) as active_count,
    AVG(EXTRACT(EPOCH FROM (COALESCE(resolved_at, CURRENT_TIMESTAMP) - detected_at))/3600)::DECIMAL(10,2) as avg_resolution_hours
FROM elder_flow_violations
GROUP BY category
ORDER BY violation_count DESC;

-- トリガー: updated_at自動更新
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_violations_updated_at
    BEFORE UPDATE ON elder_flow_violations
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_patterns_updated_at
    BEFORE UPDATE ON violation_patterns
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- サンプルデータ（開発用）
-- INSERT INTO violation_patterns (pattern_name, pattern_regex, violation_type) VALUES
-- ('new_feature_implementation', '新機能.*実装|implement.*feature|add.*functionality', 'four_sages_consultation_missing'),
-- ('docker_without_sg', '^docker\s+(?!.*sg\s+docker\s+-c)|sudo\s+docker', 'docker_permission_violation'),
-- ('test_after_code', '実装.*テスト.*前|code.*before.*test', 'tdd_test_first_violation');

-- 統計情報取得関数
CREATE OR REPLACE FUNCTION get_violation_summary()
RETURNS TABLE(
    metric VARCHAR(50),
    value BIGINT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 'total_violations'::VARCHAR(50), COUNT(*)::BIGINT FROM elder_flow_violations
    UNION ALL
    SELECT 'active_violations'::VARCHAR(50), COUNT(*)::BIGINT FROM elder_flow_violations WHERE resolved_at IS NULL
    UNION ALL
    SELECT 'auto_fixed'::VARCHAR(50), COUNT(*)::BIGINT FROM elder_flow_violations WHERE auto_fixed = true
    UNION ALL
    SELECT 'critical_active'::VARCHAR(50), COUNT(*)::BIGINT FROM elder_flow_violations WHERE severity = 'critical' AND resolved_at IS NULL;
END;
$$ LANGUAGE plpgsql;
