-- Elder Flow違反記録データベーススキーマ (SQLite版)
-- Generated by Claude Elder

-- 違反記録テーブル
CREATE TABLE IF NOT EXISTS elder_flow_violations (
    id TEXT PRIMARY KEY,
    violation_type TEXT NOT NULL,
    category TEXT NOT NULL,
    severity TEXT NOT NULL,
    description TEXT NOT NULL,

    -- コンテキスト情報
    context_command TEXT,
    context_file_path TEXT,
    context_timestamp DATETIME NOT NULL,
    context_additional_info TEXT DEFAULT '{}',

    -- 時間情報
    detected_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    resolved_at DATETIME,

    -- 解決情報
    resolution_notes TEXT,
    auto_fixed INTEGER DEFAULT 0,
    auto_fixable INTEGER DEFAULT 0,

    -- メタデータ
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- インデックス
CREATE INDEX idx_violations_type ON elder_flow_violations(violation_type);
CREATE INDEX idx_violations_category ON elder_flow_violations(category);
CREATE INDEX idx_violations_severity ON elder_flow_violations(severity);
CREATE INDEX idx_violations_detected_at ON elder_flow_violations(detected_at);
CREATE INDEX idx_violations_resolved_at ON elder_flow_violations(resolved_at);
CREATE INDEX idx_violations_active ON elder_flow_violations(resolved_at) WHERE resolved_at IS NULL;

-- 違反修正提案テーブル
CREATE TABLE IF NOT EXISTS violation_fix_suggestions (
    id TEXT PRIMARY KEY,
    violation_id TEXT NOT NULL,
    suggestion_text TEXT NOT NULL,
    applied INTEGER DEFAULT 0,
    applied_at DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (violation_id) REFERENCES elder_flow_violations(id) ON DELETE CASCADE
);

-- 違反パターン学習テーブル
CREATE TABLE IF NOT EXISTS violation_patterns (
    id TEXT PRIMARY KEY,
    pattern_name TEXT NOT NULL UNIQUE,
    pattern_regex TEXT NOT NULL,
    violation_type TEXT NOT NULL,
    confidence_score REAL DEFAULT 0.80,
    false_positive_count INTEGER DEFAULT 0,
    true_positive_count INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 違反統計ビュー
CREATE VIEW IF NOT EXISTS violation_statistics AS
SELECT
    COUNT(*) as total_violations,
    COUNT(CASE WHEN resolved_at IS NULL THEN 1 END) as active_violations,
    COUNT(CASE WHEN severity = 'critical' THEN 1 END) as critical_violations,
    COUNT(CASE WHEN severity = 'high' THEN 1 END) as high_violations,
    COUNT(CASE WHEN severity = 'medium' THEN 1 END) as medium_violations,
    COUNT(CASE WHEN severity = 'low' THEN 1 END) as low_violations,
    COUNT(CASE WHEN auto_fixed = 1 THEN 1 END) as auto_fixed_violations
FROM elder_flow_violations;

-- 最近の違反ビュー
CREATE VIEW IF NOT EXISTS recent_violations AS
SELECT
    id,
    violation_type,
    category,
    severity,
    description,
    context_command,
    detected_at,
    resolved_at,
    auto_fixable
FROM elder_flow_violations
ORDER BY detected_at DESC
LIMIT 100;

-- カテゴリ別統計ビュー
CREATE VIEW IF NOT EXISTS violations_by_category AS
SELECT
    category,
    COUNT(*) as violation_count,
    COUNT(CASE WHEN resolved_at IS NULL THEN 1 END) as active_count,
    AVG(
        CASE
            WHEN resolved_at IS NOT NULL THEN
                (julianday(resolved_at) - julianday(detected_at)) * 24
            ELSE
                (julianday('now') - julianday(detected_at)) * 24
        END
    ) as avg_resolution_hours
FROM elder_flow_violations
GROUP BY category
ORDER BY violation_count DESC;

-- トリガー: updated_at自動更新
CREATE TRIGGER IF NOT EXISTS update_violations_updated_at
AFTER UPDATE ON elder_flow_violations
BEGIN
    UPDATE elder_flow_violations
    SET updated_at = datetime('now')
    WHERE id = NEW.id;
END;

CREATE TRIGGER IF NOT EXISTS update_patterns_updated_at
AFTER UPDATE ON violation_patterns
BEGIN
    UPDATE violation_patterns
    SET updated_at = datetime('now')
    WHERE id = NEW.id;
END;
