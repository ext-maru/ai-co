# Elders Guild CI/CD Enhanced Docker Environment
# 統合開発・本番環境対応

services:
  # PostgreSQL + pgvector データベース
  postgres:
    image: pgvector/pgvector:pg16
    container_name: elders-guild-postgres
    environment:
      POSTGRES_DB: elders_guild
      POSTGRES_USER: elder_admin
      POSTGRES_PASSWORD: sage_wisdom_2025
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "8003:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/elders_guild_unified_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/02-init.sql
    networks:
      - elders-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elder_admin -d elders_guild"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (バックグラウンドタスク・キャッシュ用)
  redis:
    image: redis:7-alpine
    container_name: elders-guild-redis
    ports:
      - "8004:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - elders-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Unified API Server
  api-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: elders-guild-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-elder_admin}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DATABASE:-elders_guild}
      REDIS_URL: redis://redis:${REDIS_PORT:-6379}/${REDIS_DB:-0}
      ENV: ${ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PYTHONPATH: /app
      PROJECT_ROOT: /app
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO_OWNER: ${GITHUB_REPO_OWNER:-ext-maru}
      GITHUB_REPO_NAME: ${GITHUB_REPO_NAME:-ai-co}
    ports:
      - "8001:8000"
    volumes:
      - ./libs:/app/libs
      - ./knowledge_base:/app/knowledge_base
      - ./logs:/app/logs
    networks:
      - elders-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v2/system/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped

  # Event Bus Worker
  event-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: elders-guild-event-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-elder_admin}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DATABASE:-elders_guild}
      REDIS_URL: redis://redis:${REDIS_PORT:-6379}/${REDIS_DB:-0}
      ENV: ${ENV:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKER_TYPE: event_bus
      PROJECT_ROOT: /app
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO_OWNER: ${GITHUB_REPO_OWNER:-ext-maru}
      GITHUB_REPO_NAME: ${GITHUB_REPO_NAME:-ai-co}
    volumes:
      - ./libs:/app/libs
      - ./knowledge_base:/app/knowledge_base
      - ./logs:/app/logs
    networks:
      - elders-network
    command: ["python", "-m", "libs.elders_guild_event_bus"]
    restart: unless-stopped

  # Legacy Backend (for transition)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: elders-guild-backend-legacy
    environment:
      - DATABASE_URL=postgresql://elder_admin:sage_wisdom_2025@postgres:5432/elders_guild
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONPATH=/app
    ports:
      - "8005:8000"
    volumes:
      - .:/app
      - /app/venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - elders-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Next.js フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: elders-guild-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
      - NEXT_PUBLIC_LEGACY_API_URL=http://localhost:8005
    ports:
      - "8002:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      api-server:
        condition: service_healthy
    networks:
      - elders-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: elders-guild-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - elders-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: elders-guild-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - elders-network
    depends_on:
      - prometheus

  # Nginx リバースプロキシ
  nginx:
    image: nginx:alpine
    container_name: elders-guild-nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-server
      - frontend
    networks:
      - elders-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  elders-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
