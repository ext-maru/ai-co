# Elder Flow Enterprise Docker Image
# Multi-stage build for production-ready deployment

# Stage 1: Python Builder
FROM python:3.11-slim as builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# Stage 2: Node.js Builder for Frontend
FROM node:18-alpine as frontend-builder

WORKDIR /frontend

# Copy package files
COPY web/package*.json ./
RUN npm ci --only=production

# Copy frontend source
COPY web/ ./
RUN npm run build

# Stage 3: Final Production Image
FROM python:3.11-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    redis-tools \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

# Create elder-flow user
RUN useradd -m -s /bin/bash elderflow

WORKDIR /app

# Copy Python dependencies from builder
COPY --from=builder /root/.local /home/elderflow/.local

# Copy built frontend
COPY --from=frontend-builder /frontend/dist /app/web/dist

# Copy application code
COPY . .

# Set permissions
RUN chown -R elderflow:elderflow /app

# Copy configuration files
COPY docker/nginx.conf /etc/nginx/nginx.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Environment variables
ENV PATH=/home/elderflow/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV ELDER_FLOW_ENV=production

# Expose ports
EXPOSE 8080 8443 9090

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8080/health')"

USER elderflow

# Start supervisor
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
