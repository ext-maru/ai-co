#!/usr/bin/env python3
"""
üõ°Ô∏è „Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„Éâ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈáçË§á„ÉÅ„Çß„ÉÉ„Ç´„ÉºÔºàÁ∞°ÊΩîÁâàÔºâ
============================================

Issue #302 ÊïôË®ì„Å´Âü∫„Å•„ÅèÂÆüÁî®ÁöÑ„Å™ÈáçË§áÊ§úÁü•
„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂõ∫Êúâ„ÅÆÈáçË§á„ÅÆ„Åø„ÇíÊ§úÂá∫

Author: Claude Elder  
Created: 2025-07-23
"""

import os
import sys
from pathlib import Path
from typing import Dict, List, Set
from collections import defaultdict

class ProjectDuplicateChecker:
    """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈáçË§áÊ§úÁü•ÔºàÂÆüÁî®ÁâàÔºâ"""
    
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        
        # Èô§Â§ñ„Éá„Ç£„É¨„ÇØ„Éà„É™ÔºàÂ§ñÈÉ®„É©„Ç§„Éñ„É©„É™Á≠âÔºâ
        self.exclude_dirs = {
            "venv", ".venv", "node_modules", "__pycache__", 
            ".git", ".mypy_cache", ".pytest_cache",
            "libs/elder_servants/integrations/continue_dev/venv_continue_dev",

        }
        
        # 4Ë≥¢ËÄÖ„Ç∑„Çπ„ÉÜ„É†
        self.sage_names = {
            "incident_sage", "knowledge_sage", "task_sage", "rag_sage"
        }
        
        # Âç±Èô∫„Éë„Çø„Éº„É≥ÔºàIssue #302ÊïôË®ìÔºâ
        self.dangerous_patterns = ["src", "source", "lib", "script", "test", "config"]
    
    def should_exclude(self, path: Path) -> bool:
        """Èô§Â§ñ„Åô„Åπ„Åç„Éë„Çπ„Åã„ÉÅ„Çß„ÉÉ„ÇØ"""
        path_str = str(path.relative_to(self.project_root))
        
        for exclude in self.exclude_dirs:
            if exclude in path_str or path.name in self.exclude_dirs:
                return True
        return False
    
    def find_project_duplicates(self) -> Dict[str, List[str]]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÜÖÈáçË§áÊ§úÁü•"""
        directory_map = defaultdict(list)
        
        for root, dirs, files in os.walk(self.project_root):
            # Èô§Â§ñ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Çπ„Ç≠„ÉÉ„Éó
            dirs[:] = [d for d in dirs if not self.should_exclude(Path(root) / d)]
            
            root_path = Path(root)
            if self.should_exclude(root_path):
                continue
            
            for dir_name in dirs:
                full_path = root_path / dir_name
                rel_path = full_path.relative_to(self.project_root)
                directory_map[dir_name].append(str(rel_path))
        
        # ÈáçË§á„ÅÆ„ÅøÊäΩÂá∫Ôºà2ÂÄã‰ª•‰∏äÔºâ
        duplicates = {name: paths for name, paths in directory_map.items() 
                     if len(paths) > 1}
        
        return duplicates
    
    def check_sage_conflicts(self) -> List[str]:
        """4Ë≥¢ËÄÖÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ"""
        conflicts = []
        
        for sage_name in self.sage_names:
            locations = []
            
            for root, dirs, files in os.walk(self.project_root):
                if self.should_exclude(Path(root)):
                    continue
                
                if sage_name in dirs:
                    sage_path = Path(root) / sage_name
                    rel_path = sage_path.relative_to(self.project_root)
                    locations.append(str(rel_path))
            
            if len(locations) > 1:
                conflicts.append(f"{sage_name}: {locations}")
        
        return conflicts
    
    def check_dangerous_patterns(self) -> List[str]:
        """Âç±Èô∫„Éë„Çø„Éº„É≥„ÉÅ„Çß„ÉÉ„ÇØ"""
        dangerous_found = []
        
        for root, dirs, files in os.walk(self.project_root):
            if self.should_exclude(Path(root)):
                continue
            
            root_path = Path(root)
            
            for dir_name in dirs:
                if dir_name in self.dangerous_patterns:
                    full_path = root_path / dir_name
                    rel_path = full_path.relative_to(self.project_root)
                    dangerous_found.append(str(rel_path))
        
        return dangerous_found
    
    def generate_report(self) -> Dict:
        """Á∞°ÊΩî„É¨„Éù„Éº„ÉàÁîüÊàê"""
        print("üîç „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å‰∏≠...")
        
        duplicates = self.find_project_duplicates()
        sage_conflicts = self.check_sage_conflicts()
        dangerous = self.check_dangerous_patterns()
        
        # ÈáçË¶Å„Å™ÈáçË§á„ÅÆ„Åø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        important_duplicates = {}
        for name, paths in duplicates.items():
            # ÈáçË¶Å„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Åø
            if (name in self.sage_names or 
                name in ["data", "tests", "scripts", "docs", "configs", "libs"] or
                any(sage in name for sage in self.sage_names)):
                important_duplicates[name] = paths
        
        total_issues = len(important_duplicates) + len(sage_conflicts) + len(dangerous)
        
        return {
            "status": "PASS" if total_issues == 0 else "FAIL",
            "total_issues": total_issues,
            "important_duplicates": important_duplicates,
            "sage_conflicts": sage_conflicts,
            "dangerous_patterns": dangerous
        }

def print_simple_report(report: Dict):
    """Á∞°ÊΩî„Å™„É¨„Éù„Éº„ÉàÂá∫Âäõ"""
    print("\n" + "="*60)
    print("üèõÔ∏è „Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„Éâ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ")
    print("="*60)
    
    status = report["status"]
    total = report["total_issues"]
    
    if status == "PASS":
        print("‚úÖ „Çπ„ÉÜ„Éº„Çø„Çπ: PASS - ÈáçË§áÂïèÈ°å„Å™„Åó")
        print("üéâ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊßãÈÄ†„ÅØÂÆåÁíß„Åß„ÅôÔºÅ")
    else:
        print(f"‚ùå „Çπ„ÉÜ„Éº„Çø„Çπ: FAIL - {total}ÂÄã„ÅÆÂïèÈ°åÊ§úÂá∫")
    
    print()
    
    # ÈáçË¶Å„Å™ÈáçË§á
    important = report["important_duplicates"]
    if important:
        print("üö® ÈáçË¶Å„Å™ÈáçË§á„Éá„Ç£„É¨„ÇØ„Éà„É™:")
        for name, paths in important.items():
            print(f"  üìÅ {name}:")
            for path in paths:
                print(f"    - {path}")
        print()
    
    # 4Ë≥¢ËÄÖÁ´∂Âêà
    sage_conflicts = report["sage_conflicts"]
    if sage_conflicts:
        print("üèõÔ∏è 4Ë≥¢ËÄÖ„Ç∑„Çπ„ÉÜ„É†Á´∂ÂêàÔºàIssue #302„Éë„Çø„Éº„É≥Ôºâ:")
        for conflict in sage_conflicts:
            print(f"  ‚öîÔ∏è {conflict}")
        print()
    
    # Âç±Èô∫„Éë„Çø„Éº„É≥
    dangerous = report["dangerous_patterns"]
    if dangerous:
        print("‚ö†Ô∏è Âç±Èô∫„Éë„Çø„Éº„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™:")
        for pattern in dangerous:
            print(f"  üö® {pattern}")
        print()
    
    # ÂØæÂøúÊé®Â•®
    if total > 0:
        print("üõ†Ô∏è Êé®Â•®ÂØæÂøú:")
        if important:
            print("  1.0 ÈáçË§á„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁµ±Âêà„ÉªÂâäÈô§")
        if sage_conflicts:
            print("  2.0 4Ë≥¢ËÄÖ„Ç∑„Çπ„ÉÜ„É†ÈáçË§áËß£Ê±∫ÔºàÊúÄÂÆâÂÖ®Á≠ñÈÅ©Áî®Ôºâ")
        if dangerous:
            print("  3.0 Âç±Èô∫„Éë„Çø„Éº„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÊîπÂêç")
        print("\nüìö Ë©≥Á¥∞: docs/standards/PROJECT_STRUCTURE_STANDARDS.md")
    
    print("="*60)

def main():
    """„É°„Ç§„É≥ÂÆüË°å"""
    if len(sys.argv) > 1:
        project_root = sys.argv[1]
    else:
        project_root = "."
    
    try:
        checker = ProjectDuplicateChecker(project_root)
        report = checker.generate_report()
        print_simple_report(report)
        
        # ÂïèÈ°å„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÁµÇ‰∫Ü„Ç≥„Éº„Éâ1
        if report["total_issues"] > 0:
            sys.exit(1)
        
        sys.exit(0)
        
    except Exception as e:
        print(f"‚ùå „Ç®„É©„Éº: {e}", file=sys.stderr)
        sys.exit(2)

if __name__ == "__main__":
    main()