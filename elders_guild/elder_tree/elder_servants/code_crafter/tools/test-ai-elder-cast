#!/usr/bin/env python3
"""
AI Elder Cast テスト - Claude Code起動なしでチェック
"""

import os
import subprocess
import sys
from pathlib import Path


def test_ai_elder_cast():
    """ai-elder-cast のテスト"""
    print("🧪 ai-elder-cast テスト開始")

    project_root = Path(__file__).parent.parent
    medium_file = project_root / "docs" / "technical" / "ELDER_KNOWLEDGE_CONTEXT_MEDIUM.md"

    # ファイル存在チェック
    if medium_file.exists():
        size = medium_file.stat().st_size
        print(f"✅ 中間版ファイル存在: {medium_file.name} ({size/1024:.1f}KB)")
    else:
        print(f"❌ 中間版ファイル不存在: {medium_file}")
        return False

    # Claude Code検索テスト
    claude_cmd = None
    for cmd in ["claude", "claude-cli", "claude-code"]:
        try:
            result = subprocess.run([cmd, "--version"], capture_output=True, check=True)
            claude_cmd = cmd
            print(f"✅ Claude Code発見: {cmd}")
            break
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"⚠️  Claude Code未発見: {cmd}")
            continue

    if not claude_cmd:
        print("❌ Claude Code が見つかりません")
        return False

    print("✅ 基本テスト完了")
    return True


def test_ai_elder_cast_modular():
    """ai-elder-cast-modular のテスト"""
    print("\n🧪 ai-elder-cast-modular テスト開始")

    # --list テスト
    try:
        result = subprocess.run(
            ["python3", "scripts/ai-elder-cast-modular", "--list"],
            capture_output=True,
            text=True,
            timeout=10,
        )

        if result.returncode == 0:
            print("✅ --list オプション動作")
            lines = result.stdout.count("\n")
            print(f"✅ {lines}行の出力")
        else:
            print(f"❌ --list エラー: {result.stderr}")
            return False

    except subprocess.TimeoutExpired:
        print("❌ --list タイムアウト")
        return False

    print("✅ モジュラーテスト完了")
    return True


def main():
    """メインテスト"""
    print("🔮 AI Elder Cast 全体テスト")
    print("=" * 50)

    test1 = test_ai_elder_cast()
    test2 = test_ai_elder_cast_modular()

    print("\n📊 テスト結果:")
    print(f"ai-elder-cast: {'✅ 正常' if test1 else '❌ 異常'}")
    print(f"ai-elder-cast-modular: {'✅ 正常' if test2 else '❌ 異常'}")

    if test1 and test2:
        print("\n🎉 全テスト合格！")
        return 0
    else:
        print("\n⚠️  一部テスト失敗")
        return 1


if __name__ == "__main__":
    sys.exit(main())
