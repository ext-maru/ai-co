#!/bin/bash
# 対話型タスク開始

# ヘルプ表示
show_help() {
    cat << EOF
ai-dialog - AI Company対話型タスク開始コマンド

使用方法:
    ai-dialog <初期プロンプト>
    ai-dialog --help | -h

説明:
    AIとの対話型タスクセッションを開始します。
    指定されたプロンプトでタスクを開始し、会話IDを生成します。

引数:
    <初期プロンプト>    タスクの開始プロンプト

オプション:
    --help, -h          このヘルプを表示

例:
    ai-dialog "PDFレポート生成システムを作成してください"
    ai-dialog "データベースの最適化を提案してください"

注意:
    応答は ai-reply <conversation_id> <回答> で送信してください
EOF
}

# 引数チェック
if [ $# -eq 0 ]; then
    echo "使用方法: ai-dialog <初期プロンプト>"
    echo "詳細: ai-dialog --help"
    exit 1
fi

# ヘルプオプションチェック
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

PROMPT="$*"
cd /root/ai_co
source venv/bin/activate

python3 -c "
import sys
sys.path.append('/root/ai_co')
from libs.conversation_manager import ConversationManager
from datetime import datetime
import pika
import json

# 会話開始
manager = ConversationManager()
task_id = f'dialog_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}'
conv_id = manager.start_conversation(task_id, '$PROMPT')

# 初期タスク送信
connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
channel = connection.channel()

task_data = {
    'conversation_id': conv_id,
    'instruction': '$PROMPT',
    'context': {'initial': True}
}

channel.basic_publish(
    exchange='',
    routing_key='dialog_task_queue',
    body=json.dumps(task_data),
    properties=pika.BasicProperties(delivery_mode=2)
)

print(f'🚀 対話開始: {conv_id}')
print(f'応答は ai-reply {conv_id} <回答> で送信')
connection.close()
"
