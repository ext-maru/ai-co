#!/usr/bin/env python3
"""
GitHub Issue Dashboard for Elder Guild
Sub IssueÈÄ≤ÊçóÁÆ°ÁêÜ„Å®„Ç≥„É°„É≥„ÉàÈñ≤Ë¶ß„ÅÆÊîπÂñÑ
"""

import json
import os
import subprocess
import sys
from datetime import datetime
from typing import Dict, List, Optional


class GitHubIssueDashboard:
    def __init__(self):
    """GitHubIssueDashboard„ÇØ„É©„Çπ"""
        self.repo = "ext-maru/ai-co"

    def get_issue_with_comments(self, issue_number: int) -> Dict:
        """IssueÊÉÖÂ†±„Çí„Ç≥„É°„É≥„Éà‰ªò„Åç„ÅßÂèñÂæó"""
        try:
            # IssueÊú¨‰Ωì„ÅÆÊÉÖÂ†±
            issue_result = subprocess.run(
                [
                    "gh",
                    "issue",
                    "view",
                    str(issue_number),
                    "--json",
                    "title,body,number,state,labels,assignees,author,createdAt",
                ],
                capture_output=True,
                text=True,
            )

            issue_data = json.loads(issue_result.stdout)

            # „Ç≥„É°„É≥„Éà„ÅÆÊÉÖÂ†±
            comments_result = subprocess.run(
                [
                    "gh",
                    "issue",
                    "view",
                    str(issue_number),
                    "--comments",
                    "--json",
                    "comments",
                ],
                capture_output=True,
                text=True,
            )

            comments_data = json.loads(comments_result.stdout)
            issue_data["comments"] = comments_data.get("comments", [])

            return issue_data

        except Exception as e:
            print(f"‚ùå Error fetching issue {issue_number}: {e}")
            return {}

    def display_issue_dashboard(self, issue_number: int)issue = self.get_issue_with_comments(issue_number)
    """IssueÊÉÖÂ†±„ÇíË¶ã„ÇÑ„Åô„ÅèË°®Á§∫"""
        if not issue:
            return

        print(f"\nüèõÔ∏è Issue #{issue['number']}: {issue['title']}")
        print(f"üìä Áä∂ÊÖã: {issue['state']}")
        print(f"üë§ ‰ΩúÊàêËÄÖ: {issue['author']['login']}")
        print(f"üìÖ ‰ΩúÊàêÊó•: {issue['createdAt']}")

        # „É©„Éô„É´Ë°®Á§∫
        if issue["labels"]:
            labels = [label["name"] for label in issue["labels"]]
            print(f"üè∑Ô∏è „É©„Éô„É´: {', '.join(labels)}")

        # Êú¨ÊñáË°®Á§∫
        print(f"\nüìù Êú¨Êñá:")
        print("=" * 50)
        print(issue["body"])

        # „Ç≥„É°„É≥„ÉàË°®Á§∫
        if issue["comments"]:
            print(f"\nüí¨ „Ç≥„É°„É≥„Éà ({len(issue['comments'])}‰ª∂):")
            print("=" * 50)

            for i, comment in enumerate(issue["comments"], 1):
                print(f"\n[{i}] {comment['author']['login']} - {comment['createdAt']}")
                print("-" * 30)
                print(comment["body"])

                # ÈÄ≤Êçó„Ç≠„Éº„ÉØ„Éº„Éâ„Çí„Éè„Ç§„É©„Ç§„Éà
                if any(
                    keyword in comment["body"]
                    for keyword in ["ÂÆå‰∫Ü", "ÈÄ≤Ë°å‰∏≠", "ÈñãÂßã", "%"]
                ):
                    print("üìà ÈÄ≤ÊçóÊÉÖÂ†±„ÅÇ„Çä")
        else:
            print("\nüí¨ „Ç≥„É°„É≥„Éà„Å™„Åó")

    def get_master_issue_progress(self, master_issue_number: int) -> Dictissue = self.get_issue_with_comments(master_issue_number):
    """aster Issue„ÅÆÈÄ≤Êçó„ÇíÂàÜÊûê""":
        if not issue:
            return {}

        progress_data = {
            "total_sub_issues": 0,
            "completed_sub_issues": 0,
            "in_progress_sub_issues": 0,
            "pending_sub_issues": 0,
            "progress_percentage": 0,
        }

        # Êú¨Êñá„Å®„Ç≥„É°„É≥„Éà„Åã„ÇâÈÄ≤ÊçóÊÉÖÂ†±„ÇíÊäΩÂá∫
        all_text = issue["body"] + "\n"
        for comment in issue["comments"]:
            all_text += comment["body"] + "\n"

        # Sub Issue„ÅÆÂèÇÁÖß„ÇíÊ§úÁ¥¢
        import re

        sub_issue_refs = re.findall(r"#(\d+)", all_text)

        for ref in sub_issue_refs:
            try:
                sub_issue_num = int(ref)
                if sub_issue_num != master_issue_number:  # Master IssueËá™‰Ωì„ÇíÈô§Â§ñ
                    progress_data["total_sub_issues"] += 1

                    # Sub Issue„ÅÆÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
                    sub_issue = self.get_issue_with_comments(sub_issue_num)
                    if sub_issue:
                        if sub_issue["state"] == "CLOSED":
                            progress_data["completed_sub_issues"] += 1
                        elif "ÈÄ≤Ë°å‰∏≠" in all_text or "in-progress" in str(
                            sub_issue.get("labels", [])
                        ):
                            progress_data["in_progress_sub_issues"] += 1
                        else:
                            progress_data["pending_sub_issues"] += 1
            except:
                continue

        if progress_data["total_sub_issues"] > 0:
            progress_data["progress_percentage"] = (
                progress_data["completed_sub_issues"]
                / progress_data["total_sub_issues"]
                * 100
            )

        return progress_data

    def display_master_issue_dashboard(self, master_issue_number: int)print(f"\nüèõÔ∏è Master Issue Dashboard - #{master_issue_number}")
    """Master IssueÂ∞ÇÁî®„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"""
        print("=" * 60)

        # Âü∫Êú¨ÊÉÖÂ†±Ë°®Á§∫
        self.display_issue_dashboard(master_issue_number)

        # ÈÄ≤ÊçóÂàÜÊûê
        progress = self.get_master_issue_progress(master_issue_number)

        print(f"\nüìä ÈÄ≤ÊçóÂàÜÊûê:")
        print(f"Á∑èSub IssueÊï∞: {progress['total_sub_issues']}")
        print(f"ÂÆå‰∫Ü: {progress['completed_sub_issues']}")
        print(f"ÈÄ≤Ë°å‰∏≠: {progress['in_progress_sub_issues']}")
        print(f"ÂæÖÊ©ü‰∏≠: {progress['pending_sub_issues']}")
        print(f"ÂÆå‰∫ÜÁéá: {progress['progress_percentage']:0.1f}%")

        # „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº
        completed = progress["completed_sub_issues"]
        total = progress["total_sub_issues"]
        if total > 0:
            bar_length = 30
            filled_length = int(bar_length * completed / total)
            bar = "‚ñà" * filled_length + "-" * (bar_length - filled_length)
            print(f"ÈÄ≤Êçó: [{bar}] {completed}/{total}")


def main()dashboard = GitHubIssueDashboard()
"""main„É°„ÇΩ„ÉÉ„Éâ"""

    if len(sys.argv) < 2:
        print("‰ΩøÁî®ÊñπÊ≥ï:")
        print("python3 github_issue_dashboard.py <issue_number>")
        print("python3 github_issue_dashboard.py master <master_issue_number>")
        return

    if sys.argv[1] == "master":
        if len(sys.argv) < 3:
            print("Master IssueÁï™Âè∑„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            return
        dashboard.display_master_issue_dashboard(int(sys.argv[2]))
    else:
        dashboard.display_issue_dashboard(int(sys.argv[1]))


if __name__ == "__main__":
    main()
