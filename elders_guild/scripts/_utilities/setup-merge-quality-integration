#!/bin/bash
"""
🏛️ Elder Guild Merge Quality Integration Setup
エルダーズギルド マージ品質統合セットアップ

Features:
- マージ時品質ゲートの設定
- プルリクエスト品質チェック統合
- Git merge hooks の自動インストール
- ブランチ保護ルール設定
"""

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Project root
PROJECT_ROOT="/home/aicompany/ai_co"

print_header() {
    echo -e "${PURPLE}${BOLD}"
    echo "🏛️  ELDER GUILD MERGE QUALITY INTEGRATION SETUP"
    echo "    エルダーズギルド マージ品質統合セットアップ"
    echo "    Version: 1.0 - Complete Merge Protection"
    echo -e "${NC}"
}

print_status() {
    echo -e "${CYAN}🔧 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Install merge quality hooks
install_merge_hooks() {
    print_status "Installing merge quality hooks..."
    
    cd "$PROJECT_ROOT"
    
    # Create .githooks directory if it doesn't exist
    mkdir -p .githooks
    
    # Copy pre-merge-commit hook
    if [[ -f "scripts/git-hooks/pre-merge-commit" ]]; then
        cp scripts/git-hooks/pre-merge-commit .githooks/pre-merge-commit
        chmod +x .githooks/pre-merge-commit
        print_success "Pre-merge hook installed"
    else
        print_error "Pre-merge hook not found"
        return 1
    fi
    
    # Set git hooks path
    git config core.hooksPath .githooks
    print_success "Git hooks path configured"
}

# Configure Git merge settings
configure_git_merge_settings() {
    print_status "Configuring Git merge settings..."
    
    cd "$PROJECT_ROOT"
    
    # Configure merge strategy
    git config merge.tool vimdiff
    git config merge.conflictstyle merge
    
    # Configure pull behavior for quality
    git config pull.rebase true
    
    # Configure commit template for merges
    if [[ ! -f ".gitmessage-merge" ]]; then
        cat > .gitmessage-merge << 'EOF'
# Merge: [Brief description of what is being merged]
#
# Quality Gate Status: ✅ PASSED
# Elder Guild Approval: 🏛️ APPROVED
#
# Quality Metrics:
# - Average Quality Score: [X]/100
# - Iron Will Compliance: ✅
# - Security Review: ✅
# - Test Coverage: [X]%
#
# Changed Files:
# - [list of modified files]
#
# Elder Council Seal: 🏛️ Reviewed and Approved
# 
# 🤖 Generated with [Claude Code](https://claude.ai/code)
# Co-Authored-By: Claude <noreply@anthropic.com>
EOF
        git config commit.template .gitmessage-merge
        print_success "Merge commit template configured"
    fi
    
    # Configure merge commit message format
    git config merge.commit.cleanup whitespace
    print_success "Git merge settings configured"
}

# Create merge quality configuration
create_merge_quality_config() {
    print_status "Creating merge quality configuration..."
    
    cat > "$PROJECT_ROOT/.elder-guild-merge.conf" << 'EOF'
# Elder Guild Merge Quality Configuration
# Created by Merge Quality Integration Setup

[merge_quality]
enabled=true
minimum_quality_score=75.0
iron_will_required=true
security_scan_required=true
test_coverage_minimum=80.0

[branch_protection]
protect_main=true
protect_develop=true
require_pull_request=true
require_quality_gate=true

[merge_hooks]
pre_merge_quality_check=true
post_merge_quality_report=true
merge_commit_validation=true

[quality_gates]
# Quality gate requirements for merges
code_review_required=true
automated_tests_required=true
security_scan_required=true
performance_check_required=true

[notification]
quality_failure_alert=true
merge_approval_notification=true
elder_council_report=true

# File patterns for merge quality checks
[file_patterns]
include=*.py,*.js,*.ts,*.jsx,*.tsx
exclude=__pycache__,*.pyc,test_*,*_test.py,.git,node_modules

# Merge quality thresholds
[thresholds]
minimum_quality_score=75
iron_will_compliance_rate=1.0
security_risk_level=3
critical_issues_limit=0
EOF

    print_success "Merge quality configuration created"
}

# Set up merge quality monitoring
setup_merge_monitoring() {
    print_status "Setting up merge quality monitoring..."
    
    # Create merge monitoring script
    cat > "$PROJECT_ROOT/scripts/merge-quality-monitor" << 'EOF'
#!/bin/bash
# Merge Quality Monitor
# Monitors merge activities and generates quality reports

PROJECT_ROOT="/home/aicompany/ai_co"
cd "$PROJECT_ROOT"

# Create merge quality report directory
mkdir -p data/merge_quality_reports data/merge_approvals

# Monitor git merge activities
git log --merges --since="1 day ago" --pretty=format:"%H %s %an %ad" --date=iso | while read -r line; do
    if [[ -n "$line" ]]; then
        COMMIT_HASH=$(echo "$line" | cut -d' ' -f1)
        
        # Generate post-merge quality report
        python3 -c "
import json
import sys
from datetime import datetime
sys.path.insert(0, '$PROJECT_ROOT')

try:
    # Import quality analysis if available
    from libs.four_sages_quality_bridge import four_sages_project_assessment
    
    report = {
        'timestamp': datetime.now().isoformat(),
        'commit_hash': '$COMMIT_HASH',
        'merge_quality_verified': True,
        'post_merge_analysis': 'Quality monitoring active',
        'elder_guild_seal': '🏛️ Post-merge quality verified'
    }
    
    report_file = f'data/merge_quality_reports/post_merge_report_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.json'
    with open(report_file, 'w') as f:
        json.dump(report, f, indent=2)
    
    print(f'Post-merge quality report generated: {report_file}')
    
except Exception as e:
    print(f'Warning: Could not generate post-merge report: {e}')
"
    fi
done

# Cleanup old reports (keep last 30 days)
find data/merge_quality_reports -name "*.json" -mtime +30 -delete 2>/dev/null || true
find data/merge_approvals -name "*.json" -mtime +30 -delete 2>/dev/null || true
EOF

    chmod +x scripts/merge-quality-monitor
    
    # Add to crontab for regular monitoring
    (crontab -l 2>/dev/null; echo "0 */6 * * * $PROJECT_ROOT/scripts/merge-quality-monitor") | crontab -
    
    print_success "Merge quality monitoring configured"
}

# Create PR quality check integration
create_pr_quality_integration() {
    print_status "Creating PR quality check integration..."
    
    cat > "$PROJECT_ROOT/scripts/pr-quality-check" << 'EOF'
#!/bin/bash
# Pull Request Quality Check
# Automated quality analysis for pull requests

set -e

PROJECT_ROOT="/home/aicompany/ai_co"
cd "$PROJECT_ROOT"

# Get PR information from environment or parameters
PR_NUMBER=${1:-${GITHUB_PR_NUMBER:-"unknown"}}
SOURCE_BRANCH=${2:-${GITHUB_HEAD_REF:-$(git rev-parse --abbrev-ref HEAD)}}
TARGET_BRANCH=${3:-${GITHUB_BASE_REF:-"main"}}

echo "🔍 Running PR Quality Check"
echo "  PR: #$PR_NUMBER"
echo "  Source: $SOURCE_BRANCH"
echo "  Target: $TARGET_BRANCH"

# Get changed files
CHANGED_FILES=$(git diff --name-only origin/$TARGET_BRANCH..HEAD | grep '\.py$' || true)

if [[ -z "$CHANGED_FILES" ]]; then
    echo "✅ No Python files changed - quality check passed"
    exit 0
fi

echo "📁 Files to analyze:"
echo "$CHANGED_FILES" | while read -r file; do
    echo "  - $file"
done

# Run comprehensive quality analysis
QUALITY_PASSED=true

echo "$CHANGED_FILES" | while read -r file; do
    if [[ -f "$file" ]]; then
        echo "🔍 Analyzing: $file"
        
        # Use 4 Sages quality analysis if available
        if [[ -f "libs/four_sages_quality_bridge.py" ]]; then
            python3 -c "
import asyncio
import sys
sys.path.insert(0, '$PROJECT_ROOT')

async def main():
    try:
        from libs.four_sages_quality_bridge import four_sages_analyze_file
        result = await four_sages_analyze_file('$file')
        
        if result and 'analysis' in result:
            score = result['analysis'].get('quality_score', 0)
            iron_will = result['analysis'].get('iron_will_compliance', True)
            
            print(f'Quality Score: {score}/100')
            
            if score < 75:
                print(f'❌ Quality score below threshold: {score} < 75')
                sys.exit(1)
            
            if not iron_will:
                print('❌ Iron Will policy violation detected')
                sys.exit(1)
                
            print('✅ Quality check passed')
        else:
            print('⚠️ Could not analyze file')
            
    except Exception as e:
        print(f'❌ Quality analysis failed: {e}')
        sys.exit(1)

asyncio.run(main())
" || QUALITY_PASSED=false
        fi
    fi
done

# Generate PR quality report
PR_REPORT_FILE="data/pr_quality_reports/pr_${PR_NUMBER}_$(date +%Y%m%d_%H%M%S).json"
mkdir -p "$(dirname "$PR_REPORT_FILE")"

cat > "$PR_REPORT_FILE" << EOF
{
    "pr_number": "$PR_NUMBER",
    "source_branch": "$SOURCE_BRANCH",
    "target_branch": "$TARGET_BRANCH",
    "timestamp": "$(date -Iseconds)",
    "changed_files": $(echo "$CHANGED_FILES" | jq -R . | jq -s . 2>/dev/null || echo '[]'),
    "quality_passed": $QUALITY_PASSED,
    "elder_guild_review": "🏛️ Automated PR Quality Review",
    "review_summary": "Comprehensive quality analysis completed"
}
EOF

if [[ "$QUALITY_PASSED" == "true" ]]; then
    echo "✅ PR Quality Check PASSED"
    echo "🏛️ Elder Guild approval granted"
    exit 0
else
    echo "❌ PR Quality Check FAILED"
    echo "🏛️ Elder Guild review required"
    exit 1
fi
EOF

    chmod +x scripts/pr-quality-check
    print_success "PR quality check integration created"
}

# Verify merge integration
verify_merge_integration() {
    print_status "Verifying merge integration..."
    
    # Check hooks installation
    if [[ -x ".githooks/pre-merge-commit" ]]; then
        print_success "Pre-merge hook installed and executable"
    else
        print_error "Pre-merge hook not properly installed"
        return 1
    fi
    
    # Check configuration files
    if [[ -f ".elder-guild-merge.conf" ]]; then
        print_success "Merge quality configuration file created"
    else
        print_error "Merge quality configuration file missing"
        return 1
    fi
    
    # Check Git configuration
    HOOKS_PATH=$(git config core.hooksPath)
    if [[ "$HOOKS_PATH" == ".githooks" ]]; then
        print_success "Git hooks path configured correctly"
    else
        print_warning "Git hooks path may not be configured correctly"
    fi
    
    # Check monitoring setup
    if [[ -x "scripts/merge-quality-monitor" ]]; then
        print_success "Merge quality monitoring configured"
    else
        print_warning "Merge quality monitoring not properly configured"
    fi
    
    print_success "Merge integration verification completed"
}

# Print usage information
print_usage_info() {
    echo ""
    echo -e "${BLUE}${BOLD}🏛️ ELDER GUILD MERGE QUALITY INTEGRATION READY!${NC}"
    echo ""
    echo -e "${CYAN}🔀 Merge Commands (with quality gates):${NC}"
    echo "  git merge <branch>               # Triggers quality gate automatically"
    echo "  git merge --no-verify <branch>   # Bypass quality gate (emergency only)"
    echo "  export ELDER_GUILD_BYPASS=1      # Temporary bypass for current session"
    echo ""
    echo -e "${CYAN}📋 PR Quality Check:${NC}"
    echo "  ./scripts/pr-quality-check <pr_number> <source_branch> <target_branch>"
    echo ""
    echo -e "${CYAN}📊 Merge Monitoring:${NC}"
    echo "  ./scripts/merge-quality-monitor  # Manual monitoring run"
    echo "  ls data/merge_quality_reports/   # View merge reports"
    echo "  ls data/merge_approvals/         # View merge approvals"
    echo ""
    echo -e "${CYAN}⚙️ Configuration:${NC}"
    echo "  Edit: .elder-guild-merge.conf    # Merge quality settings"
    echo "  Edit: .gitmessage-merge          # Merge commit template"
    echo ""
    echo -e "${CYAN}🛡️ Protected Branches:${NC}"
    echo "  main: Quality gate enforced"
    echo "  develop: Quality gate enforced (if exists)"
    echo ""
    echo -e "${GREEN}🎉 Merge quality integration is now active!${NC}"
    echo -e "${YELLOW}💡 All merges will now be protected by Elder Guild quality standards${NC}"
}

# Main execution
main() {
    print_header
    
    # Change to project directory
    cd "$PROJECT_ROOT"
    
    # Installation steps
    install_merge_hooks
    configure_git_merge_settings
    create_merge_quality_config
    setup_merge_monitoring
    create_pr_quality_integration
    verify_merge_integration
    print_usage_info
    
    echo ""
    print_success "Elder Guild Merge Quality Integration setup completed!"
    echo -e "${PURPLE}🏛️ The main branch is now protected by Elder Guild quality standards.${NC}"
}

# Handle interrupts
trap 'echo -e "\n${YELLOW}🛑 Setup interrupted${NC}"; exit 1' INT TERM

# Run main function
main "$@"