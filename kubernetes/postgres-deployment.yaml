apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: elder-flow
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: elder-flow
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
      component: database
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: ankane/pgvector:latest
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: elder-flow-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: elder-flow-secrets
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elder-flow-secrets
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - elderflow
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - elderflow
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: elder-flow
spec:
  selector:
    app: postgres
    component: database
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: elder-flow
data:
  01-init-extensions.sql: |
    -- Enable required extensions
    CREATE EXTENSION IF NOT EXISTS vector;
    CREATE EXTENSION IF NOT EXISTS pg_trgm;
    CREATE EXTENSION IF NOT EXISTS btree_gin;

  02-init-schema.sql: |
    -- Elder Flow Core Schema
    CREATE SCHEMA IF NOT EXISTS elder_flow;

    -- Grimoire Schema
    CREATE SCHEMA IF NOT EXISTS grimoire;

    -- Set search path
    SET search_path TO elder_flow, grimoire, public;

  03-init-tables.sql: |
    -- Elder Flow Sessions
    CREATE TABLE IF NOT EXISTS elder_flow.sessions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        request TEXT NOT NULL,
        status VARCHAR(50) NOT NULL,
        started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Tasks
    CREATE TABLE IF NOT EXISTS elder_flow.tasks (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        session_id UUID REFERENCES elder_flow.sessions(id),
        type VARCHAR(50) NOT NULL,
        status VARCHAR(50) NOT NULL,
        servant_type VARCHAR(50),
        content TEXT,
        result JSONB,
        error TEXT,
        started_at TIMESTAMP,
        completed_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Grimoire Spells
    CREATE TABLE IF NOT EXISTS grimoire.spells (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) UNIQUE NOT NULL,
        description TEXT,
        content TEXT NOT NULL,
        category VARCHAR(100),
        tags TEXT[],
        power_level INTEGER DEFAULT 1,
        usage_count INTEGER DEFAULT 0,
        embedding vector(1536),
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Create indexes
    CREATE INDEX idx_sessions_status ON elder_flow.sessions(status);
    CREATE INDEX idx_tasks_session_id ON elder_flow.tasks(session_id);
    CREATE INDEX idx_tasks_status ON elder_flow.tasks(status);
    CREATE INDEX idx_spells_embedding ON grimoire.spells USING ivfflat (embedding vector_cosine_ops);
    CREATE INDEX idx_spells_tags ON grimoire.spells USING gin(tags);
    CREATE INDEX idx_spells_category ON grimoire.spells(category);
