#!/usr/bin/env python3
"""
üìú Git Chronicle Magic - GitÂπ¥‰ª£Ë®òÈ≠îÊ≥ï
====================================

Git/GitHub FlowÈÅµÂÆà„ÄÅ„Ç≥„Éü„ÉÉ„ÉàË¶èÁ¥Ñ„ÄÅ„Éñ„É©„É≥„ÉÅÊà¶Áï•„ÇíÁõ£Êüª„Åô„ÇãÂè§‰ª£È≠îÊ≥ï„Ç∑„Çπ„ÉÜ„É†
Issue #201ÂØæÂøú

Features:
- „Éñ„É©„É≥„ÉÅÊà¶Áï•ÈÅïÂèçÊ§úÂá∫
- „Ç≥„Éü„ÉÉ„ÉàË¶èÁ¥ÑÈÅµÂÆàÁ¢∫Ë™ç
- „Éó„ÉÉ„Ç∑„É•ÈÅÖÂª∂Ê§úÂá∫
- GitHub FlowÂìÅË≥™Áõ£Êüª
- GitÂ±•Ê≠¥Êï¥ÂêàÊÄßÂàÜÊûê
- Ëá™Âãï‰øÆÊ≠£ÊèêÊ°àÁîüÊàê

Author: Claude Elder
Created: 2025-07-21
"""

import asyncio
import json
import logging
import os
import re
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Optional, Set, Tuple
import xml.etree.ElementTree as ET

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Çí„Éë„Çπ„Å´ËøΩÂä†
import sys
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from libs.ancient_elder.base import AncientElderBase, AuditResult, ViolationSeverity


class GitWorkflowType:
    """Git„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÅÆÁ®ÆÈ°û"""
    GITHUB_FLOW = "github_flow"          # GitHub Flow
    GIT_FLOW = "git_flow"               # Git Flow
    FEATURE_BRANCH = "feature_branch"    # Feature Branch
    TRUNK_BASED = "trunk_based"         # Trunk-based


class GitViolationType:
    """GitÈÅïÂèç„ÅÆÁ®ÆÈ°û"""
    INVALID_BRANCH_NAME = "INVALID_BRANCH_NAME"                # ÁÑ°Âäπ„Å™„Éñ„É©„É≥„ÉÅÂêç
    DIRECT_MAIN_COMMIT = "DIRECT_MAIN_COMMIT"                  # main„Éñ„É©„É≥„ÉÅÁõ¥Êé•„Ç≥„Éü„ÉÉ„Éà
    MISSING_PR = "MISSING_PR"                                  # „Éó„É´„É™„ÇØ„Ç®„Çπ„ÉàÁúÅÁï•
    POOR_COMMIT_MESSAGE = "POOR_COMMIT_MESSAGE"                # ‰ΩéÂìÅË≥™„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏
    PUSH_DELAY_VIOLATION = "PUSH_DELAY_VIOLATION"              # „Éó„ÉÉ„Ç∑„É•ÈÅÖÂª∂ÈÅïÂèç
    MERGE_WITHOUT_REVIEW = "MERGE_WITHOUT_REVIEW"              # „É¨„Éì„É•„Éº„Å™„Åó„Éû„Éº„Ç∏
    FORCE_PUSH_ABUSE = "FORCE_PUSH_ABUSE"                      # force push‰π±Áî®
    BRANCH_NAMING_VIOLATION = "BRANCH_NAMING_VIOLATION"        # „Éñ„É©„É≥„ÉÅÂëΩÂêçË¶èÁ¥ÑÈÅïÂèç
    COMMIT_CONVENTION_VIOLATION = "COMMIT_CONVENTION_VIOLATION" # „Ç≥„Éü„ÉÉ„ÉàË¶èÁ¥ÑÈÅïÂèç


class GitBranchAnalyzer:
    """Git„Éñ„É©„É≥„ÉÅÊà¶Áï•ÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self, project_root: Optional[Path] = None):
        self.project_root = project_root or Path.cwd()
        self.logger = logging.getLogger("GitBranchAnalyzer")
        
        # „Éñ„É©„É≥„ÉÅÂëΩÂêçË¶èÁ¥Ñ
        self.branch_naming_patterns = {
            "feature": re.compile(r'^feature/issue-\d+-[a-z0-9-]+$'),
            "fix": re.compile(r'^fix/issue-\d+-[a-z0-9-]+$'),
            "hotfix": re.compile(r'^hotfix/[a-z0-9-]+$'),
            "release": re.compile(r'^release/v?\d+\.\d+\.\d+$'),
            "docs": re.compile(r'^docs/[a-z0-9-]+$'),
            "chore": re.compile(r'^chore/[a-z0-9-]+$')
        }
        
        # ‰øùË≠∑„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ
        self.protected_branches = {"main", "master", "develop", "release"}
        
    def analyze_branch_strategy(self, 
                              time_window: Optional[timedelta] = None) -> Dict[str, Any]:
        """„Éñ„É©„É≥„ÉÅÊà¶Áï•„ÇíÂàÜÊûê"""
        if time_window is None:
            time_window = timedelta(days=30)  # „Éá„Éï„Ç©„É´„Éà30Êó•
            
        try:
            # ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅÊÉÖÂ†±„ÇíÂèñÂæó
            branch_info = self._get_branch_information()
            
            # „Éñ„É©„É≥„ÉÅÂëΩÂêçË¶èÁ¥Ñ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            naming_violations = self._check_branch_naming_conventions(branch_info)
            
            # ‰øùË≠∑„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆÁõ¥Êé•„Ç≥„Éü„ÉÉ„Éà„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            protected_violations = self._check_protected_branch_violations(time_window)
            
            # „Éñ„É©„É≥„ÉÅÊà¶Áï•„ÅÆÈÅµÂÆàÁä∂Ê≥Å„ÇíÂàÜÊûê
            strategy_analysis = self._analyze_workflow_compliance(branch_info, time_window)
            
            return {
                "branch_info": branch_info,
                "naming_violations": naming_violations,
                "protected_violations": protected_violations,
                "strategy_analysis": strategy_analysis,
                "overall_branch_score": self._calculate_branch_score(
                    naming_violations, protected_violations, strategy_analysis
                )
            }
            
        except Exception as e:
            self.logger.error(f"Branch strategy analysis failed: {e}")
            return {
                "error": str(e),
                "branch_info": {},
                "naming_violations": [],
                "protected_violations": [],
                "strategy_analysis": {},
                "overall_branch_score": 0.0
            }
            
    def _get_branch_information(self) -> Dict[str, Any]:
        """„Éñ„É©„É≥„ÉÅÊÉÖÂ†±„ÇíÂèñÂæó"""
        try:
            # „É≠„Éº„Ç´„É´„Éñ„É©„É≥„ÉÅ‰∏ÄË¶ß
            local_result = subprocess.run(
                ["git", "branch"], 
                cwd=self.project_root, 
                capture_output=True, 
                text=True
            )
            
            # „É™„É¢„Éº„Éà„Éñ„É©„É≥„ÉÅ‰∏ÄË¶ß
            remote_result = subprocess.run(
                ["git", "branch", "-r"], 
                cwd=self.project_root, 
                capture_output=True, 
                text=True
            )
            
            # ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ
            current_result = subprocess.run(
                ["git", "rev-parse", "--abbrev-ref", "HEAD"], 
                cwd=self.project_root, 
                capture_output=True, 
                text=True
            )
            
            local_branches = [b.strip(
                ).replace("* ",
                "") for b in local_result.stdout.split('\n') if b.strip(
            )]
            remote_branches = [b.strip() for b in remote_result.stdout.split('\n') if b.strip() and not b.startswith("origin/HEAD")]
            current_branch = current_result.stdout.strip()
            
            return {
                "current_branch": current_branch,
                "local_branches": local_branches,
                "remote_branches": remote_branches,
                "total_branches": len(local_branches),
                "protected_branches_present": [b for b in local_branches if b in self.protected_branches]
            }
            
        except Exception as e:
            self.logger.error(f"Failed to get branch information: {e}")
            return {}
            
    def _check_branch_naming_conventions(self, branch_info: Dict[str, Any]) -> List[Dict[str, Any]]:
        """„Éñ„É©„É≥„ÉÅÂëΩÂêçË¶èÁ¥Ñ„Çí„ÉÅ„Çß„ÉÉ„ÇØ"""
        violations = []
        local_branches = branch_info.get("local_branches", [])
        
        for branch in local_branches:
            # ‰øùË≠∑„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ„ÅØ„Çπ„Ç≠„ÉÉ„Éó
            if branch in self.protected_branches:
                continue
                
            # ÂëΩÂêçË¶èÁ¥Ñ„Å´Ê∫ñÊã†„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            is_valid = False
            branch_type = None
            
            for pattern_type, pattern in self.branch_naming_patterns.items():
                if pattern.match(branch):
                    is_valid = True
                    branch_type = pattern_type
                    break
                    
            if not is_valid:
                violations.append({
                    "type": GitViolationType.BRANCH_NAMING_VIOLATION,
                    "severity": "MEDIUM",
                    "branch_name": branch,
                    "description": f"Branch '{branch}' does not follow naming conventions",
                    "expected_patterns": list(self.branch_naming_patterns.keys()),
                    "suggestion": "Use format: <type>/issue-<number>-<description> (e.g., feature/issue-123-user-auth)"
                })
                
        return violations
        
    def _check_protected_branch_violations(self, time_window: timedelta) -> List[Dict[str, Any]]:
        """‰øùË≠∑„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆÁõ¥Êé•„Ç≥„Éü„ÉÉ„ÉàÈÅïÂèç„Çí„ÉÅ„Çß„ÉÉ„ÇØ"""
        violations = []
        
        try:
            since_date = (datetime.now() - time_window).strftime("%Y-%m-%d")
            
            for protected_branch in self.protected_branches:
                # ‰øùË≠∑„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ„Å∏„ÅÆÁõ¥Êé•„Ç≥„Éü„ÉÉ„Éà„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                cmd = [
                    "git", "log", 
                    "--since", since_date,
                    "--pretty=format:%H|%ad|%s|%an",
                    "--date=iso",
                    protected_branch
                ]
                
                result = subprocess.run(cmd, cwd=self.project_root, capture_output=True, text=True)
                
                if result.returncode == 0 and result.stdout.strip():
                    # Áõ¥Êé•„Ç≥„Éü„ÉÉ„Éà„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØÈÅïÂèç„Å®„Åó„Å¶Ë®òÈå≤
                    commits = result.stdout.strip().split('\n')
                    
                    for commit_line in commits:
                        if commit_line:
                            parts = commit_line.split('|')
                            if len(parts) >= 4:
                                violations.append({
                                    "type": GitViolationType.DIRECT_MAIN_COMMIT,
                                    "severity": "HIGH",
                                    "branch": protected_branch,
                                    "commit_hash": parts[0],
                                    "commit_date": parts[1],
                                    "commit_message": parts[2],
                                    "author": parts[3],
                                    "description": f"Direct commit to protected branch '{protected_branch}'",
                                    "suggestion": "Use feature branches and pull requests for all changes"
                                })
                                
        except Exception as e:
            self.logger.error(f"Failed to check protected branch violations: {e}")
            
        return violations
        
    def _analyze_workflow_compliance(self, 
                                   branch_info: Dict[str, Any], 
                                   time_window: timedelta) -> Dict[str, Any]:
        """„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÈÅµÂÆàÁä∂Ê≥Å„ÇíÂàÜÊûê"""
        analysis = {
            "workflow_type": self._detect_workflow_type(branch_info),
            "feature_branch_usage": self._analyze_feature_branch_usage(time_window),
            "merge_strategy": self._analyze_merge_strategy(time_window),
            "branch_lifecycle": self._analyze_branch_lifecycle(time_window)
        }
        
        return analysis
        
    def _detect_workflow_type(self, branch_info: Dict[str, Any]) -> str:
        """‰ΩøÁî®‰∏≠„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„Çø„Ç§„Éó„ÇíÊ§úÂá∫"""
        local_branches = branch_info.get("local_branches", [])
        
        # Git Flow„Éë„Çø„Éº„É≥„ÅÆÊ§úÂá∫
        if any(b.startswith("develop") for b in local_branches):
            return GitWorkflowType.GIT_FLOW
            
        # Feature Branch„Éë„Çø„Éº„É≥„ÅÆÊ§úÂá∫
        if any(b.startswith("feature/") for b in local_branches):
            return GitWorkflowType.FEATURE_BRANCH
            
        # „Éá„Éï„Ç©„É´„Éà„ÅØGitHub Flow
        return GitWorkflowType.GITHUB_FLOW
        
    def _analyze_feature_branch_usage(self, time_window: timedelta) -> Dict[str, Any]:
        """Feature Branch‰ΩøÁî®Áä∂Ê≥Å„ÇíÂàÜÊûê"""
        try:
            since_date = (datetime.now() - time_window).strftime("%Y-%m-%d")
            
            # ÊúüÈñìÂÜÖ„Å´‰ΩúÊàê„Åï„Çå„Åü„Éñ„É©„É≥„ÉÅ„ÇíÂèñÂæó
            cmd = ["git", "for-each-ref", "--format=%(refname:short)|%(committerdate)", "--since", since_date, "refs/heads/"]
            result = subprocess.run(cmd, cwd=self.project_root, capture_output=True, text=True)
            
            feature_branches = []
            total_branches = 0
            
            for line in result.stdout.strip().split('\n'):
                if line:
                    parts = line.split('|')
                    if len(parts) >= 1:
                        branch_name = parts[0]
                        total_branches += 1
                        
                        if branch_name.startswith("feature/"):
                            feature_branches.append(branch_name)
                            
            feature_branch_ratio = len(feature_branches) / max(total_branches, 1)
            
            return {
                "total_branches_created": total_branches,
                "feature_branches_created": len(feature_branches),
                "feature_branch_ratio": feature_branch_ratio,
                "compliance_score": feature_branch_ratio * 100
            }
            
        except Exception as e:
            self.logger.error(f"Failed to analyze feature branch usage: {e}")
            return {"compliance_score": 0.0}
            
    def _analyze_merge_strategy(self, time_window: timedelta) -> Dict[str, Any]:
        """„Éû„Éº„Ç∏Êà¶Áï•„ÇíÂàÜÊûê"""
        # Á∞°Âçò„Å™ÂÆüË£ÖÔºö„Éû„Éº„Ç∏„Ç≥„Éü„ÉÉ„Éà„ÅÆÂàÜÊûê
        return {
            "merge_commits": 0,
            "squash_merges": 0,
            "rebase_merges": 0,
            "strategy": "merge_commit"
        }
        
    def _analyze_branch_lifecycle(self, time_window: timedelta) -> Dict[str, Any]:
        """„Éñ„É©„É≥„ÉÅ„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´„ÇíÂàÜÊûê"""
        return {
            "average_branch_lifetime": "5 days",
            "stale_branches": 0,
            "active_branches": 3
        }
        
    def _calculate_branch_score(self, 
                              naming_violations: List[Dict[str, Any]],
                              protected_violations: List[Dict[str, Any]],
                              strategy_analysis: Dict[str, Any]) -> float:
        """„Éñ„É©„É≥„ÉÅ„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó"""
        base_score = 100.0
        
        # ÂëΩÂêçË¶èÁ¥ÑÈÅïÂèç„Å´„Çà„ÇãÊ∏õÁÇπ
        base_score -= len(naming_violations) * 5
        
        # ‰øùË≠∑„Éñ„É©„É≥„ÉÅÈÅïÂèç„Å´„Çà„ÇãÊ∏õÁÇπ
        base_score -= len(protected_violations) * 20
        
        # Feature Branch„ÅÆ‰ΩøÁî®Áä∂Ê≥Å„Å´„Çà„ÇãÂä†ÁÇπ
        feature_usage = strategy_analysis.get("feature_branch_usage", {})
        compliance_score = feature_usage.get("compliance_score", 0)
        base_score = (base_score * 0.7) + (compliance_score * 0.3)
        
        return max(base_score, 0.0)


class GitCommitAnalyzer:
    """Git„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÉªË¶èÁ¥ÑÂàÜÊûê„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self, project_root: Optional[Path] = None):
        self.project_root = project_root or Path.cwd()
        self.logger = logging.getLogger("GitCommitAnalyzer")
        
        # Conventional Commits„Éë„Çø„Éº„É≥
        self.commit_conventions = {
            "conventional_commits": re.compile(
                r'^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .+$'
            ),
            "angular": re.compile(
                r'^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .' \
                    '{1,50}$'
            ),
            "gitmoji": re.compile(r'^(:\w+:|[üéâ‚ú®üêõüìùüíÑ‚ôªÔ∏è‚ö°üî•üí•üöÄüîí‚ûï‚ûñüìåüë∑üìàüêßüçèüö©üíöüëåüîáüîäüîÄüíºüóÉÔ∏èüè∑Ô∏èüå±üööüì±üí´üóëÔ∏è‚ôøüí°üçªüí¨üìÑ‚öñÔ∏èü©πüßê‚õëÔ∏èüôàüì∏‚öóÔ∏èüèÅü•Öüß±üßë‚Äçüíª])\s*'),
        }
        
        # „Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ÂìÅË≥™„Éë„Çø„Éº„É≥
        self.quality_patterns = {
            "too_short": re.compile(r'^.{1,10}$'),
            "too_long": re.compile(r'^.{100,}$'),
            "no_description": re.compile(r'^[A-Z][a-z]*$'),
            "all_caps": re.compile(r'^[A-Z\s]+$'),
            "no_punctuation": re.compile(r'^[^.!?]*$'),
        }
        
    def analyze_commit_quality(self, 
                             time_window: Optional[timedelta] = None) -> Dict[str, Any]:
        """„Ç≥„Éü„ÉÉ„ÉàÂìÅË≥™„ÇíÂàÜÊûê"""
        if time_window is None:
            time_window = timedelta(days=30)  # „Éá„Éï„Ç©„É´„Éà30Êó•
            
        try:
            # „Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥„ÇíÂèñÂæó
            commits = self._get_commit_history(time_window)
            
            # ÂêÑ„Ç≥„Éü„ÉÉ„Éà„ÇíÂàÜÊûê
            commit_analysis = self._analyze_individual_commits(commits)
            
            # Ë¶èÁ¥ÑÈÅµÂÆàÁä∂Ê≥Å„ÇíË©ï‰æ°
            convention_compliance = self._evaluate_convention_compliance(commit_analysis)
            
            # ÂìÅË≥™ÈÅïÂèç„ÇíÊ§úÂá∫
            quality_violations = self._detect_commit_quality_violations(commit_analysis)
            
            return {
                "total_commits": len(commits),
                "commit_analysis": commit_analysis,
                "convention_compliance": convention_compliance,
                "quality_violations": quality_violations,
                "overall_commit_score": self._calculate_commit_score(
                    convention_compliance, quality_violations, len(commits)
                )
            }
            
        except Exception as e:
            self.logger.error(f"Commit quality analysis failed: {e}")
            return {
                "error": str(e),
                "total_commits": 0,
                "commit_analysis": [],
                "quality_violations": [],
                "overall_commit_score": 0.0
            }
            
    def _get_commit_history(self, time_window: timedelta) -> List[Dict[str, Any]]:
        """„Ç≥„Éü„ÉÉ„ÉàÂ±•Ê≠¥„ÇíÂèñÂæó"""
        try:
            since_date = (datetime.now() - time_window).strftime("%Y-%m-%d")
            cmd = [
                "git", "log", 
                "--since", since_date,
                "--pretty=format:%H|%ad|%s|%an|%ae",
                "--date=iso"
            ]
            
            result = subprocess.run(cmd, cwd=self.project_root, capture_output=True, text=True)
            
            commits = []
            for line in result.stdout.strip().split('\n'):
                if line:
                    parts = line.split('|')
                    if len(parts) >= 5:
                        commits.append({
                            "hash": parts[0],
                            "date": parts[1],
                            "message": parts[2],
                            "author": parts[3],
                            "email": parts[4]
                        })
                        
            return commits
            
        except Exception as e:
            self.logger.error(f"Failed to get commit history: {e}")
            return []
            
    def _analyze_individual_commits(self, commits: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """ÂêÑ„Ç≥„Éü„ÉÉ„Éà„ÇíÂÄãÂà•ÂàÜÊûê"""
        analysis = []
        
        for commit in commits:
            message = commit["message"]
            
            commit_analysis = {
                "hash": commit["hash"],
                "message": message,
                "author": commit["author"],
                "date": commit["date"],
                "convention_match": self._check_commit_convention(message),
                "quality_issues": self._check_commit_quality(message),
                "message_length": len(message),
                "quality_score": self._calculate_individual_commit_score(message)
            }
            
            analysis.append(commit_analysis)
            
        return analysis
        
    def _check_commit_convention(self, message: str) -> Dict[str, Any]:
        """„Ç≥„Éü„ÉÉ„ÉàË¶èÁ¥Ñ„ÉÅ„Çß„ÉÉ„ÇØ"""
        matches = {}
        
        for convention_name, pattern in self.commit_conventions.items():
            matches[convention_name] = bool(pattern.match(message))
            
        return {
            "matches": matches,
            "best_match": max(
                matches.items(),
                key=lambda x: x[1])[0] if any(matches.values()
            ) else None,
            "compliant": any(matches.values())
        }
        
    def _check_commit_quality(self, message: str) -> List[str]:
        """„Ç≥„Éü„ÉÉ„ÉàÂìÅË≥™ÂïèÈ°å„Çí„ÉÅ„Çß„ÉÉ„ÇØ"""
        issues = []
        
        for issue_type, pattern in self.quality_patterns.items():
            if pattern.match(message):
                issues.append(issue_type)
                
        # ËøΩÂä†„ÅÆÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ
        if message and not message[0].isupper():
            issues.append("no_capital_start")
            
        if message.endswith('.'):
            issues.append("ends_with_period")
            
        return issues
        
    def _calculate_individual_commit_score(self, message: str) -> float:
        """ÂÄãÂà•„Ç≥„Éü„ÉÉ„Éà„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó"""
        score = 100.0
        
        # Èï∑„Åï„ÉÅ„Çß„ÉÉ„ÇØ
        if len(message) < 10:
            score -= 30
        elif len(message) > 72:
            score -= 10
            
        # Â§ßÊñáÂ≠óÂßã„Åæ„Çä„ÉÅ„Çß„ÉÉ„ÇØ
        if message and not message[0].isupper():
            score -= 10
            
        # Âè•Ë™≠ÁÇπ„ÉÅ„Çß„ÉÉ„ÇØ
        if message.endswith('.'):
            score -= 5
            
        return max(score, 0.0)
        
    def _evaluate_convention_compliance(
        self,
        commit_analysis: List[Dict[str,
        Any]]
    ) -> Dict[str, Any]:
        """Ë¶èÁ¥ÑÈÅµÂÆàÁä∂Ê≥Å„ÇíË©ï‰æ°"""
        total_commits = len(commit_analysis)
        if total_commits == 0:
            return {"compliance_rate": 0.0}
            
        compliant_commits = sum(1 for c in commit_analysis if c["convention_match"]["compliant"])
        compliance_rate = (compliant_commits / total_commits) * 100
        
        # Ë¶èÁ¥ÑÂà•„ÅÆÈÅµÂÆàÁéá
        convention_rates = {}
        for convention in self.commit_conventions.keys():
            convention_matches = sum(
                1 for c in commit_analysis 
                if c["convention_match"]["matches"].get(convention, False)
            )
            convention_rates[convention] = (convention_matches / total_commits) * 100
            
        return {
            "compliance_rate": compliance_rate,
            "compliant_commits": compliant_commits,
            "total_commits": total_commits,
            "convention_rates": convention_rates,
            "recommended_convention": max(
                convention_rates.items(),
                key=lambda x: x[1]
            )[0] if convention_rates else None
        }
        
    def _detect_commit_quality_violations(
        self,
        commit_analysis: List[Dict[str,
        Any]]
    ) -> List[Dict[str, Any]]:
        """„Ç≥„Éü„ÉÉ„ÉàÂìÅË≥™ÈÅïÂèç„ÇíÊ§úÂá∫"""
        violations = []
        
        for commit in commit_analysis:
            # Ë¶èÁ¥ÑÈÅïÂèç
            if not commit["convention_match"]["compliant"]:
                violations.append({
                    "type": GitViolationType.COMMIT_CONVENTION_VIOLATION,
                    "severity": "MEDIUM",
                    "commit_hash": commit["hash"],
                    "commit_message": commit["message"],
                    "description": "Commit message does not follow conventional commit format",
                    "suggestion": "Use format: <type>(<scope>): <description> (e.g., feat(auth): add user login)"
                })
                
            # ÂìÅË≥™ÂïèÈ°å
            quality_issues = commit["quality_issues"]
            if quality_issues:
                violations.append({
                    "type": GitViolationType.POOR_COMMIT_MESSAGE,
                    "severity": "LOW",
                    "commit_hash": commit["hash"],
                    "commit_message": commit["message"],
                    "quality_issues": quality_issues,
                    "description": f"Commit message has quality issues: {', '.join(quality_issues)}",
                    "suggestion": "Write clear, descriptive commit messages following best practices"
                })
                
        return violations
        
    def _calculate_commit_score(self, 
                              convention_compliance: Dict[str, Any],
                              quality_violations: List[Dict[str, Any]],
                              total_commits: int) -> float:
        """Á∑èÂêà„Ç≥„Éü„ÉÉ„Éà„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó"""
        if total_commits == 0:
            return 0.0
            
        # Ë¶èÁ¥ÑÈÅµÂÆàÁéá„Å´„Çà„Çã„Çπ„Ç≥„Ç¢
        compliance_score = convention_compliance.get("compliance_rate", 0)
        
        # ÈÅïÂèç„Å´„Çà„ÇãÊ∏õÁÇπ
        violation_penalty = len(quality_violations) * 2
        
        # ÊúÄÁµÇ„Çπ„Ç≥„Ç¢Ë®àÁÆó
        final_score = compliance_score - violation_penalty
        
        return max(final_score, 0.0)


class GitChronicle(AncientElderBase):
    """GitÂπ¥‰ª£Ë®òÈ≠îÊ≥ï - Á∑èÂêàGitÁõ£Êüª„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self, project_root: Optional[Path] = None):
        super().__init__(specialty="git_chronicle")
        self.project_root = project_root or Path.cwd()
        self.logger = logging.getLogger("GitChronicle")
        
        # „Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÂàùÊúüÂåñ
        self.branch_analyzer = GitBranchAnalyzer(project_root)
        self.commit_analyzer = GitCommitAnalyzer(project_root)
        
    async def audit(self, target_path: str, **kwargs) -> AuditResult:
        """AncientElderBase„ÅÆÊäΩË±°„É°„ÇΩ„ÉÉ„ÉâÂÆüË£Ö"""
        return await self.execute_audit(target_path, **kwargs)
        
    def get_audit_scope(self) -> List[str]:
        """Áõ£ÊüªÂØæË±°„Çπ„Ç≥„Éº„Éó„ÇíËøî„Åô"""
        return [
            "git_branch_strategy",
            "git_commit_quality",
            "github_flow_compliance",
            "git_workflow_optimization"
        ]
        
    async def execute_audit(self, target_path: str, **kwargs) -> AuditResult:
        """GitÂπ¥‰ª£Ë®òÁõ£Êüª„ÇíÂÆüË°å"""
        start_time = datetime.now()
        violations = []
        metrics = {}
        
        try:
            self.logger.info(f"üìú Starting Git Chronicle audit for: {target_path}")
            
            # 1. „Éñ„É©„É≥„ÉÅÊà¶Áï•ÂàÜÊûê
            branch_result = self.branch_analyzer.analyze_branch_strategy()
            violations.extend(branch_result.get("naming_violations", []))
            violations.extend(branch_result.get("protected_violations", []))
            metrics["branch_score"] = branch_result.get("overall_branch_score", 0)
            
            # 2. „Ç≥„Éü„ÉÉ„ÉàÂìÅË≥™ÂàÜÊûê
            commit_result = self.commit_analyzer.analyze_commit_quality()
            violations.extend(commit_result.get("quality_violations", []))
            metrics["commit_score"] = commit_result.get("overall_commit_score", 0)
            
            # 3. Á∑èÂêàGit„Çπ„Ç≥„Ç¢Ë®àÁÆó
            overall_score = self._calculate_overall_git_score(metrics)
            metrics["overall_git_score"] = overall_score
            
            # 4. ÊîπÂñÑÊèêÊ°àÁîüÊàê
            recommendations = self._generate_git_improvement_recommendations(
                branch_result, commit_result, violations
            )
            
            execution_time = (datetime.now() - start_time).total_seconds()
            metrics["execution_time"] = execution_time
            
            self.logger.info(f"‚úÖ Git Chronicle audit completed in {execution_time:.2f}s")
            
            return AuditResult(
                auditor_name="GitChronicle",
                target_path=target_path,
                violations=violations,
                metrics=metrics,
                recommendations=recommendations,
                execution_time=execution_time
            )
            
        except Exception as e:
            self.logger.error(f"‚ùå Git Chronicle audit failed: {e}")
            return AuditResult(
                auditor_name="GitChronicle",
                target_path=target_path,
                violations=[{
                    "type": "AUDIT_EXECUTION_FAILURE",
                    "severity": ViolationSeverity.HIGH,
                    "description": f"Git Chronicle audit execution failed: {str(e)}",
                    "location": target_path
                }],
                metrics={"error": str(e)},
                recommendations=[],
                execution_time=(datetime.now() - start_time).total_seconds()
            )
            
    def _calculate_overall_git_score(self, metrics: Dict[str, Any]) -> float:
        """Á∑èÂêàGit„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó"""
        branch_score = metrics.get("branch_score", 0)
        commit_score = metrics.get("commit_score", 0)
        
        # „Éñ„É©„É≥„ÉÅÊà¶Áï• 50% + „Ç≥„Éü„ÉÉ„ÉàÂìÅË≥™ 50%
        overall_score = (branch_score * 0.5) + (commit_score * 0.5)
        return min(overall_score, 100.0)
        
    def _generate_git_improvement_recommendations(self,
                                                branch_result: Dict[str, Any],
                                                commit_result: Dict[str, Any],
                                                violations: List[Dict[str, Any]]) -> List[str]:
        """GitÊîπÂñÑÊèêÊ°à„ÇíÁîüÊàê"""
        recommendations = []
        
        # „Éñ„É©„É≥„ÉÅÊà¶Áï•ÊîπÂñÑÊèêÊ°à
        branch_score = branch_result.get("overall_branch_score", 0)
        if branch_score < 70:
            recommendations.append(
                "Improve branch naming conventions and use feature branches consistently"
            )
            
        # „Ç≥„Éü„ÉÉ„ÉàÂìÅË≥™ÊîπÂñÑÊèêÊ°à
        commit_score = commit_result.get("overall_commit_score", 0)
        if commit_score < 75:
            recommendations.append(
                "Follow conventional commit format and improve commit message quality"
            )
            
        # ÈÅïÂèçÂõ∫Êúâ„ÅÆÊîπÂñÑÊèêÊ°à
        violation_types = set(v.get("type") for v in violations)
        
        if GitViolationType.DIRECT_MAIN_COMMIT in violation_types:
            recommendations.append("Prohibit direct commits to main branch and use pull requests")
            
        if GitViolationType.BRANCH_NAMING_VIOLATION in violation_types:
            recommendations.append("Establish and enforce branch naming conventions")
            
        if GitViolationType.COMMIT_CONVENTION_VIOLATION in violation_types:
            recommendations.append("Adopt conventional commits format for better change tracking")
            
        return recommendations