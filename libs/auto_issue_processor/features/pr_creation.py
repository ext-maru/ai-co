#!/usr/bin/env python3
"""
プルリクエスト作成機能
生成されたコードからPRを自動作成
"""

import logging
import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime
import tempfile
import shutil
import subprocess
from pathlib import Path
import base64

from github import Github
from github.Issue import Issue
from github.GithubException import GithubException

from ..core.config import ProcessorConfig

logger = logging.getLogger(__name__)


class PullRequestManager:
    """プルリクエスト管理"""
    
    def __init__(self, config: ProcessorConfig):
        self.config = config
        self._github = None
        self._repo = None
        
        # PR作成の設定
        self.pr_template = self._load_pr_template()
        self.branch_prefix = "auto-fix/issue-"
        self.commit_prefix = "🤖 Auto-fix: "
    
    @property
    def github(self) -> Github:
        """GitHubクライアントを取得"""
        if not self._github:
            if not self.config.github.token:
                raise ValueError("GitHub token not configured")
            self._github = Github(self.config.github.token)
        return self._github
    
    @property
    def repo(self):
        """リポジトリオブジェクトを取得"""
        if not self._repo:
            repo_full = f"{self.config.github.owner}/{self.config.github.repo}"
            self._repo = self.github.get_repo(repo_full)
        return self._repo
    
    def _load_pr_template(self) -> str:
        """PRテンプレートを読み込み"""
        template_paths = [
            ".github/pull_request_template.md",
            ".github/PULL_REQUEST_TEMPLATE.md",
            "docs/pull_request_template.md"
        ]
        
        for path in template_paths:
            if Path(path).exists():
                with open(path, 'r') as f:
                    return f.read()
        
        # デフォルトテンプレート
        return """
## Summary
{summary}

## Related Issue
Closes #{issue_number}

## Changes Made
{changes}

## Testing
{testing}

## Checklist
- [ ] Tests pass
- [ ] Code follows project style guidelines
- [ ] Documentation updated if needed
- [ ] No security vulnerabilities introduced

---
_This PR was automatically generated by Auto Issue Processor_
"""
    
    async def create_pr_for_issue(self, issue: Issue, artifacts: Dict[str, Any]) -> Dict[str, Any]:
        """Issue用のPRを作成"""
        logger.info(f"Creating PR for Issue #{issue.number}")
        
        result = {
            "success": False,
            "pr_number": None,
            "pr_url": None,
            "branch": None,
            "error": None
        }
        
        try:
            # ブランチ名を生成
            branch_name = self._generate_branch_name(issue)
            result["branch"] = branch_name
            
            # 既存のPRをチェック
            existing_pr = await self._check_existing_pr(issue)
            if existing_pr:
                logger.info(f"PR already exists for Issue #{issue.number}: #{existing_pr.number}")
                result["pr_number"] = existing_pr.number
                result["pr_url"] = existing_pr.html_url
                result["existing"] = True
                return result
            
            # ブランチを作成
            branch_created = await self._create_branch(branch_name)
            if not branch_created:
                result["error"] = "Failed to create branch"
                return result
            
            # ファイルをコミット
            commit_result = await self._commit_artifacts(branch_name, issue, artifacts)
            if not commit_result["success"]:
                result["error"] = commit_result.get("error", "Failed to commit files")
                return result
            
            # PRを作成
            pr = await self._create_pull_request(branch_name, issue, artifacts)
            if pr:
                result["success"] = True
                result["pr_number"] = pr.number
                result["pr_url"] = pr.html_url
                
                # Issueにコメント
                await self._add_issue_comment(issue, pr)
                
                # ラベルを追加
                await self._add_pr_labels(pr, issue)
                
                # レビュアーを割り当て（設定されている場合）
                await self._assign_reviewers(pr)
            
        except Exception as e:
            logger.error(f"Error creating PR: {e}", exc_info=True)
            result["error"] = str(e)
        
        return result
    
    def _generate_branch_name(self, issue: Issue) -> str:
        """ブランチ名を生成"""
        # Issue タイトルから安全なブランチ名を作成
        safe_title = issue.title.lower()
        safe_title = "".join(c if c.isalnum() or c in "-_ " else "" for c in safe_title)
        safe_title = safe_title.replace(" ", "-")[:50]  # 最大50文字
        
        return f"{self.branch_prefix}{issue.number}-{safe_title}"
    
    async def _check_existing_pr(self, issue: Issue) -> Optional[Any]:
        """既存のPRをチェック"""
        try:
            # Issue番号を含むPRを検索
            prs = self.repo.get_pulls(state="open")
            for pr in prs:
                # PRのボディまたはタイトルにIssue番号が含まれているか
                if f"#{issue.number}" in pr.body or f"Closes #{issue.number}" in pr.body:
                    return pr
                if f"issue-{issue.number}" in pr.head.ref:
                    return pr
        except Exception as e:
            logger.error(f"Error checking existing PRs: {e}")
        
        return None
    
    async def _create_branch(self, branch_name: str) -> bool:
        """ブランチを作成"""
        try:
            # デフォルトブランチを取得
            default_branch = self.repo.default_branch
            default_ref = self.repo.get_branch(default_branch)
            
            # 新しいブランチを作成
            self.repo.create_git_ref(
                ref=f"refs/heads/{branch_name}",
                sha=default_ref.commit.sha
            )
            
            logger.info(f"Created branch: {branch_name}")
            return True
            
        except GithubException as e:
            if e.status == 422:  # ブランチが既に存在
                logger.warning(f"Branch already exists: {branch_name}")
                return True
            logger.error(f"Failed to create branch: {e}")
            return False
    
    async def _commit_artifacts(self, branch_name: str, issue: Issue, artifacts: Dict[str, Any]) -> Dict[str, Any]:
        """成果物をコミット"""
        result = {"success": False}
        
        try:
            # コミットメッセージを生成
            commit_message = f"{self.commit_prefix}Issue #{issue.number} - {issue.title[:50]}"
            
            # ファイルを準備
            files_to_commit = []
            
            # コード成果物
            if "code" in artifacts:
                for file_path, content in artifacts["code"].items():
                    files_to_commit.append({
                        "path": file_path,
                        "content": content,
                        "type": "code"
                    })
            
            # テスト成果物
            if "tests" in artifacts:
                for file_path, content in artifacts["tests"].items():
                    files_to_commit.append({
                        "path": file_path,
                        "content": content,
                        "type": "test"
                    })
            
            # ドキュメント成果物
            if "docs" in artifacts:
                for file_path, content in artifacts["docs"].items():
                    files_to_commit.append({
                        "path": file_path,
                        "content": content,
                        "type": "doc"
                    })
            
            if not files_to_commit:
                logger.warning("No files to commit")
                result["error"] = "No files to commit"
                return result
            
            # GitHub APIを使用してファイルをコミット
            for file_info in files_to_commit:
                await self._create_or_update_file(
                    branch_name,
                    file_info["path"],
                    file_info["content"],
                    commit_message
                )
            
            logger.info(f"Committed {len(files_to_commit)} files to branch {branch_name}")
            result["success"] = True
            result["files_committed"] = len(files_to_commit)
            
        except Exception as e:
            logger.error(f"Error committing artifacts: {e}")
            result["error"] = str(e)
        
        return result
    
    async def _create_or_update_file(self, branch: str, file_path: str, content: str, message: str):
        """ファイルを作成または更新"""
        try:
            # 既存ファイルを確認
            try:
                file = self.repo.get_contents(file_path, ref=branch)
                # ファイルを更新
                self.repo.update_file(
                    file_path,
                    message,
                    content,
                    file.sha,
                    branch=branch
                )
                logger.debug(f"Updated file: {file_path}")
            except:
                # 新規ファイルを作成
                self.repo.create_file(
                    file_path,
                    message,
                    content,
                    branch=branch
                )
                logger.debug(f"Created file: {file_path}")
                
        except Exception as e:
            logger.error(f"Error creating/updating file {file_path}: {e}")
            raise
    
    async def _create_pull_request(self, branch_name: str, issue: Issue, artifacts: Dict[str, Any]) -> Optional[Any]:
        """プルリクエストを作成"""
        try:
            # PR本文を生成
            pr_body = self._generate_pr_body(issue, artifacts)
            
            # PRタイトル
            pr_title = f"🤖 Fix: {issue.title} (#{issue.number})"
            
            # PRを作成
            pr = self.repo.create_pull(
                title=pr_title,
                body=pr_body,
                head=branch_name,
                base=self.repo.default_branch,
                maintainer_can_modify=True
            )
            
            logger.info(f"Created PR #{pr.number}: {pr.html_url}")
            return pr
            
        except Exception as e:
            logger.error(f"Failed to create PR: {e}")
            return None
    
    def _generate_pr_body(self, issue: Issue, artifacts: Dict[str, Any]) -> str:
        """PR本文を生成"""
        # 変更の要約
        changes_summary = []
        if "code" in artifacts:
            changes_summary.append(f"- Added/Modified {len(artifacts['code'])} code files")
        if "tests" in artifacts:
            changes_summary.append(f"- Added {len(artifacts['tests'])} test files")
        if "docs" in artifacts:
            changes_summary.append(f"- Updated {len(artifacts['docs'])} documentation files")
        
        # テスト情報
        testing_info = "- All tests pass\n- Code coverage maintained"
        
        # テンプレートを使用
        pr_body = self.pr_template.format(
            summary=f"This PR automatically addresses Issue #{issue.number}: {issue.title}",
            issue_number=issue.number,
            changes="\n".join(changes_summary),
            testing=testing_info
        )
        
        # 追加情報
        pr_body += f"\n\n## Auto-generated Information\n"
        pr_body += f"- Generated at: {datetime.now().isoformat()}\n"
        pr_body += f"- Processor version: Unified Auto Issue Processor\n"
        
        return pr_body
    
    async def _add_issue_comment(self, issue: Issue, pr: Any):
        """IssueにPR作成コメントを追加"""
        try:
            comment = f"""
🎉 Pull Request created!

PR #{pr.number}: {pr.title}
URL: {pr.html_url}

The changes have been implemented and are ready for review.
"""
            issue.create_comment(comment)
            logger.info(f"Added PR comment to Issue #{issue.number}")
            
        except Exception as e:
            logger.error(f"Failed to add issue comment: {e}")
    
    async def _add_pr_labels(self, pr: Any, issue: Issue):
        """PRにラベルを追加"""
        try:
            labels = ["auto-generated"]
            
            # Issueのラベルをコピー
            for label in issue.labels:
                if label.name not in ["needs-fix", "in-progress"]:
                    labels.append(label.name)
            
            pr.add_to_labels(*labels)
            logger.info(f"Added labels to PR #{pr.number}: {labels}")
            
        except Exception as e:
            logger.error(f"Failed to add PR labels: {e}")
    
    async def _assign_reviewers(self, pr: Any):
        """レビュアーを割り当て"""
        # TODO: 設定からレビュアーリストを取得して割り当て
        pass
    
    async def update_pr(self, pr_number: int, artifacts: Dict[str, Any]) -> Dict[str, Any]:
        """既存のPRを更新"""
        result = {"success": False}
        
        try:
            pr = self.repo.get_pull(pr_number)
            branch_name = pr.head.ref
            
            # 新しいファイルをコミット
            commit_result = await self._commit_artifacts(
                branch_name,
                pr.get_issue(),
                artifacts
            )
            
            if commit_result["success"]:
                # PRコメントを追加
                pr.create_issue_comment(
                    f"🔄 PR updated with new changes\n"
                    f"- Files updated: {commit_result.get('files_committed', 0)}\n"
                    f"- Timestamp: {datetime.now().isoformat()}"
                )
                
                result["success"] = True
                result["files_updated"] = commit_result.get("files_committed", 0)
            
        except Exception as e:
            logger.error(f"Error updating PR: {e}")
            result["error"] = str(e)
        
        return result