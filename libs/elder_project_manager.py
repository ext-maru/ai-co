#!/usr/bin/env python3
"""
ElderÈöéÂ±§„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
Elders Guild Elder Hierarchy Project Manager

üèõÔ∏è ElderÈöéÂ±§„Å´ÂØæÂøú„Åó„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÉªÊ¶ÇË¶ÅÁÆ°ÁêÜÊ©üËÉΩ
- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàËá™ÂãïÊ§úÁ¥¢„ÉªÁ¥¢ÂºïÂåñ
- ElderÊ®©ÈôêÂà•„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°
- Ê¶ÇË¶Å„Éª„Çπ„ÉÜ„Éº„Çø„Çπ„ÉªÈÄ≤ÊçóÁÆ°ÁêÜ
- Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Ê©üËÉΩ
"""

import asyncio
import json
import os
import sys
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÇíPython„Éë„Çπ„Å´ËøΩÂä†
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from core.elder_aware_base_worker import ElderTaskContext
from libs.unified_auth_provider import AuthSession, ElderRole, SageType, User


class ProjectStatus(Enum):
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çπ„ÉÜ„Éº„Çø„Çπ"""

    PLANNING = "planning"
    DEVELOPMENT = "development"
    TESTING = "testing"
    STAGING = "staging"
    PRODUCTION = "production"
    COMPLETED = "completed"
    ARCHIVED = "archived"
    CANCELLED = "cancelled"


class ProjectPriority(Enum):
    """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÑ™ÂÖàÂ∫¶"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"


@dataclass
class ProjectInfo:
    """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±"""

    id: str
    name: str
    path: str
    description: str
    status: ProjectStatus
    priority: ProjectPriority
    owner: str
    elder_role: ElderRole
    created_at: datetime
    updated_at: datetime
    file_count: int
    size_mb: float
    tags: List[str]
    dependencies: List[str]
    progress: float  # 0.0 - 1.0
    estimated_completion: Optional[datetime] = None
    actual_completion: Optional[datetime] = None

    def to_dict(self) -> Dict[str, Any]:
        """ËæûÊõ∏ÂΩ¢Âºè„Å´Â§âÊèõ"""
        data = asdict(self)
        # Enum„Å®Êó•ÊôÇ„ÇíÊñáÂ≠óÂàó„Å´Â§âÊèõ
        data["status"] = self.status.value
        data["priority"] = self.priority.value
        data["elder_role"] = self.elder_role.value
        data["created_at"] = self.created_at.isoformat()
        data["updated_at"] = self.updated_at.isoformat()
        if self.estimated_completion:
            data["estimated_completion"] = self.estimated_completion.isoformat()
        if self.actual_completion:
            data["actual_completion"] = self.actual_completion.isoformat()
        return data


class ElderProjectManager:
    """ElderÈöéÂ±§„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, auth_provider=None):
        self.auth_provider = auth_provider
        self.projects_root = Path("/home/aicompany/ai_co/projects")
        self.project_index_file = Path("/home/aicompany/ai_co/data/project_index.json")
        self.project_metadata_dir = Path("/home/aicompany/ai_co/data/project_metadata")

        # „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê
        self.projects_root.mkdir(exist_ok=True)
        self.project_index_file.parent.mkdir(exist_ok=True)
        self.project_metadata_dir.mkdir(exist_ok=True)

        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ¥¢Âºï
        self.project_index: Dict[str, ProjectInfo] = {}
        self.load_project_index()

    def load_project_index(self):
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ¥¢Âºï„Çí„É≠„Éº„Éâ"""
        if self.project_index_file.exists():
            try:
                with open(self.project_index_file, "r", encoding="utf-8") as f:
                    data = json.load(f)

                for project_id, project_data in data.items():
                    # ÊñáÂ≠óÂàó„ÇíEnum„Å®Êó•ÊôÇ„Å´Â§âÊèõ
                    project_data["status"] = ProjectStatus(project_data["status"])
                    project_data["priority"] = ProjectPriority(project_data["priority"])
                    project_data["elder_role"] = ElderRole(project_data["elder_role"])
                    project_data["created_at"] = datetime.fromisoformat(
                        project_data["created_at"]
                    )
                    project_data["updated_at"] = datetime.fromisoformat(
                        project_data["updated_at"]
                    )

                    if project_data.get("estimated_completion"):
                        project_data["estimated_completion"] = datetime.fromisoformat(
                            project_data["estimated_completion"]
                        )
                    if project_data.get("actual_completion"):
                        project_data["actual_completion"] = datetime.fromisoformat(
                            project_data["actual_completion"]
                        )

                    self.project_index[project_id] = ProjectInfo(**project_data)
            except Exception as e:
                print(f"„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ¥¢Âºï„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")

    def save_project_index(self):
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ¥¢Âºï„Çí‰øùÂ≠ò"""
        try:
            data = {
                project_id: project_info.to_dict()
                for project_id, project_info in self.project_index.items()
            }

            with open(self.project_index_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ¥¢Âºï„ÅÆ‰øùÂ≠ò„Ç®„É©„Éº: {e}")

    def scan_projects(self) -> List[ProjectInfo]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶Êõ¥Êñ∞"""
        scanned_projects = []

        for project_dir in self.projects_root.iterdir():
            if project_dir.is_dir() and not project_dir.name.startswith("."):
                project_info = self._analyze_project_directory(project_dir)
                if project_info:
                    scanned_projects.append(project_info)
                    self.project_index[project_info.id] = project_info

        # ÂâäÈô§„Åï„Çå„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÁ¥¢Âºï„Åã„ÇâÈô§Âéª
        existing_ids = {p.id for p in scanned_projects}
        to_remove = [
            pid for pid in self.project_index.keys() if pid not in existing_ids
        ]
        for pid in to_remove:
            del self.project_index[pid]

        self.save_project_index()
        return scanned_projects

    def _analyze_project_directory(self, project_dir: Path) -> Optional[ProjectInfo]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂàÜÊûê"""
        try:
            project_id = project_dir.name

            # README.md„Åã„ÇâÊÉÖÂ†±„ÇíÂèñÂæó
            readme_path = project_dir / "README.md"
            description = "No description available"
            if readme_path.exists():
                with open(readme_path, "r", encoding="utf-8") as f:
                    content = f.read()
                    # ÊúÄÂàù„ÅÆÊÆµËêΩ„ÇíË™¨Êòé„Å®„Åó„Å¶‰ΩøÁî®
                    lines = content.split("\n")
                    for line in lines:
                        if line.strip() and not line.startswith("#"):
                            description = line.strip()
                            break

            # „Éï„Ç°„Ç§„É´Êï∞„Å®„Çµ„Ç§„Ç∫„ÇíË®àÁÆó
            file_count = sum(1 for _ in project_dir.rglob("*") if _.is_file())
            size_bytes = sum(
                f.stat().st_size for f in project_dir.rglob("*") if f.is_file()
            )
            size_mb = size_bytes / (1024 * 1024)

            # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É°„Çø„Éá„Éº„Çø„ÇíÂèñÂæó
            metadata_file = self.project_metadata_dir / f"{project_id}.json"
            metadata = self._load_project_metadata(metadata_file)

            # Áµ±Ë®àÊÉÖÂ†±
            stats = project_dir.stat()
            created_at = datetime.fromtimestamp(stats.st_ctime)
            updated_at = datetime.fromtimestamp(stats.st_mtime)

            return ProjectInfo(
                id=project_id,
                name=metadata.get("name", project_id),
                path=str(project_dir),
                description=description,
                status=ProjectStatus(metadata.get("status", "development")),
                priority=ProjectPriority(metadata.get("priority", "medium")),
                owner=metadata.get("owner", "unknown"),
                elder_role=ElderRole(metadata.get("elder_role", "servant")),
                created_at=created_at,
                updated_at=updated_at,
                file_count=file_count,
                size_mb=round(size_mb, 2),
                tags=metadata.get("tags", []),
                dependencies=metadata.get("dependencies", []),
                progress=metadata.get("progress", 0.0),
                estimated_completion=metadata.get("estimated_completion"),
                actual_completion=metadata.get("actual_completion"),
            )

        except Exception as e:
            print(f"„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂàÜÊûê„Ç®„É©„Éº ({project_dir}): {e}")
            return None

    def _load_project_metadata(self, metadata_file: Path) -> Dict[str, Any]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É°„Çø„Éá„Éº„Çø„Çí„É≠„Éº„Éâ"""
        if metadata_file.exists():
            try:
                with open(metadata_file, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception:
                pass
        return {}

    def register_project(self, project_info: ProjectInfo):
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÁôªÈå≤"""
        self.project_index[project_info.id] = project_info

        # „É°„Çø„Éá„Éº„Çø„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
        metadata_file = self.project_metadata_dir / f"{project_info.id}.json"
        metadata = {
            "name": project_info.name,
            "status": project_info.status.value,
            "priority": project_info.priority.value,
            "owner": project_info.owner,
            "elder_role": project_info.elder_role.value,
            "tags": project_info.tags,
            "dependencies": project_info.dependencies,
            "progress": project_info.progress,
            "estimated_completion": (
                project_info.estimated_completion.isoformat()
                if project_info.estimated_completion
                else None
            ),
            "actual_completion": (
                project_info.actual_completion.isoformat()
                if project_info.actual_completion
                else None
            ),
        }

        with open(metadata_file, "w", encoding="utf-8") as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)

        self.save_project_index()

    def get_project_list(
        self, user: User, filters: Dict[str, Any] = None
    ) -> List[ProjectInfo]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæóÔºàElderÊ®©Èôê„Éï„Ç£„É´„Çø‰ªò„ÅçÔºâ"""
        projects = list(self.project_index.values())

        # ElderÊ®©Èôê„Å´„Çà„ÇãË°®Á§∫Âà∂Èôê
        if user.elder_role == ElderRole.SERVANT:
            # Servant„ÅØËá™ÂàÜ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„Åø
            projects = [p for p in projects if p.owner == user.username]
        elif user.elder_role == ElderRole.SAGE:
            # Sage„ÅØËá™ÂàÜ„ÅÆÂ∞ÇÈñÄÂàÜÈáé + Ëá™ÂàÜ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà
            projects = [
                p
                for p in projects
                if p.owner == user.username
                or p.elder_role in [ElderRole.SERVANT, ElderRole.SAGE]
            ]
        # Claude Elder, Grand Elder„ÅØÂÖ®„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË°®Á§∫ÂèØËÉΩ

        # „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
        if filters:
            if "status" in filters:
                projects = [p for p in projects if p.status.value == filters["status"]]
            if "priority" in filters:
                projects = [
                    p for p in projects if p.priority.value == filters["priority"]
                ]
            if "owner" in filters:
                projects = [p for p in projects if p.owner == filters["owner"]]
            if "tag" in filters:
                projects = [p for p in projects if filters["tag"] in p.tags]
            if "search" in filters:
                search_term = filters["search"].lower()
                projects = [
                    p
                    for p in projects
                    if search_term in p.name.lower()
                    or search_term in p.description.lower()
                ]

        # „ÇΩ„Éº„ÉàÔºàÊõ¥Êñ∞Êó•ÊôÇ„ÅßÈôçÈ†ÜÔºâ
        projects.sort(key=lambda p: p.updated_at, reverse=True)

        return projects

    def get_project_details(self, project_id: str, user: User) -> Optional[ProjectInfo]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË©≥Á¥∞„ÇíÂèñÂæó"""
        if project_id not in self.project_index:
            return None

        project = self.project_index[project_id]

        # Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        if user.elder_role == ElderRole.SERVANT and project.owner != user.username:
            return None
        elif user.elder_role == ElderRole.SAGE:
            if project.owner != user.username and project.elder_role not in [
                ElderRole.SERVANT,
                ElderRole.SAGE,
            ]:
                return None

        return project

    def update_project_status(
        self, project_id: str, status: ProjectStatus, user: User
    ) -> bool:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÊõ¥Êñ∞"""
        if project_id not in self.project_index:
            return False

        project = self.project_index[project_id]

        # Ê®©Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        if user.elder_role == ElderRole.SERVANT and project.owner != user.username:
            return False

        project.status = status
        project.updated_at = datetime.now()

        if status == ProjectStatus.COMPLETED:
            project.actual_completion = datetime.now()
            project.progress = 1.0

        self.register_project(project)
        return True

    def search_projects(self, query: str, user: User) -> List[ProjectInfo]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ§úÁ¥¢"""
        return self.get_project_list(user, {"search": query})

    def get_project_statistics(self, user: User) -> Dict[str, Any]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁµ±Ë®àÊÉÖÂ†±„ÇíÂèñÂæó"""
        projects = self.get_project_list(user)

        total_count = len(projects)
        status_counts = {}
        priority_counts = {}
        elder_role_counts = {}

        total_size = 0
        completed_count = 0

        for project in projects:
            # „Çπ„ÉÜ„Éº„Çø„ÇπÂà•„Ç´„Ç¶„É≥„Éà
            status_counts[project.status.value] = (
                status_counts.get(project.status.value, 0) + 1
            )

            # ÂÑ™ÂÖàÂ∫¶Âà•„Ç´„Ç¶„É≥„Éà
            priority_counts[project.priority.value] = (
                priority_counts.get(project.priority.value, 0) + 1
            )

            # ElderÊ®©ÈôêÂà•„Ç´„Ç¶„É≥„Éà
            elder_role_counts[project.elder_role.value] = (
                elder_role_counts.get(project.elder_role.value, 0) + 1
            )

            # ÂêàË®à„Çµ„Ç§„Ç∫
            total_size += project.size_mb

            # ÂÆå‰∫Ü„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊï∞
            if project.status == ProjectStatus.COMPLETED:
                completed_count += 1

        completion_rate = (
            (completed_count / total_count * 100) if total_count > 0 else 0
        )

        return {
            "total_projects": total_count,
            "completed_projects": completed_count,
            "completion_rate": round(completion_rate, 1),
            "total_size_mb": round(total_size, 2),
            "status_distribution": status_counts,
            "priority_distribution": priority_counts,
            "elder_role_distribution": elder_role_counts,
            "user_role": user.elder_role.value,
        }


# CLI „Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
class ElderProjectCLI:
    """ElderÈöéÂ±§„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜCLI"""

    def __init__(self, auth_provider=None):
        self.manager = ElderProjectManager(auth_provider)
        self.auth_provider = auth_provider

    def format_project_list(
        self, projects: List[ProjectInfo], show_details: bool = False
    ) -> str:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        if not projects:
            return "üì≠ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"

        output = []
        output.append(f"üìã „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß ({len(projects)}‰ª∂)")
        output.append("=" * 60)

        for project in projects:
            # „Çπ„ÉÜ„Éº„Çø„ÇπÁµµÊñáÂ≠ó
            status_emoji = {
                "planning": "üìã",
                "development": "‚ö°",
                "testing": "üß™",
                "staging": "üöÄ",
                "production": "üåü",
                "completed": "‚úÖ",
                "archived": "üì¶",
                "cancelled": "‚ùå",
            }

            # ÂÑ™ÂÖàÂ∫¶ÁµµÊñáÂ≠ó
            priority_emoji = {
                "critical": "üö®",
                "high": "‚ö†Ô∏è",
                "medium": "üìä",
                "low": "üìã",
            }

            # ElderÊ®©ÈôêÁµµÊñáÂ≠ó
            elder_emoji = {
                "grand_elder": "üåü",
                "claude_elder": "ü§ñ",
                "sage": "üßô‚Äç‚ôÇÔ∏è",
                "servant": "üßù‚Äç‚ôÇÔ∏è",
            }

            status_icon = status_emoji.get(project.status.value, "‚ùì")
            priority_icon = priority_emoji.get(project.priority.value, "‚ùì")
            elder_icon = elder_emoji.get(project.elder_role.value, "‚ùì")

            # Âü∫Êú¨ÊÉÖÂ†±
            output.append(f"{status_icon} **{project.name}** ({project.id})")
            output.append(
                f"   {priority_icon} {project.priority.value.upper()} | {elder_icon} {project.elder_role.value}"
            )
            output.append(f"   üìù {project.description}")
            output.append(
                f"   üë§ {project.owner} | üìÖ {project.updated_at.strftime('%Y-%m-%d %H:%M')}"
            )

            if show_details:
                output.append(
                    f"   üìÅ {project.file_count} files | üíæ {project.size_mb} MB"
                )
                output.append(f"   üìä ÈÄ≤Êçó: {project.progress*100:.1f}%")
                if project.tags:
                    output.append(f"   üè∑Ô∏è {', '.join(project.tags)}")
                output.append(f"   üìÇ {project.path}")

            output.append("")

        return "\n".join(output)

    def format_project_details(self, project: ProjectInfo) -> str:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË©≥Á¥∞„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        output = []
        output.append(f"üèõÔ∏è „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË©≥Á¥∞: {project.name}")
        output.append("=" * 60)

        # Âü∫Êú¨ÊÉÖÂ†±
        output.append(f"üìã **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID**: {project.id}")
        output.append(f"üìù **Ë™¨Êòé**: {project.description}")
        output.append(f"üìä **„Çπ„ÉÜ„Éº„Çø„Çπ**: {project.status.value}")
        output.append(f"‚ö° **ÂÑ™ÂÖàÂ∫¶**: {project.priority.value}")
        output.append(f"üë§ **ÊâÄÊúâËÄÖ**: {project.owner}")
        output.append(f"üèõÔ∏è **ElderÊ®©Èôê**: {project.elder_role.value}")
        output.append("")

        # Êó•ÊôÇÊÉÖÂ†±
        output.append("üìÖ **Êó•ÊôÇÊÉÖÂ†±**")
        output.append(f"   ‰ΩúÊàêÊó•: {project.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        output.append(f"   Êõ¥Êñ∞Êó•: {project.updated_at.strftime('%Y-%m-%d %H:%M:%S')}")
        if project.estimated_completion:
            output.append(
                f"   ‰∫àÂÆöÂÆå‰∫Ü: {project.estimated_completion.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        if project.actual_completion:
            output.append(
                f"   ÂÆüÈöõÂÆå‰∫Ü: {project.actual_completion.strftime('%Y-%m-%d %H:%M:%S')}"
            )
        output.append("")

        # „Éï„Ç°„Ç§„É´ÊÉÖÂ†±
        output.append("üìÅ **„Éï„Ç°„Ç§„É´ÊÉÖÂ†±**")
        output.append(f"   „Éï„Ç°„Ç§„É´Êï∞: {project.file_count}")
        output.append(f"   „Çµ„Ç§„Ç∫: {project.size_mb} MB")
        output.append(f"   „Éë„Çπ: {project.path}")
        output.append("")

        # ÈÄ≤ÊçóÊÉÖÂ†±
        output.append("üìä **ÈÄ≤ÊçóÊÉÖÂ†±**")
        progress_bar = "‚ñà" * int(project.progress * 20) + "‚ñë" * (
            20 - int(project.progress * 20)
        )
        output.append(f"   ÈÄ≤Êçó: [{progress_bar}] {project.progress*100:.1f}%")
        output.append("")

        # „Çø„Ç∞„Å®‰æùÂ≠òÈñ¢‰øÇ
        if project.tags:
            output.append(f"üè∑Ô∏è **„Çø„Ç∞**: {', '.join(project.tags)}")
        if project.dependencies:
            output.append(f"üîó **‰æùÂ≠òÈñ¢‰øÇ**: {', '.join(project.dependencies)}")

        return "\n".join(output)

    def format_statistics(self, stats: Dict[str, Any]) -> str:
        """Áµ±Ë®àÊÉÖÂ†±„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        output = []
        output.append("üìä „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁµ±Ë®àÊÉÖÂ†±")
        output.append("=" * 60)

        # Âü∫Êú¨Áµ±Ë®à
        output.append(f"üìã **Á∑è„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊï∞**: {stats['total_projects']}")
        output.append(f"‚úÖ **ÂÆå‰∫Ü„Éó„É≠„Ç∏„Çß„ÇØ„Éà**: {stats['completed_projects']}")
        output.append(f"üìà **ÂÆå‰∫ÜÁéá**: {stats['completion_rate']}%")
        output.append(f"üíæ **Á∑è„Çµ„Ç§„Ç∫**: {stats['total_size_mb']} MB")
        output.append(f"üèõÔ∏è **„ÅÇ„Å™„Åü„ÅÆÊ®©Èôê**: {stats['user_role']}")
        output.append("")

        # „Çπ„ÉÜ„Éº„Çø„ÇπÂàÜÂ∏É
        output.append("üìä **„Çπ„ÉÜ„Éº„Çø„ÇπÂàÜÂ∏É**")
        for status, count in stats["status_distribution"].items():
            output.append(f"   {status}: {count}‰ª∂")
        output.append("")

        # ÂÑ™ÂÖàÂ∫¶ÂàÜÂ∏É
        output.append("‚ö° **ÂÑ™ÂÖàÂ∫¶ÂàÜÂ∏É**")
        for priority, count in stats["priority_distribution"].items():
            output.append(f"   {priority}: {count}‰ª∂")
        output.append("")

        # ElderÊ®©ÈôêÂàÜÂ∏É
        output.append("üèõÔ∏è **ElderÊ®©ÈôêÂàÜÂ∏É**")
        for role, count in stats["elder_role_distribution"].items():
            output.append(f"   {role}: {count}‰ª∂")

        return "\n".join(output)


# CLI ÂÆüË°åÈñ¢Êï∞
def run_elder_project_cli():
    """ElderÈöéÂ±§„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜCLIÂÆüË°å"""
    from libs.unified_auth_provider import create_demo_auth_system

    # Ë™çË®º„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
    auth_system = create_demo_auth_system()
    cli = ElderProjectCLI(auth_system)

    # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çπ„Ç≠„É£„É≥
    projects = cli.manager.scan_projects()

    print("üèõÔ∏è ElderÈöéÂ±§„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†")
    print("=" * 60)
    print(f"üìã „Çπ„Ç≠„É£„É≥ÂÆå‰∫Ü: {len(projects)}ÂÄã„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÁô∫Ë¶ã")
    print("")

    # Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ
    print("üìã Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ:")
    print("elder-project-list          - „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ßË°®Á§∫")
    print("elder-project-list --detail - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË©≥Á¥∞‰∏ÄË¶ß")
    print("elder-project-show <id>     - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË©≥Á¥∞Ë°®Á§∫")
    print("elder-project-search <query> - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ§úÁ¥¢")
    print("elder-project-stats         - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁµ±Ë®à")
    print("elder-project-scan          - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÜç„Çπ„Ç≠„É£„É≥")

    return cli


if __name__ == "__main__":
    cli = run_elder_project_cli()
