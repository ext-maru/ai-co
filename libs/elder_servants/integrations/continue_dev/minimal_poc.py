#!/usr/bin/env python3
"""
Minimal Continue.dev Integration POC
Simplified test without complex dependencies
"""

import asyncio
import logging
import os
import sys
from typing import Any, Dict, Optional

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# Add project root to path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../../..")))

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI app
app = FastAPI(
    title="Elder Servants Continue.dev Minimal POC",
    description="Minimal HTTP API for Continue.dev integration testing",
    version="1.0.0",
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Request models
class TaskRequest(BaseModel):
    type: str
    task: Dict[str, Any]


class SageConsultRequest(BaseModel):
    question: str
    context: Optional[Dict[str, Any]] = {}


class QualityCheckRequest(BaseModel):
    file_path: str
    content: str


class KnowledgeSearchRequest(BaseModel):
    query: str
    limit: Optional[int] = 10


# Mock data for POC
MOCK_SERVANTS = [
    {
        "id": "D01",
        "name": "Code Craftsman",
        "category": "DWARF_WORKSHOP",
        "specialization": "Code Generation & Refactoring",
        "status": "healthy",
        "capabilities": ["code_generation", "refactoring", "optimization"],
        "stats": {"tasks_completed": 156, "success_rate": 0.98},
    },
    {
        "id": "E02",
        "name": "Test Guardian",
        "category": "ELF_FOREST",
        "specialization": "Test Creation & Validation",
        "status": "healthy",
        "capabilities": ["test_creation", "test_validation", "coverage_analysis"],
        "stats": {"tasks_completed": 89, "success_rate": 0.97},
    },
    {
        "id": "E01",
        "name": "Quality Inspector",
        "category": "ELF_FOREST",
        "specialization": "Code Quality & Standards",
        "status": "healthy",
        "capabilities": ["quality_check", "iron_will_validation", "code_review"],
        "stats": {"tasks_completed": 203, "success_rate": 0.99},
    },
]


@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "service": "Elder Servants Continue.dev Minimal POC",
        "servants_count": len(MOCK_SERVANTS),
        "timestamp": "2025-01-19T21:00:00Z",
    }


@app.post("/elder/servants/{servant_id}/execute")
async def execute_servant_task(servant_id: str, request: TaskRequest):
    """Execute a task with a specific Elder Servant"""
    try:
        # Map Continue.dev servant IDs
        servant_mapping = {
            "code-craftsman": "D01",
            "test-guardian": "E02",
            "quality-inspector": "E01",
        }

        actual_servant_id = servant_mapping.get(servant_id, servant_id)
        servant = next((s for s in MOCK_SERVANTS if s["id"] == actual_servant_id), None)

        if not servant:
            raise HTTPException(
                status_code=404, detail=f"Servant {servant_id} not found"
            )

        # Mock task execution
        task_type = request.task.get("type", "general")

        if task_type == "code_generation":
            result = {
                "generated_code": f"# Generated by {servant['name']}\ndef example_function():\n    return 'Hello from Elder Servants!'\n",
                "explanation": f"Code generated by {servant['name']} with quality standards enforced.",
                "quality_score": 97,
            }
        elif task_type == "test_creation":
            result = {
                "test_code": f"import unittest\n\nclass TestExample(unittest.TestCase):\n    def test_function(self):\n        # Test generated by {servant['name']}\n        self.assertTrue(True)\n",
                "coverage_estimate": 95,
                "test_count": 3,
            }
        else:
            result = {
                "message": f"Task executed by {servant['name']}",
                "status": "completed",
                "execution_time": "1.2s",
            }

        return {
            "success": True,
            "servant_id": servant_id,
            "result": {"result_data": result, "servant_info": servant},
        }

    except Exception as e:
        logger.error(f"Error executing servant task: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/elder/sages/consult")
async def consult_sages(request: SageConsultRequest):
    """Consult with the 4 Sages"""
    try:
        # Mock sage consultation
        advice_responses = {
            "knowledge": "Based on Elder Guild knowledge base, consider implementing TDD with 95% coverage minimum.",
            "task": "Current priority: Focus on code quality and automated testing. Timeline: 2-3 days.",
            "incident": "No critical issues detected. Recommend defensive programming patterns.",
            "rag": "Found 15 relevant documents. Key patterns: Clean Architecture, SOLID principles.",
        }

        combined_advice = "\n\n".join(
            [
                f"📚 Knowledge Sage: {advice_responses['knowledge']}",
                f"📋 Task Sage: {advice_responses['task']}",
                f"🚨 Incident Sage: {advice_responses['incident']}",
                f"🔍 RAG Sage: {advice_responses['rag']}",
            ]
        )

        return {
            "success": True,
            "advice": combined_advice,
            "integrated_recommendation": "Implement with TDD approach, maintain Iron Will standards (95%+), and use proven architectural patterns.",
        }

    except Exception as e:
        logger.error(f"Error consulting sages: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/elder/quality/iron-will")
async def check_iron_will_quality(request: QualityCheckRequest):
    """Check code quality against Iron Will standards"""
    try:
        # Mock quality analysis
        code_lines = len(request.content.split("\n"))
        complexity_score = min(95, max(60, 100 - code_lines * 2))  # Simple heuristic

        has_docstring = '"""' in request.content or "'''" in request.content
        has_tests = "test_" in request.content or "def test" in request.content

        score = complexity_score
        if has_docstring:
            score += 5
        if has_tests:
            score += 10

        score = min(100, score)

        details = [
            f"Code Complexity: {complexity_score}%",
            f"Documentation: {'Present' if has_docstring else 'Missing'}",
            f"Test Coverage: {'Detected' if has_tests else 'Not Found'}",
            f"Lines of Code: {code_lines}",
        ]

        return {
            "success": True,
            "score": score,
            "passes_iron_will": score >= 95,
            "details": "\n".join(details),
            "full_report": {
                "overall_score": score,
                "code_quality": {
                    "grade": "A" if score >= 95 else "B" if score >= 80 else "C"
                },
                "security_issues": [],
                "test_coverage": 85 if has_tests else 0,
            },
        }

    except Exception as e:
        logger.error(f"Error checking Iron Will quality: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/elder/knowledge/search")
async def search_knowledge_base(request: KnowledgeSearchRequest):
    """Search Elder Knowledge Base"""
    try:
        # Mock knowledge search
        mock_items = [
            {
                "title": "TDD Best Practices Guide",
                "summary": "Comprehensive guide for Test-Driven Development in Elder Guild systems.",
                "content": "# TDD Best Practices\n\n1. Red-Green-Refactor cycle\n2. Test first, code second\n3. Minimum viable implementation\n4. Continuous refactoring",
                "relevance": 0.95,
            },
            {
                "title": "Iron Will Quality Standards",
                "summary": "Elder Guild quality enforcement protocols and standards.",
                "content": "# Iron Will Standards\n\n- 95% minimum quality score\n- 100% test coverage for critical paths\n- Security-first development",
                "relevance": 0.88,
            },
            {
                "title": "Code Craftsman Techniques",
                "summary": "Advanced coding techniques from the Dwarf Workshop.",
                "content": "# Craftsman Techniques\n\n- SOLID principles\n- Clean Architecture\n- Domain-Driven Design",
                "relevance": 0.76,
            },
        ]

        # Filter by relevance (mock search)
        filtered_items = [
            item
            for item in mock_items
            if request.query.lower() in item["title"].lower()
            or request.query.lower() in item["content"].lower()
        ]
        limited_items = filtered_items[: request.limit]

        return {"success": True, "items": limited_items, "total": len(limited_items)}

    except Exception as e:
        logger.error(f"Error searching knowledge base: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/elder/tasks/active")
async def get_active_tasks():
    """Get active Elder tasks"""
    try:
        # Mock active tasks
        mock_tasks = [
            {
                "id": "task_001",
                "name": "Continue.dev Integration POC",
                "priority": "high",
                "status": "in_progress",
                "description": "Implementing Continue.dev integration with Elder Servants",
                "assigned_servant": "D01",
            },
            {
                "id": "task_002",
                "name": "Iron Will Quality Enhancement",
                "priority": "medium",
                "status": "pending",
                "description": "Enhance quality checking algorithms",
                "assigned_servant": "E01",
            },
        ]

        return mock_tasks

    except Exception as e:
        logger.error(f"Error getting active tasks: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/elder/servants/list")
async def list_servants():
    """List all available Elder Servants"""
    return {"success": True, "servants": MOCK_SERVANTS, "total": len(MOCK_SERVANTS)}


if __name__ == "__main__":
    import uvicorn

    print("🚀 Starting Elder Servants Continue.dev Minimal POC")
    print("📍 Server will be available at: http://localhost:8000")
    print("📖 API docs: http://localhost:8000/docs")
    uvicorn.run(app, host="0.0.0.0", port=8000)
