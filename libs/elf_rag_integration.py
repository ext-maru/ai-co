"""
エルフの森とRAGウィザーズの統合
テストパターンの学習と適用
"""

import json
from pathlib import Path
from typing import Dict, List, Optional

from libs.enhanced_rag_manager import EnhancedRAGManager


class ElfRAGIntegration:
    """エルフとRAGウィザーズの連携クラス"""

    def __init__(self):
        self.rag_manager = EnhancedRAGManager()
        self.test_patterns_db = Path("knowledge_base/test_patterns.json")
        self.success_patterns = []
        self.failure_patterns = []

    def learn_from_test_results(self, test_results: Dict):
        """テスト結果からパターンを学習"""
        pattern = {
            "test_file": test_results["file"],
            "success": test_results["success"],
            "error_type": test_results.get("error_type"),
            "fix_applied": test_results.get("fix_applied"),
            "timestamp": test_results["timestamp"],
        }

        if test_results["success"]:
            self.success_patterns.append(pattern)
        else:
            self.failure_patterns.append(pattern)

        # RAGデータベースに保存
        self.rag_manager.add_knowledge(
            f"test_pattern_{test_results['file']}",
            json.dumps(pattern),
            metadata={"type": "test_pattern", "success": test_results["success"]},
        )

    def find_similar_fixes(self, error_message: str) -> List[Dict]:
        """類似のエラーに対する修正方法を検索"""
        # RAGを使用して類似のエラーパターンを検索
        similar_patterns = self.rag_manager.search(
            f"test error fix: {error_message}",
            filter_metadata={"type": "test_pattern", "success": True},
        )

        fixes = []
        for pattern in similar_patterns:
            if pattern.get("fix_applied"):
                fixes.append(
                    {
                        "error": pattern["error_type"],
                        "fix": pattern["fix_applied"],
                        "confidence": pattern.get("similarity", 0.5),
                    }
                )

        return sorted(fixes, key=lambda x: x["confidence"], reverse=True)

    def suggest_test_improvements(self, test_file: str) -> List[str]:
        """テストファイルの改善提案"""
        # 成功パターンから学習
        successful_tests = self.rag_manager.search(
            f"successful test patterns similar to {test_file}",
            filter_metadata={"type": "test_pattern", "success": True},
        )

        suggestions = []
        for pattern in successful_tests[:5]:
            if pattern.get("best_practices"):
                suggestions.extend(pattern["best_practices"])

        return list(set(suggestions))  # 重複を除去

    def generate_test_template(self, module_name: str) -> str:
        """モジュール用のテストテンプレート生成"""
        # 類似モジュールの成功したテストを検索
        similar_tests = self.rag_manager.search(
            f"test template for {module_name} module",
            filter_metadata={"type": "test_pattern", "success": True},
        )

        if similar_tests:
            # 最も成功率の高いパターンを基にテンプレートを生成
            best_pattern = similar_tests[0]
            template = f'''"""
{module_name} Test Suite
Generated by Elf Forest based on successful patterns
"""

import pytest
from unittest.mock import patch, MagicMock
from tests.test_base_utils import ManagerTestCase

# テスト対象のインポート
from {best_pattern.get('import_path', f'libs.{module_name}')} import {module_name.title()}


class Test{module_name.title()}(ManagerTestCase):
    """
    {module_name}のテストクラス
    成功パターンID: {best_pattern.get('pattern_id', 'unknown')}
    """

    def setup_method(self):
        """各テストの前処理"""
        # TODO: セットアップコードを追加
        pass

    def test_initialization(self):
        """初期化テスト"""
        # TODO: 初期化テストを実装
        assert True

    def test_main_functionality(self):
        """主要機能のテスト"""
        # TODO: 主要機能のテストを実装
        assert True
'''
            return template
        else:
            # デフォルトテンプレート
            return self._get_default_template(module_name)

    def _get_default_template(self, module_name: str) -> str:
        """デフォルトのテストテンプレート"""
        return f'''"""
{module_name} Test Suite
Default template by Elf Forest
"""

import pytest
from tests.test_base_utils import BaseTestCase


class Test{module_name.title()}(BaseTestCase):
    """
    {module_name}のテストクラス
    """

    def test_placeholder(self):
        """プレースホルダーテスト"""
        # TODO: 実際のテストを実装
        assert True
'''
