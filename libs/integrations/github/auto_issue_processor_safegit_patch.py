#!/usr/bin/env python3
"""
SafeGitOperations統合パッチ for Auto Issue Processor
Issue #188対応: PR作成機能の修正
"""

async def _create_pull_request_with_safegit(
    self, issue_number, issue_title, issue_body, task_name
):
    """自動でPR作成（SafeGitOperations使用）"""
    try:
        # SafeGitOperationsインスタンスを作成
        git_ops = SafeGitOperations()
        
        # ブランチ名を生成（タイムスタンプオプション）
        timestamp = datetime.now().strftime("%H%M%S")
        use_timestamp = os.getenv("AUTO_ISSUE_USE_TIMESTAMP", "false").lower() == "true"
        
        if use_timestamp:
            branch_name = f"auto-fix/issue-{issue_number}-{timestamp}"
        else:
            branch_name = f"auto-fix-issue-{issue_number}"

        # 現在のブランチを保存
        current_branch = git_ops.get_current_branch()
        
        # 未コミットの変更を一時保存
        stash_result = git_ops.stash_changes()
        if not stash_result["success"]:
            self.logger.warning(f"Failed to stash changes: {stash_result.get('error', 'Unknown error')}")
        
        try:
            # PR用ブランチを作成（既存ブランチは自動削除される）
            branch_result = git_ops.create_pr_branch_workflow(
                branch_name=branch_name,
                commit_message=f"fix: Auto-fix for issue #{issue_number} - {issue_title[:50]}",
                files_to_add=[]
            )
            
            if not branch_result["success"]:
                self.logger.error(f"Failed to create branch: {branch_result.get('error', 'Unknown error')}")
                return {
                    "success": False,
                    "error": f"ブランチ作成エラー: {branch_result.get('error', 'Unknown error')}"
                }
            
            # テンプレートシステムを使用してコードを生成
            files_created = []
            
            # コンテキストを作成
            context = self.template_manager.create_context_from_issue(
                issue_number=issue_number,
                issue_title=issue_title,
                issue_body=issue_body
            )
            
            # 技術スタックを検出
            tech_stack = context['tech_stack']
            self.logger.info(f"Detected tech stack for issue #{issue_number}: {tech_stack}")
            
            # 実装ファイルを生成
            os.makedirs("auto_implementations", exist_ok=True)
            impl_code = self.template_manager.generate_code(
                template_type='class',
                tech_stack=tech_stack,
                context=context
            )
            
            impl_file_path = f"auto_implementations/issue_{issue_number}_implementation.py"
            with open(impl_file_path, "w") as f:
                f.write(impl_code)
            files_created.append(impl_file_path)
            
            # テストファイルを生成
            os.makedirs("tests/auto_generated", exist_ok=True)
            test_code = self.template_manager.generate_code(
                template_type='test',
                tech_stack=tech_stack,
                context=context
            )
            
            test_file_path = f"tests/auto_generated/test_issue_{issue_number}.py"
            with open(test_file_path, "w") as f:
                f.write(test_code)
            files_created.append(test_file_path)
            
            # 設計書も作成
            fix_file_path = f"auto_fixes/issue_{issue_number}_fix.md"
            os.makedirs("auto_fixes", exist_ok=True)
            
            with open(fix_file_path, "w") as f:
                f.write(f"""# Auto-fix for Issue #{issue_number}

## Task: {task_name}

## Original Issue
{issue_title}

{issue_body}

## Generated Files
- Implementation: `{impl_file_path}`
- Test: `{test_file_path}`
- Tech Stack: {tech_stack}

## Template System Info
- Detected keywords: {', '.join(context['requirements']['imports'])}
- Template version: Jinja2 Enhanced Templates (Issue #184 Phase 1)

---
*This file was auto-generated by Elder Flow Auto Issue Processor with Template System*
""")
            files_created.append(fix_file_path)
            
            # ファイルをコミット（SafeGitOperations使用）
            commit_result = git_ops.auto_commit_if_changes(
                files=files_created,
                commit_message=f"fix: Auto-fix for issue #{issue_number} - {issue_title[:50]}"
            )
            
            if commit_result["success"]:
                # ブランチをpush
                push_result = git_ops.push_branch_safely(branch_name)
                if not push_result["success"]:
                    self.logger.error(f"Failed to push branch: {push_result.get('error', 'Unknown error')}")
                    return {
                        "success": False,
                        "error": f"ブランチのプッシュに失敗: {push_result.get('error', 'Unknown error')}"
                    }
            else:
                self.logger.info("No changes to commit or commit failed")
                # 変更がない場合でもPRは作成可能
                
        finally:
            # 元のブランチに戻る
            git_ops.checkout_branch(current_branch)
            
            # stashした変更を復元
            if stash_result["success"]:
                git_ops.stash_pop()

        # PR作成
        pr_result = self.pr_creator.create_pull_request(
            title=f"Auto-fix: {issue_title} (#{issue_number})",
            head=branch_name,
            base="main",
            body=f"""🤖 **Auto Issue Processor** による自動修正

## 修正内容
{task_name}

## 対象Issue
Closes #{issue_number}

## 元のIssue内容
{issue_body}

## 生成されたファイル
- 実装: `{impl_file_path}`
- テスト: `{test_file_path}`
- 技術スタック: {tech_stack}

---
*このPRはAuto Issue ProcessorによりSafeGitOperationsを使用して自動生成されました*
""",
            labels=["auto-generated", "auto-fix"],
            draft=False,  # 通常のPRとして作成（自動マージ可能）
        )

        if pr_result.get("success"):
            pr_data = pr_result.get("pull_request", {})
            return {
                "success": True,
                "pr_url": pr_data.get("html_url"),
                "pr_number": pr_data.get("number"),
                "branch_name": branch_name,
            }
        else:
            return {
                "success": False,
                "error": pr_result.get("error", "不明なPR作成エラー"),
            }

    except Exception as e:
        return {"success": False, "error": f"PR作成例外: {str(e)}"}