#!/usr/bin/env python3
"""
üèõÔ∏è „Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„Éâ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„Ç∑„Çπ„ÉÜ„É†
Project Template System for Elders Guild

„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂà∂ÈôêÂØæÂøú„Å®„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ®ôÊ∫ñÂåñ„ÇíÂÆüÁèæ
- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈñãÂßãÊôÇ„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà
- Áä∂ÊÖãÁÆ°ÁêÜ„Å®„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà
- 4Ë≥¢ËÄÖÁµ±Âêà„Å´„Çà„ÇãËá™ÂãïÁõ∏Ë´á
- Á∂ôÁ∂öÊÄß„ÅÆÁ¢∫‰øù
"""

import json
import logging
import os
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import uuid
import sys

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÇíPython„Éë„Çπ„Å´ËøΩÂä†
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

logger = logging.getLogger(__name__)


class ProjectTemplate:
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂÆöÁæ©"""

    def __init__(self, name: str, description: str = ""):
        """ÂàùÊúüÂåñ„É°„ÇΩ„ÉÉ„Éâ"""
        self.name = name
        self.description = description
        self.phases = []
        self.checklists = {}
        self.elder_consultations = {}
        self.status_triggers = {}

    def add_phase(
        self, phase_name: str, tasks: List[str], estimated_days: int = 7
    ) -> "ProjectTemplate":
        """„Éï„Çß„Éº„Ç∫„ÇíËøΩÂä†"""
        self.phases.append(
            {
                "name": phase_name,
                "tasks": tasks,
                "estimated_days": estimated_days,
                "checklist": [],
            }
        )
        return self

    def add_checklist(
        self, phase_name: str, checklist_items: List[str]
    ) -> "ProjectTemplate":
        """„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà„ÇíËøΩÂä†"""
        self.checklists[phase_name] = checklist_items
        return self

    def add_elder_consultation(
        self, phase_name: str, sage_type: str, consultation_prompt: str
    ) -> "ProjectTemplate":
        """„Ç®„É´„ÉÄ„ÉºÁõ∏Ë´á„ÇíËøΩÂä†"""
        if phase_name not in self.elder_consultations:
            self.elder_consultations[phase_name] = []
        self.elder_consultations[phase_name].append(
            {"sage_type": sage_type, "prompt": consultation_prompt}
        )
        return self

    def add_status_trigger(
        self, trigger_condition: str, action: str
    ) -> "ProjectTemplate":
        """Áä∂ÊÖã„Éà„É™„Ç¨„Éº„ÇíËøΩÂä†"""
        trigger_id = str(uuid.uuid4())
        self.status_triggers[trigger_id] = {
            "condition": trigger_condition,
            "action": action,
        }
        return self


class ProjectStatusManager:
    """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖãÁÆ°ÁêÜ"""

    def __init__(self, db_path: str = "project_status.db"):
        """ÂàùÊúüÂåñ„É°„ÇΩ„ÉÉ„Éâ"""
        self.db_path = db_path
        self._init_database()

    def _init_database(self):
        """„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„ÉÜ„Éº„Éñ„É´
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS project_status (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT UNIQUE NOT NULL,
                project_name TEXT NOT NULL,
                template_name TEXT,
                current_phase TEXT,
                phase_index INTEGER DEFAULT 0,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                context_data TEXT,
                checklist_state TEXT,
                elder_consultation_log TEXT
            )
        """
        )

        # „Éï„Çß„Éº„Ç∫Â±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS phase_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                phase_name TEXT NOT NULL,
                start_date TIMESTAMP,
                end_date TIMESTAMP,
                completed BOOLEAN DEFAULT FALSE,
                checklist_completion TEXT,
                notes TEXT,
                FOREIGN KEY (project_id) REFERENCES project_status(project_id)
            )
        """
        )

        # Á∂ôÁ∂öÊÄß„É≠„Ç∞„ÉÜ„Éº„Éñ„É´
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS continuity_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                project_id TEXT NOT NULL,
                session_id TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                action TEXT,
                context_snapshot TEXT,
                previous_actions TEXT,
                next_actions TEXT,
                FOREIGN KEY (project_id) REFERENCES project_status(project_id)
            )
        """
        )

        conn.commit()
        conn.close()

    def create_project_status(
        self,
        project_id: str,
        project_name: str,
        template_name: str = None,
        context_data: Dict = None,
    ) -> bool:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„Çí‰ΩúÊàê"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            cursor.execute(
                """
                INSERT INTO project_status
                (project_id, project_name, template_name, context_data)
                VALUES (?, ?, ?, ?)
            """,
                (
                    project_id,
                    project_name,
                    template_name,
                    json.dumps(context_data) if context_data else None,
                ),
            )

            conn.commit()
            logger.info(f"„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„Çí‰ΩúÊàê: {project_name} (ID: {project_id})")
            return True

        except sqlite3.IntegrityError:
            logger.warning(f"„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„ÅØÊó¢„Å´Â≠òÂú®: {project_id}")
            return False
        finally:
            conn.close()

    def get_project_status(self, project_id: str) -> Optional[Dict]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„ÇíÂèñÂæó"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT * FROM project_status WHERE project_id = ?
        """,
            (project_id,),
        )

        row = cursor.fetchone()
        conn.close()

        if row:
            return {
                "project_id": row[1],
                "project_name": row[2],
                "template_name": row[3],
                "current_phase": row[4],
                "phase_index": row[5],
                "status": row[6],
                "created_at": row[7],
                "updated_at": row[8],
                "context_data": json.loads(row[9]) if row[9] else {},
                "checklist_state": json.loads(row[10]) if row[10] else {},
                "elder_consultation_log": json.loads(row[11]) if row[11] else [],
            }
        return None

    def update_project_phase(
        self,
        project_id: str,
        phase_name: str,
        phase_index: int,
        context_data: Dict = None,
    ) -> bool:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Çß„Éº„Ç∫„ÇíÊõ¥Êñ∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # ÁèæÂú®„ÅÆ„Éï„Çß„Éº„Ç∫„ÇíÂÆå‰∫Ü„Å®„Åó„Å¶„Éû„Éº„ÇØ
        cursor.execute(
            """
            UPDATE phase_history
            SET end_date = CURRENT_TIMESTAMP, completed = TRUE
            WHERE project_id = ? AND completed = FALSE
        """,
            (project_id,),
        )

        # Êñ∞„Åó„ÅÑ„Éï„Çß„Éº„Ç∫„ÇíÈñãÂßã
        cursor.execute(
            """
            INSERT INTO phase_history (project_id, phase_name, start_date)
            VALUES (?, ?, CURRENT_TIMESTAMP)
        """,
            (project_id, phase_name),
        )

        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„ÇíÊõ¥Êñ∞
        cursor.execute(
            """
            UPDATE project_status
            SET current_phase = ?, phase_index = ?, updated_at = CURRENT_TIMESTAMP,
                context_data = COALESCE(?, context_data)
            WHERE project_id = ?
        """,
            (
                phase_name,
                phase_index,
                json.dumps(context_data) if context_data else None,
                project_id,
            ),
        )

        conn.commit()
        conn.close()

        logger.info(f"„Éï„Çß„Éº„Ç∫Êõ¥Êñ∞: {project_id} ‚Üí {phase_name}")
        return True

    def log_continuity(
        self,
        project_id: str,
        session_id: str,
        action: str,
        context_snapshot: Dict,
        previous_actions: List[str] = None,
        next_actions: List[str] = None,
    ) -> bool:
        """Á∂ôÁ∂öÊÄß„É≠„Ç∞„ÇíË®òÈå≤"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            INSERT INTO continuity_log
            (project_id, session_id, action, context_snapshot, previous_actions, next_actions)
            VALUES (?, ?, ?, ?, ?, ?)
        """,
            (
                project_id,
                session_id,
                action,
                json.dumps(context_snapshot),
                json.dumps(previous_actions) if previous_actions else None,
                json.dumps(next_actions) if next_actions else None,
            ),
        )

        conn.commit()
        conn.close()

        return True

    def get_continuity_log(self, project_id: str, limit: int = 10) -> List[Dict]:
        """Á∂ôÁ∂öÊÄß„É≠„Ç∞„ÇíÂèñÂæó"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT * FROM continuity_log
            WHERE project_id = ?
            ORDER BY timestamp DESC
            LIMIT ?
        """,
            (project_id, limit),
        )

        rows = cursor.fetchall()
        conn.close()

        return [
            {
                "session_id": row[2],
                "timestamp": row[3],
                "action": row[4],
                "context_snapshot": json.loads(row[5]) if row[5] else {},
                "previous_actions": json.loads(row[6]) if row[6] else [],
                "next_actions": json.loads(row[7]) if row[7] else [],
            }
            for row in rows
        ]


class ProjectTemplateSystem:
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, db_path: str = "project_status.db"):
        """ÂàùÊúüÂåñ„É°„ÇΩ„ÉÉ„Éâ"""
        self.status_manager = ProjectStatusManager(db_path)
        self.templates = {}
        self.current_session_id = str(uuid.uuid4())
        self._init_default_templates()

    def _init_default_templates(self):
        """„Éá„Éï„Ç©„É´„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÂàùÊúüÂåñ"""
        # WebÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà
        web_template = (
            ProjectTemplate("web_development", "WebÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁî®„ÉÜ„É≥„Éó„É¨„Éº„Éà")
            .add_phase(
                "Phase 1: Ë¶Å‰ª∂ÂÆöÁæ©„ÉªË®≠Ë®à",
                ["Ë¶Å‰ª∂Êï¥ÁêÜ", "ÊäÄË°ìÈÅ∏ÂÆö", "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Ë®≠Ë®à", "„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à"],
                7,
            )
            .add_phase(
                "Phase 2: Âü∫Áõ§ÂÆüË£Ö",
                ["Ë™çË®º„Ç∑„Çπ„ÉÜ„É†", "„Éá„Éº„Çø„Éô„Éº„ÇπÊßãÁØâ", "APIÂü∫Áõ§", "„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂü∫Áõ§"],
                14,
            )
            .add_phase(
                "Phase 3: Ê©üËÉΩÂÆüË£Ö",
                ["„Ç≥„Ç¢Ê©üËÉΩÂÆüË£Ö", "UI/UXÂÆüË£Ö", "„ÉÜ„Çπ„ÉàÂÆüË£Ö", "Áµ±Âêà„ÉÜ„Çπ„Éà"],
                21,
            )
            .add_phase(
                "Phase 4: ÊúÄÈÅ©Âåñ„Éª„Éá„Éó„É≠„Ç§",
                [
                    "„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ",
                    "„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑Âåñ",
                    "„Éá„Éó„É≠„Ç§Ê∫ñÂÇô",
                    "Êú¨Áï™„Éá„Éó„É≠„Ç§",
                ],
                10,
            )
            .add_checklist(
                "Phase 1: Ë¶Å‰ª∂ÂÆöÁæ©„ÉªË®≠Ë®à",
                [
                    "Ë¶Å‰ª∂Êõ∏„É¨„Éì„É•„ÉºÂÆå‰∫Ü",
                    "ÊäÄË°ìÈÅ∏ÂÆöÁêÜÁî±Êõ∏‰ΩúÊàê",
                    "„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Âõ≥‰ΩúÊàê",
                    "„Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®àÊõ∏‰ΩúÊàê",
                ],
            )
            .add_checklist(
                "Phase 2: Âü∫Áõ§ÂÆüË£Ö",
                [
                    "Ë™çË®º„Ç∑„Çπ„ÉÜ„É†ÂÆüË£Ö„Éª„ÉÜ„Çπ„Éà",
                    "„Éá„Éº„Çø„Éô„Éº„Çπ‰ΩúÊàê„Éª„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥",
                    "APIÂü∫Áõ§ÂÆüË£Ö",
                    "„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂü∫Áõ§ÂÆüË£Ö",
                ],
            )
            .add_elder_consultation(
                "Phase 1: Ë¶Å‰ª∂ÂÆöÁæ©„ÉªË®≠Ë®à",
                "knowledge_sage",
                "È°û‰ºº„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊàêÂäü‰∫ã‰æã„Å®Â§±Êïó‰∫ã‰æã„ÇíÊïô„Åà„Å¶",
            )
            .add_elder_consultation(
                "Phase 2: Âü∫Áõ§ÂÆüË£Ö",
                "incident_sage",
                "ÂÆüË£ÖÊôÇ„Å´Ê≥®ÊÑè„Åô„Åπ„Åç„Çª„Ç≠„É•„É™„ÉÜ„Ç£„É™„Çπ„ÇØ„ÇíÊïô„Åà„Å¶",
            )
            .add_elder_consultation(
                "Phase 3: Ê©üËÉΩÂÆüË£Ö",
                "task_sage",
                "Ê©üËÉΩÂÆüË£Ö„ÅÆÊúÄÈÅ©„Å™È†ÜÂ∫è„Å®‰∏¶ÂàóÂåñÂèØËÉΩ„Å™„Çø„Çπ„ÇØ„ÇíÊïô„Åà„Å¶",
            )
            .add_elder_consultation(
                "Phase 4: ÊúÄÈÅ©Âåñ„Éª„Éá„Éó„É≠„Ç§",
                "rag_sage",
                "ÊúÄÊñ∞„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©ÂåñÊâãÊ≥ï„Å®„Éá„Éó„É≠„Ç§„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„ÇíÊïô„Åà„Å¶",
            )
        )

        # AIÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà
        ai_template = (
            ProjectTemplate("ai_development", "AIÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁî®„ÉÜ„É≥„Éó„É¨„Éº„Éà")
            .add_phase(
                "Phase 1: ÂïèÈ°åÂÆöÁæ©„Éª„Éá„Éº„ÇøË™øÊüª",
                ["ÂïèÈ°åÂÆöÁæ©", "„Éá„Éº„ÇøÂèéÈõÜ", "„Éá„Éº„ÇøÂàÜÊûê", "‰ªÆË™¨Ë®≠ÂÆö"],
                10,
            )
            .add_phase(
                "Phase 2: „É¢„Éá„É´ÈñãÁô∫",
                [
                    "„Éô„Éº„Çπ„É©„Ç§„É≥ÂÆüË£Ö",
                    "„É¢„Éá„É´ÈÅ∏ÂÆö",
                    "ÁâπÂæ¥Èáè„Ç®„É≥„Ç∏„Éã„Ç¢„É™„É≥„Ç∞",
                    "„É¢„Éá„É´Â≠¶Áøí",
                ],
                14,
            )
            .add_phase(
                "Phase 3: Ë©ï‰æ°„ÉªÊîπÂñÑ",
                [
                    "„É¢„Éá„É´Ë©ï‰æ°",
                    "„Éè„Ç§„Éë„Éº„Éë„É©„É°„Éº„ÇøË™øÊï¥",
                    "„É¢„Éá„É´ÊîπÂñÑ",
                    "„Éê„É™„Éá„Éº„Ç∑„Éß„É≥",
                ],
                10,
            )
            .add_phase(
                "Phase 4: Áµ±Âêà„Éª„Éá„Éó„É≠„Ç§",
                ["„Ç∑„Çπ„ÉÜ„É†Áµ±Âêà", "Êé®Ë´ñAPIÂÆüË£Ö", "„É¢„Éã„Çø„É™„É≥„Ç∞ÂÆüË£Ö", "Êú¨Áï™„Éá„Éó„É≠„Ç§"],
                7,
            )
            .add_checklist(
                "Phase 1: ÂïèÈ°åÂÆöÁæ©„Éª„Éá„Éº„ÇøË™øÊüª",
                ["ÂïèÈ°åÂÆöÁæ©Êõ∏‰ΩúÊàê", "„Éá„Éº„ÇøÂèéÈõÜÂÆå‰∫Ü", "EDAÂÆüÊñΩ", "‰ªÆË™¨„É™„Çπ„Éà‰ΩúÊàê"],
            )
            .add_elder_consultation(
                "Phase 1: ÂïèÈ°åÂÆöÁæ©„Éª„Éá„Éº„ÇøË™øÊüª",
                "rag_sage",
                "È°û‰ºº„ÅÆAIÂïèÈ°åËß£Ê±∫‰∫ã‰æã„Å®ÊúÄÊñ∞„ÅÆ„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÊïô„Åà„Å¶",
            )
            .add_elder_consultation(
                "Phase 2: „É¢„Éá„É´ÈñãÁô∫",
                "knowledge_sage",
                "„Åì„ÅÆÂïèÈ°å„Å´ÈÅ©„Åó„Åü„É¢„Éá„É´„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÅÆÈÅ∏ÊäûËÇ¢„ÇíÊïô„Åà„Å¶",
            )
        )

        # Á∑äÊÄ•‰øÆÊ≠£„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà
        hotfix_template = (
            ProjectTemplate("hotfix", "Á∑äÊÄ•‰øÆÊ≠£„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁî®„ÉÜ„É≥„Éó„É¨„Éº„Éà")
            .add_phase(
                "Phase 1: Á∑äÊÄ•Ë™øÊüª",
                ["ÂïèÈ°åÁâπÂÆö", "ÂΩ±ÈüøÁØÑÂõ≤Ë™øÊüª", "ÂéüÂõ†ÂàÜÊûê", "‰øÆÊ≠£ÊñπÈáùÊ±∫ÂÆö"],
                1,
            )
            .add_phase(
                "Phase 2: ‰øÆÊ≠£ÂÆüË£Ö",
                ["‰øÆÊ≠£ÂÆüË£Ö", "Âçò‰Ωì„ÉÜ„Çπ„Éà", "Áµ±Âêà„ÉÜ„Çπ„Éà", "ÂΩ±ÈüøÁ¢∫Ë™ç"],
                2,
            )
            .add_phase(
                "Phase 3: Á∑äÊÄ•„Éá„Éó„É≠„Ç§",
                ["„Éá„Éó„É≠„Ç§Ê∫ñÂÇô", "Êú¨Áï™„Éá„Éó„É≠„Ç§", "Âãï‰ΩúÁ¢∫Ë™ç", "Áõ£Ë¶ñÂº∑Âåñ"],
                1,
            )
            .add_checklist(
                "Phase 1: Á∑äÊÄ•Ë™øÊüª",
                ["ÂïèÈ°å„ÅÆÊ†πÊú¨ÂéüÂõ†ÁâπÂÆö", "ÂΩ±ÈüøÁØÑÂõ≤„ÅÆÂÆåÂÖ®ÊääÊè°", "‰øÆÊ≠£ÊñπÈáù„ÅÆ4Ë≥¢ËÄÖÊâøË™ç"],
            )
            .add_elder_consultation(
                "Phase 1: Á∑äÊÄ•Ë™øÊüª",
                "incident_sage",
                "„Åì„ÅÆÂïèÈ°å„ÅÆÊ†πÊú¨ÂéüÂõ†„Å®ÊúÄÈÅ©„Å™‰øÆÊ≠£„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÊïô„Åà„Å¶",
            )
            .add_elder_consultation(
                "Phase 2: ‰øÆÊ≠£ÂÆüË£Ö",
                "task_sage",
                "‰øÆÊ≠£ÂÆüË£Ö„ÅÆÊúÄÈÄü„Åã„Å§ÂÆâÂÖ®„Å™ÂÆüË°åÈ†ÜÂ∫è„ÇíÊïô„Åà„Å¶",
            )
        )

        # „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÇíÁôªÈå≤
        self.templates = {
            "web_development": web_template,
            "ai_development": ai_template,
            "hotfix": hotfix_template,
        }

    def create_project_from_template(
        self, project_name: str, template_name: str, context_data: Dict = None
    ) -> str:
        """„ÉÜ„É≥„Éó„É¨„Éº„Éà„Åã„Çâ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê"""
        if template_name not in self.templates:
            raise ValueError(f"„ÉÜ„É≥„Éó„É¨„Éº„Éà '{template_name}' „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")

        project_id = f"project_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{str(uuid.uuid4())[:8]}"

        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂ÊÖã„Çí‰ΩúÊàê
        self.status_manager.create_project_status(
            project_id, project_name, template_name, context_data
        )

        # ÊúÄÂàù„ÅÆ„Éï„Çß„Éº„Ç∫„ÇíÈñãÂßã
        template = self.templates[template_name]
        if template.phases:
            first_phase = template.phases[0]
            self.status_manager.update_project_phase(
                project_id, first_phase["name"], 0, context_data
            )

        # Á∂ôÁ∂öÊÄß„É≠„Ç∞„ÇíË®òÈå≤
        self.status_manager.log_continuity(
            project_id,
            self.current_session_id,
            "project_created",
            {
                "template_name": template_name,
                "project_name": project_name,
                "context_data": context_data or {},
            },
            previous_actions=[],
            next_actions=template.phases[0]["tasks"] if template.phases else [],
        )

        return project_id

    def get_project_context(self, project_id: str) -> Dict:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó"""
        status = self.status_manager.get_project_status(project_id)
        if not status:
            return {}

        template = self.templates.get(status["template_name"])
        continuity_log = self.status_manager.get_continuity_log(project_id, 5)

        return {
            "project_info": status,
            "template": template,
            "continuity_log": continuity_log,
            "current_phase_tasks": self._get_current_phase_tasks(status, template),
            "checklist": self._get_current_checklist(status, template),
            "elder_consultations": self._get_elder_consultations(status, template),
        }

    def _get_current_phase_tasks(
        self, status: Dict, template: ProjectTemplate
    ) -> List[str]:
        """ÁèæÂú®„ÅÆ„Éï„Çß„Éº„Ç∫„ÅÆ„Çø„Çπ„ÇØ„ÇíÂèñÂæó"""
        if not template or not template.phases:
            return []

        phase_index = status.get("phase_index", 0)
        if phase_index < len(template.phases):
            return template.phases[phase_index]["tasks"]
        return []

    def _get_current_checklist(
        self, status: Dict, template: ProjectTemplate
    ) -> List[str]:
        """ÁèæÂú®„ÅÆ„Éï„Çß„Éº„Ç∫„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà„ÇíÂèñÂæó"""
        if not template or not status.get("current_phase"):
            return []

        phase_name = status["current_phase"]
        return template.checklists.get(phase_name, [])

    def _get_elder_consultations(
        self, status: Dict, template: ProjectTemplate
    ) -> List[Dict]:
        """ÁèæÂú®„ÅÆ„Éï„Çß„Éº„Ç∫„ÅÆ„Ç®„É´„ÉÄ„ÉºÁõ∏Ë´á„ÇíÂèñÂæó"""
        if not template or not status.get("current_phase"):
            return []

        phase_name = status["current_phase"]
        return template.elder_consultations.get(phase_name, [])

    def advance_phase(self, project_id: str, context_data: Dict = None) -> bool:
        """„Éï„Çß„Éº„Ç∫„ÇíÈÄ≤„ÇÅ„Çã"""
        status = self.status_manager.get_project_status(project_id)
        if not status:
            return False

        template = self.templates.get(status["template_name"])
        if not template:
            return False

        current_phase_index = status.get("phase_index", 0)
        next_phase_index = current_phase_index + 1

        if next_phase_index >= len(template.phases):
            # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÆå‰∫Ü
            return self._complete_project(project_id, context_data)

        next_phase = template.phases[next_phase_index]

        # „Éï„Çß„Éº„Ç∫„ÇíÈÄ≤„ÇÅ„Çã
        self.status_manager.update_project_phase(
            project_id, next_phase["name"], next_phase_index, context_data
        )

        # Á∂ôÁ∂öÊÄß„É≠„Ç∞„ÇíË®òÈå≤
        self.status_manager.log_continuity(
            project_id,
            self.current_session_id,
            "phase_advanced",
            {
                "previous_phase": status["current_phase"],
                "current_phase": next_phase["name"],
                "phase_index": next_phase_index,
                "context_data": context_data or {},
            },
            previous_actions=self._get_current_phase_tasks(status, template),
            next_actions=next_phase["tasks"],
        )

        return True

    def _complete_project(self, project_id: str, context_data: Dict = None) -> bool:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÂÆå‰∫Ü"""
        conn = sqlite3.connect(self.status_manager.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            UPDATE project_status
            SET status = 'completed', updated_at = CURRENT_TIMESTAMP
            WHERE project_id = ?
        """,
            (project_id,),
        )

        # ÊúÄÁµÇ„Éï„Çß„Éº„Ç∫„ÇíÂÆå‰∫Ü
        cursor.execute(
            """
            UPDATE phase_history
            SET end_date = CURRENT_TIMESTAMP, completed = TRUE
            WHERE project_id = ? AND completed = FALSE
        """,
            (project_id,),
        )

        conn.commit()
        conn.close()

        # Á∂ôÁ∂öÊÄß„É≠„Ç∞„ÇíË®òÈå≤
        self.status_manager.log_continuity(
            project_id,
            self.current_session_id,
            "project_completed",
            {"completion_data": context_data or {}},
            previous_actions=["„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÆå‰∫Ü"],
            next_actions=[],
        )

        return True

    def generate_status_report(self, project_id: str) -> str:
        """Áä∂ÊÖã„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        context = self.get_project_context(project_id)
        if not context:
            return "„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"

        project_info = context["project_info"]
        template = context["template"]
        continuity_log = context["continuity_log"]
        current_tasks = context["current_phase_tasks"]
        checklist = context["checklist"]
        elder_consultations = context["elder_consultations"]

        report = f"""
üèõÔ∏è „Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„Éâ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂Ê≥Å„É¨„Éù„Éº„Éà
=============================================

üìã „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†±
- ÂêçÂâç: {project_info['project_name']}
- ID: {project_info['project_id']}
- „ÉÜ„É≥„Éó„É¨„Éº„Éà: {project_info['template_name']}
- ÁèæÂú®„ÅÆ„Éï„Çß„Éº„Ç∫: {project_info['current_phase']}
- Áä∂ÊÖã: {project_info['status']}
- ‰ΩúÊàêÊó•: {project_info['created_at']}
- Êõ¥Êñ∞Êó•: {project_info['updated_at']}

üéØ ÁèæÂú®„ÅÆ„Çø„Çπ„ÇØ
{chr(10).join(f"- {task}" for task in current_tasks)}

‚úÖ „ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà
{chr(10).join(f"- [ ] {item}" for item in checklist)}

üßô‚Äç‚ôÇÔ∏è „Ç®„É´„ÉÄ„ÉºÁõ∏Ë´á‰∫ãÈ†Ö
{chr(10).join(f"- {consul['sage_type']}: {consul['prompt']}" for consul in elder_consultations)}

üìà ÊúÄËøë„ÅÆÊ¥ªÂãï
{chr(10).join(f"- {log['timestamp']}: {log['action']}" for log in continuity_log[:3])}

üîÑ „Éï„Çß„Éº„Ç∫ÈÄ≤Êçó
Phase {project_info['phase_index'] + 1} / {len(template.phases) if template else 'N/A'}
"""

        return report

    def get_project_list(self) -> List[Dict]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó"""
        conn = sqlite3.connect(self.status_manager.db_path)
        cursor = conn.cursor()

        cursor.execute(
            """
            SELECT project_id, project_name, template_name, current_phase, status, updated_at
            FROM project_status
            ORDER BY updated_at DESC
        """
        )

        rows = cursor.fetchall()
        conn.close()

        return [
            {
                "project_id": row[0],
                "project_name": row[1],
                "template_name": row[2],
                "current_phase": row[3],
                "status": row[4],
                "updated_at": row[5],
            }
            for row in rows
        ]


# CLI „Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
class ProjectTemplateCLI:
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„ÉàCLI"""

    def __init__(self):
        """ÂàùÊúüÂåñ„É°„ÇΩ„ÉÉ„Éâ"""
        self.system = ProjectTemplateSystem()

    def create_project(self, project_name: str, template_name: str) -> str:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê"""
        try:
            project_id = self.system.create_project_from_template(
                project_name, template_name
            )
            print(f"‚úÖ „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàêÂÆå‰∫Ü: {project_name}")
            print(f"   ID: {project_id}")
            print(f"   „ÉÜ„É≥„Éó„É¨„Éº„Éà: {template_name}")

            # ÂàùÊúü„É¨„Éù„Éº„Éà„ÇíË°®Á§∫
            print("\nüìã ÂàùÊúüÁä∂Ê≥Å„É¨„Éù„Éº„Éà:")
            print(self.system.generate_status_report(project_id))

            return project_id

        except Exception as e:
            print(f"‚ùå „Ç®„É©„Éº: {e}")
            return ""

    def show_project_status(self, project_id: str):
        """„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂Ê≥ÅË°®Á§∫"""
        report = self.system.generate_status_report(project_id)
        print(report)

    def list_projects(self):
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ßË°®Á§∫"""
        projects = self.system.get_project_list()

        if not projects:
            print("üì≠ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
            return

        print("üìã „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß")
        print("=" * 80)
        print(
            f"{'ID':<20} {'ÂêçÂâç':<30} {'„ÉÜ„É≥„Éó„É¨„Éº„Éà':<15} {'„Éï„Çß„Éº„Ç∫':<20} {'Áä∂ÊÖã':<10}"
        )
        print("-" * 80)

        for project in projects:
            print(
                f"{project['project_id']:<20} {project['project_name']:<30} "
                f"{project['template_name']:<15} {project['current_phase']:<20} "
                f"{project['status']:<10}"
            )

    def advance_project_phase(self, project_id: str):
        """„Éï„Çß„Éº„Ç∫ÈÄ≤Ë°å"""
        success = self.system.advance_phase(project_id)
        if success:
            print(f"‚úÖ „Éï„Çß„Éº„Ç∫„ÇíÈÄ≤„ÇÅ„Åæ„Åó„Åü: {project_id}")
            print("\nüìã Êõ¥Êñ∞Âæå„ÅÆÁä∂Ê≥Å:")
            self.show_project_status(project_id)
        else:
            print(f"‚ùå „Éï„Çß„Éº„Ç∫„ÅÆÈÄ≤Ë°å„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {project_id}")

    def list_templates(self):
        """„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ßË°®Á§∫"""
        print("üìã Âà©Áî®ÂèØËÉΩ„Å™„ÉÜ„É≥„Éó„É¨„Éº„Éà")
        print("=" * 50)

        for name, template in self.system.templates.items():
            print(f"\nüéØ {name}")
            print(f"   Ë™¨Êòé: {template.description}")
            print(f"   „Éï„Çß„Éº„Ç∫Êï∞: {len(template.phases)}")
            for i, phase in enumerate(template.phases):
                print(f"   Phase {i+1}: {phase['name']} ({phase['estimated_days']}Êó•)")


def main():
    """„É°„Ç§„É≥Âá¶ÁêÜ"""
    import argparse

    parser = argparse.ArgumentParser(
        description="üèõÔ∏è „Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„Éâ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÉÜ„É≥„Éó„É¨„Éº„Éà„Ç∑„Çπ„ÉÜ„É†"
    )
    subparsers = parser.add_subparsers(dest="command", help="„Ç≥„Éû„É≥„Éâ")

    # create „Ç≥„Éû„É≥„Éâ
    create_parser = subparsers.add_parser("create", help="„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰ΩúÊàê")
    create_parser.add_argument("project_name", help="„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç")
    create_parser.add_argument("template_name", help="„ÉÜ„É≥„Éó„É¨„Éº„ÉàÂêç")

    # status „Ç≥„Éû„É≥„Éâ
    status_parser = subparsers.add_parser("status", help="„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁä∂Ê≥ÅË°®Á§∫")
    status_parser.add_argument("project_id", help="„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID")

    # list „Ç≥„Éû„É≥„Éâ
    list_parser = subparsers.add_parser("list", help="„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß")

    # advance „Ç≥„Éû„É≥„Éâ
    advance_parser = subparsers.add_parser("advance", help="„Éï„Çß„Éº„Ç∫ÈÄ≤Ë°å")
    advance_parser.add_argument("project_id", help="„Éó„É≠„Ç∏„Çß„ÇØ„ÉàID")

    # templates „Ç≥„Éû„É≥„Éâ
    templates_parser = subparsers.add_parser("templates", help="„ÉÜ„É≥„Éó„É¨„Éº„Éà‰∏ÄË¶ß")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    cli = ProjectTemplateCLI()

    if args.command == "create":
        cli.create_project(args.project_name, args.template_name)
    elif args.command == "status":
        cli.show_project_status(args.project_id)
    elif args.command == "list":
        cli.list_projects()
    elif args.command == "advance":
        cli.advance_project_phase(args.project_id)
    elif args.command == "templates":
        cli.list_templates()


if __name__ == "__main__":
    main()
