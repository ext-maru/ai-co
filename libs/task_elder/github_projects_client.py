#!/usr/bin/env python3
"""
üöÄ GitHub Projects API „ÇØ„É©„Ç§„Ç¢„É≥„Éà
GitHub Projects API Client

GitHub Projects v2 API„Çí‰ΩøÁî®„Åó„Å¶„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éú„Éº„Éâ„ÇíÁÆ°ÁêÜ„Åô„Çã„ÇØ„É©„Ç§„Ç¢„É≥„Éà
"""

import asyncio
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
import logging
import aiohttp
from enum import Enum

logger = logging.getLogger(__name__)

class ProjectItemStatus(Enum):
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†„ÅÆ„Çπ„ÉÜ„Éº„Çø„Çπ"""
    TODO = "Todo"
    IN_PROGRESS = "In Progress"
    DONE = "Done"
    BLOCKED = "Blocked"
    REVIEW = "Review"

class ProjectItemPriority(Enum):
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†„ÅÆÂÑ™ÂÖàÂ∫¶"""
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"
    URGENT = "Urgent"

@dataclass
class ProjectItem:
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†"""
    id: Optional[str] = None
    title: str = ""
    body: str = ""
    status: ProjectItemStatus = ProjectItemStatus.TODO
    priority: ProjectItemPriority = ProjectItemPriority.MEDIUM
    assignees: List[str] = None
    labels: List[str] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    
    def __post_init__(self):
        if self.assignees is None:
            self.assignees = []
        if self.labels is None:
            self.labels = []
        if not self.created_at:
            self.created_at = datetime.now().isoformat()

@dataclass
class ProjectBoard:
    """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éú„Éº„Éâ"""
    id: Optional[str] = None
    number: Optional[int] = None
    title: str = ""
    description: str = ""
    owner: str = ""
    url: Optional[str] = None
    items: List[ProjectItem] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    
    def __post_init__(self):
        if self.items is None:
            self.items = []
        if not self.created_at:
            self.created_at = datetime.now().isoformat()

class GitHubProjectsClient:
    """GitHub Projects API „ÇØ„É©„Ç§„Ç¢„É≥„Éà"""
    
    def __init__(self, token: Optional[str] = None, owner: str = "aicompany", repo: str = "ai_co"):
        self.base_url = "https://api.github.com"
        self.graphql_url = "https://api.github.com/graphql"
        self.owner = owner
        self.repo = repo
        
        # GitHub Token
        self.token = token or self._get_token_from_env()
        if not self.token:
            logger.warning("GitHub token„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇdry_run„É¢„Éº„Éâ„ÅßÂãï‰Ωú„Åó„Åæ„Åô")
            self.dry_run = True
        else:
            self.dry_run = False
        
        # HTTP„Çª„ÉÉ„Ç∑„Éß„É≥
        self.session = None
        
        # „Éá„Éº„Çø„Çπ„Éà„É¨„Éº„Ç∏
        self.base_path = Path("/home/aicompany/ai_co")
        self.data_path = self.base_path / "data" / "github_projects"
        self.data_path.mkdir(parents=True, exist_ok=True)
        
        # „Ç≠„É£„ÉÉ„Ç∑„É•
        self.projects_cache = {}
        self.items_cache = {}
        
    def _get_token_from_env(self) -> Optional[str]:
        """Áí∞Â¢ÉÂ§âÊï∞„Åã„Çâ„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó"""
        import os
        return os.getenv("GITHUB_TOKEN")
    
    async def __aenter__(self):
        """ÈùûÂêåÊúü„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Éû„Éç„Éº„Ç∏„É£„ÉºÈñãÂßã"""
        if not self.dry_run:
            self.session = aiohttp.ClientSession(
                headers={
                    "Authorization": f"token {self.token}",
                    "Accept": "application/vnd.github+json",
                    "X-GitHub-Api-Version": "2022-11-28"
                }
            )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """ÈùûÂêåÊúü„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Éû„Éç„Éº„Ç∏„É£„ÉºÁµÇ‰∫Ü"""
        if self.session:
            await self.session.close()
    
    async def _make_graphql_request(self, query: str, variables: Dict = None) -> Dict:
        """GraphQL „É™„ÇØ„Ç®„Çπ„Éà„ÇíÂÆüË°å"""
        if self.dry_run:
            logger.info(f"DRY RUN: GraphQL query: {query[:100]}...")
            return {"data": {}}
        
        if not self.session:
            raise RuntimeError("„Çª„ÉÉ„Ç∑„Éß„É≥„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
        
        payload = {
            "query": query,
            "variables": variables or {}
        }
        
        try:
            async with self.session.post(self.graphql_url, json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    if "errors" in result:
                        logger.error(f"GraphQL errors: {result['errors']}")
                        raise Exception(f"GraphQL errors: {result['errors']}")
                    return result
                else:
                    error_text = await response.text()
                    logger.error(f"GraphQL request failed: {response.status} - {error_text}")
                    raise Exception(f"GraphQL request failed: {response.status}")
        except Exception as e:
            logger.error(f"GraphQL request error: {e}")
            raise
    
    async def get_organization_projects(self, org: Optional[str] = None) -> List[ProjectBoard]:
        """ÁµÑÁπî„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÂèñÂæó"""
        org = org or self.owner
        
        query = """
        query($org: String!, $first: Int!) {
            organization(login: $org) {
                projectsV2(first: $first) {
                    nodes {
                        id
                        number
                        title
                        shortDescription
                        url
                        createdAt
                        updatedAt
                    }
                }
            }
        }
        """
        
        variables = {
            "org": org,
            "first": 50
        }
        
        try:
            result = await self._make_graphql_request(query, variables)
            
            if self.dry_run:
                # Dry runÁî®„ÅÆ„ÉÄ„Éü„Éº„Éá„Éº„Çø
                return [
                    ProjectBoard(
                        id="PVT_001",
                        number=1,
                        title="„Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„ÉâÈñãÁô∫„Éó„É≠„Ç∏„Çß„ÇØ„Éà",
                        description="„Ç®„É´„ÉÄ„Éº„Ç∫„ÇÆ„É´„Éâ„ÅÆÈñãÁô∫ÁÆ°ÁêÜ",
                        owner=org,
                        url="https://github.com/orgs/aicompany/projects/1"
                    )
                ]
            
            projects = []
            for node in result["data"]["organization"]["projectsV2"]["nodes"]:
                project = ProjectBoard(
                    id=node["id"],
                    number=node["number"],
                    title=node["title"],
                    description=node.get("shortDescription", ""),
                    owner=org,
                    url=node["url"],
                    created_at=node["createdAt"],
                    updated_at=node["updatedAt"]
                )
                projects.append(project)
            
            return projects
            
        except Exception as e:
            logger.error(f"„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂèñÂæó„Ç®„É©„Éº: {e}")
            return []
    
    async def get_project_items(self, project_id: str) -> List[ProjectItem]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂèñÂæó"""
        if self.dry_run:
            logger.info(f"DRY RUN: „Éó„É≠„Ç∏„Çß„ÇØ„Éà {project_id} „ÅÆ„Ç¢„Ç§„ÉÜ„É†ÂèñÂæó")
            return []
        
        query = """
        query($projectId: ID!, $first: Int!) {
            node(id: $projectId) {
                ... on ProjectV2 {
                    items(first: $first) {
                        nodes {
                            id
                            content {
                                ... on Issue {
                                    title
                                    body
                                    state
                                    createdAt
                                    updatedAt
                                }
                                ... on DraftIssue {
                                    title
                                    body
                                    createdAt
                                    updatedAt
                                }
                            }
                            fieldValues(first: 10) {
                                nodes {
                                    ... on ProjectV2ItemFieldSingleSelectValue {
                                        name
                                        field {
                                            ... on ProjectV2SingleSelectField {
                                                name
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        """
        
        variables = {
            "projectId": project_id,
            "first": 100
        }
        
        try:
            result = await self._make_graphql_request(query, variables)
            
            items = []
            for node in result["data"]["node"]["items"]["nodes"]:
                content = node.get("content", {})
                
                # „Çπ„ÉÜ„Éº„Çø„Çπ„Å®ÂÑ™ÂÖàÂ∫¶„ÇíÊäΩÂá∫
                status = ProjectItemStatus.TODO
                priority = ProjectItemPriority.MEDIUM
                
                for field_value in node.get("fieldValues", {}).get("nodes", []):
                    field_name = field_value.get("field", {}).get("name", "")
                    value_name = field_value.get("name", "")
                    
                    if field_name == "Status":
                        try:
                            status = ProjectItemStatus(value_name)
                        except ValueError:
                            pass
                    elif field_name == "Priority":
                        try:
                            priority = ProjectItemPriority(value_name)
                        except ValueError:
                            pass
                
                item = ProjectItem(
                    id=node["id"],
                    title=content.get("title", ""),
                    body=content.get("body", ""),
                    status=status,
                    priority=priority,
                    created_at=content.get("createdAt"),
                    updated_at=content.get("updatedAt")
                )
                items.append(item)
            
            return items
            
        except Exception as e:
            logger.error(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†ÂèñÂæó„Ç®„É©„Éº: {e}")
            return []
    
    async def create_project_item(self, project_id: str, title: str, body: str = "", 
                                  status: ProjectItemStatus = ProjectItemStatus.TODO,
                                  priority: ProjectItemPriority = ProjectItemPriority.MEDIUM) -> Optional[ProjectItem]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†„Çí‰ΩúÊàê"""
        if self.dry_run:
            logger.info(f"DRY RUN: „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†‰ΩúÊàê - {title}")
            return ProjectItem(
                id=f"DRAFT_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                title=title,
                body=body,
                status=status,
                priority=priority
            )
        
        # „Åæ„Åö„Éâ„É©„Éï„Éà„Ç¢„Ç§„ÉÜ„É†„Çí‰ΩúÊàê
        create_mutation = """
        mutation($projectId: ID!, $title: String!, $body: String!) {
            addProjectV2DraftIssue(input: {
                projectId: $projectId
                title: $title
                body: $body
            }) {
                projectItem {
                    id
                    content {
                        ... on DraftIssue {
                            title
                            body
                            createdAt
                            updatedAt
                        }
                    }
                }
            }
        }
        """
        
        variables = {
            "projectId": project_id,
            "title": title,
            "body": body
        }
        
        try:
            result = await self._make_graphql_request(create_mutation, variables)
            
            project_item = result["data"]["addProjectV2DraftIssue"]["projectItem"]
            content = project_item["content"]
            
            item = ProjectItem(
                id=project_item["id"],
                title=content["title"],
                body=content["body"],
                status=status,
                priority=priority,
                created_at=content["createdAt"],
                updated_at=content["updatedAt"]
            )
            
            # „Çπ„ÉÜ„Éº„Çø„Çπ„Å®ÂÑ™ÂÖàÂ∫¶„ÇíË®≠ÂÆö
            await self._update_item_fields(project_id, item.id, status, priority)
            
            return item
            
        except Exception as e:
            logger.error(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†‰ΩúÊàê„Ç®„É©„Éº: {e}")
            return None
    
    async def _update_item_fields(self, project_id: str, item_id: str, 
                                  status: ProjectItemStatus, priority: ProjectItemPriority):
        """„Ç¢„Ç§„ÉÜ„É†„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÇíÊõ¥Êñ∞"""
        if self.dry_run:
            logger.info(f"DRY RUN: „Ç¢„Ç§„ÉÜ„É†„Éï„Ç£„Éº„É´„ÉâÊõ¥Êñ∞ - {item_id}")
            return
        
        # „Éï„Ç£„Éº„É´„ÉâID„ÇíÂèñÂæóÔºàÁ∞°Âçò„ÅÆ„Åü„ÇÅÂõ∫ÂÆöÂÄ§„Çí‰ΩøÁî®Ôºâ
        # ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ„Éï„Ç£„Éº„É´„ÉâË®≠ÂÆö„ÇíÂãïÁöÑ„Å´ÂèñÂæó„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
        
        # „Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
        if status != ProjectItemStatus.TODO:
            status_mutation = """
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: $value
                }) {
                    projectV2Item {
                        id
                    }
                }
            }
            """
            
            # „Éï„Ç£„Éº„É´„ÉâID„ÅØ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åî„Å®„Å´Áï∞„Å™„Çã„Åü„ÇÅ„ÄÅÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØÂãïÁöÑ„Å´ÂèñÂæó
            logger.info(f"„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞: {item_id} -> {status.value}")
    
    async def update_project_item(self, project_id: str, item_id: str, 
                                  title: Optional[str] = None, body: Optional[str] = None,
                                  status: Optional[ProjectItemStatus] = None,
                                  priority: Optional[ProjectItemPriority] = None) -> Optional[ProjectItem]:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†„ÇíÊõ¥Êñ∞"""
        if self.dry_run:
            logger.info(f"DRY RUN: „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†Êõ¥Êñ∞ - {item_id}")
            return ProjectItem(
                id=item_id,
                title=title or "Updated Title",
                body=body or "Updated Body",
                status=status or ProjectItemStatus.IN_PROGRESS,
                priority=priority or ProjectItemPriority.MEDIUM
            )
        
        # ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅGraphQL mutation„Åß„Ç¢„Ç§„ÉÜ„É†„ÇíÊõ¥Êñ∞
        logger.info(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†Êõ¥Êñ∞: {item_id}")
        
        # „Éï„Ç£„Éº„É´„Éâ„ÅÆÊõ¥Êñ∞
        if status:
            await self._update_item_fields(project_id, item_id, status, priority or ProjectItemPriority.MEDIUM)
        
        return None
    
    async def delete_project_item(self, project_id: str, item_id: str) -> bool:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†„ÇíÂâäÈô§"""
        if self.dry_run:
            logger.info(f"DRY RUN: „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†ÂâäÈô§ - {item_id}")
            return True
        
        delete_mutation = """
        mutation($projectId: ID!, $itemId: ID!) {
            deleteProjectV2Item(input: {
                projectId: $projectId
                itemId: $itemId
            }) {
                deletedItemId
            }
        }
        """
        
        variables = {
            "projectId": project_id,
            "itemId": item_id
        }
        
        try:
            await self._make_graphql_request(delete_mutation, variables)
            logger.info(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†ÂâäÈô§ÂÆå‰∫Ü: {item_id}")
            return True
            
        except Exception as e:
            logger.error(f"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Ç¢„Ç§„ÉÜ„É†ÂâäÈô§„Ç®„É©„Éº: {e}")
            return False
    
    async def sync_plan_to_project(self, project_id: str, plan_name: str, tasks: List[Dict]) -> Dict:
        """Ë®àÁîªÊõ∏„Çí„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´ÂêåÊúü"""
        if self.dry_run:
            logger.info(f"DRY RUN: Ë®àÁîªÊõ∏ÂêåÊúü - {plan_name} -> {project_id}")
        
        sync_results = {
            "project_id": project_id,
            "plan_name": plan_name,
            "total_tasks": len(tasks),
            "created_items": [],
            "updated_items": [],
            "failed_items": [],
            "sync_timestamp": datetime.now().isoformat()
        }
        
        # Êó¢Â≠ò„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂèñÂæó
        existing_items = await self.get_project_items(project_id)
        existing_titles = {item.title: item for item in existing_items}
        
        for task in tasks:
            task_title = task.get("title", "")
            task_body = task.get("description", "")
            
            # ÂÑ™ÂÖàÂ∫¶„Çí„Éû„ÉÉ„Éó
            priority_map = {
                "low": ProjectItemPriority.LOW,
                "medium": ProjectItemPriority.MEDIUM,
                "high": ProjectItemPriority.HIGH,
                "urgent": ProjectItemPriority.URGENT
            }
            priority = priority_map.get(task.get("priority", "medium"), ProjectItemPriority.MEDIUM)
            
            try:
                if task_title in existing_titles:
                    # Êó¢Â≠ò„Ç¢„Ç§„ÉÜ„É†„ÅÆÊõ¥Êñ∞
                    existing_item = existing_titles[task_title]
                    updated_item = await self.update_project_item(
                        project_id, existing_item.id, 
                        title=task_title, body=task_body, priority=priority
                    )
                    if updated_item:
                        sync_results["updated_items"].append(task_title)
                else:
                    # Êñ∞Ë¶è„Ç¢„Ç§„ÉÜ„É†„ÅÆ‰ΩúÊàê
                    new_item = await self.create_project_item(
                        project_id, task_title, task_body, 
                        ProjectItemStatus.TODO, priority
                    )
                    if new_item:
                        sync_results["created_items"].append(task_title)
                        
            except Exception as e:
                logger.error(f"„Çø„Çπ„ÇØÂêåÊúü„Ç®„É©„Éº: {task_title} - {e}")
                sync_results["failed_items"].append({
                    "title": task_title,
                    "error": str(e)
                })
        
        # ÂêåÊúüÁµêÊûú„Çí‰øùÂ≠ò
        await self._save_sync_results(sync_results)
        
        return sync_results
    
    async def _save_sync_results(self, results: Dict):
        """ÂêåÊúüÁµêÊûú„Çí‰øùÂ≠ò"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        results_file = self.data_path / f"sync_results_{timestamp}.json"
        
        try:
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            logger.info(f"ÂêåÊúüÁµêÊûú‰øùÂ≠ò: {results_file}")
        except Exception as e:
            logger.error(f"ÂêåÊúüÁµêÊûú‰øùÂ≠ò„Ç®„É©„Éº: {e}")
    
    async def get_sync_history(self) -> List[Dict]:
        """ÂêåÊúüÂ±•Ê≠¥„ÇíÂèñÂæó"""
        sync_files = list(self.data_path.glob("sync_results_*.json"))
        sync_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        history = []
        for file_path in sync_files[:10]:  # ÊúÄÊñ∞10‰ª∂
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    history.append(data)
            except Exception as e:
                logger.error(f"ÂêåÊúüÂ±•Ê≠¥Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: {e}")
        
        return history
    
    async def get_project_overview(self, project_id: str) -> Dict:
        """„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ¶ÇË¶Å„ÇíÂèñÂæó"""
        if self.dry_run:
            return {
                "project_id": project_id,
                "total_items": 10,
                "status_counts": {
                    "Todo": 3,
                    "In Progress": 4,
                    "Done": 2,
                    "Blocked": 1
                },
                "priority_counts": {
                    "Low": 2,
                    "Medium": 5,
                    "High": 2,
                    "Urgent": 1
                },
                "last_updated": datetime.now().isoformat()
            }
        
        items = await self.get_project_items(project_id)
        
        status_counts = {}
        priority_counts = {}
        
        for item in items:
            status = item.status.value
            priority = item.priority.value
            
            status_counts[status] = status_counts.get(status, 0) + 1
            priority_counts[priority] = priority_counts.get(priority, 0) + 1
        
        return {
            "project_id": project_id,
            "total_items": len(items),
            "status_counts": status_counts,
            "priority_counts": priority_counts,
            "last_updated": datetime.now().isoformat()
        }

# ‰ΩøÁî®‰æã
async def main():
    """„É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞"""
    async with GitHubProjectsClient() as client:
        # „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
        projects = await client.get_organization_projects()
        print(f"üìã „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊï∞: {len(projects)}")
        
        for project in projects:
            print(f"  üöÄ {project.title} (#{project.number})")
            
            # „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊ¶ÇË¶Å„ÇíÂèñÂæó
            overview = await client.get_project_overview(project.id)
            print(f"    üìä „Ç¢„Ç§„ÉÜ„É†Êï∞: {overview['total_items']}")
            print(f"    üìà „Çπ„ÉÜ„Éº„Çø„Çπ: {overview['status_counts']}")

if __name__ == "__main__":
    asyncio.run(main())