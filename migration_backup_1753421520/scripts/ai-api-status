#!/bin/bash
#
# AI API Status - API„Ç≠„Éº„É≠„Éº„ÉÜ„Éº„Ç∑„Éß„É≥Áä∂Ê≥ÅÁ¢∫Ë™ç
#

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_DIR"

# ‰ªÆÊÉ≥Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ
if [[ ! "$AI_VENV_ACTIVE" == "1" ]]; then
    if [[ -f "venv/bin/activate" ]]; then
        source venv/bin/activate
        export AI_VENV_ACTIVE=1
    fi
fi

# PythonÂÆüË°å
python3 -c "
import sys
import os
sys.path.append('$PROJECT_DIR')

try:
    from libs.claude_client_with_rotation import test_api_keys
    import json

    print('üîë API Key Rotation Status Check')
    print('=' * 50)

    # API „Ç≠„Éº„ÉÜ„Çπ„ÉàÂÆüË°å
    results = test_api_keys('$PROJECT_DIR/config/config.json')

    print(f'Total API Keys: {results[\"total_keys\"]}')
    print(f'Working Keys: {results[\"summary\"][\"working_keys\"]}')
    print(f'Failed Keys: {results[\"summary\"][\"failed_keys\"]}')
    print(f'Rate Limited Keys: {results[\"summary\"][\"rate_limited_keys\"]}')
    print()

    # ÂêÑ„Ç≠„Éº„ÅÆË©≥Á¥∞
    for key_alias, result in results['test_results'].items():
        status_emoji = {'working': '‚úÖ', 'failed': '‚ùå', 'rate_limited': '‚è≥'}
        emoji = status_emoji.get(result['status'], '‚ùì')
        print(f'{emoji} {key_alias}: {result[\"status\"]}')

        if result['status'] == 'working':
            print(f'   Tokens Used: {result[\"tokens_used\"]}')
        elif result['status'] in ['failed', 'rate_limited']:
            print(f'   Error: {result[\"error\"]}')

    print()
    print('üìä Health Status Summary:')
    if results['summary']['working_keys'] > 0:
        print('‚úÖ System operational with available API keys')
    elif results['summary']['rate_limited_keys'] > 0:
        print('‚è≥ All keys rate limited - system will retry automatically')
    else:
        print('‚ùå No working API keys available')

except ImportError as e:
    print(f'‚ùå Import Error: {e}')
    print('Please ensure all dependencies are installed.')
except Exception as e:
    print(f'‚ùå Error: {e}')
"
