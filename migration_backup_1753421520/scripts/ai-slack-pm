#!/bin/bash
#
# AI Slack PM - SlackÂØæË©±Âûã„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éû„Éç„Éº„Ç∏„É£„ÉºÂà∂Âæ°
#

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

COMMAND="$1"

if [[ -z "$COMMAND" ]]; then
    echo "Usage: ai-slack-pm <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start           Start Slack PM Worker"
    echo "  stop            Stop Slack PM Worker"
    echo "  restart         Restart Slack PM Worker"
    echo "  status          Show Slack PM status"
    echo "  sessions        Show active conversation sessions"
    echo "  test-message    Send test message to Slack"
    echo "  config          Show Slack PM configuration"
    echo ""
    exit 1
fi

cd "$PROJECT_DIR"

# ‰ªÆÊÉ≥Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ
if [[ ! "$AI_VENV_ACTIVE" == "1" ]]; then
    if [[ -f "venv/bin/activate" ]]; then
        source venv/bin/activate
        export AI_VENV_ACTIVE=1
    fi
fi

case "$COMMAND" in
    start)
        echo "üöÄ Starting Slack PM Worker..."

        # tmux„Çª„ÉÉ„Ç∑„Éß„É≥Á¢∫Ë™ç
        if tmux has-session -t slack_pm_worker 2>/dev/null; then
            echo "‚ö†Ô∏è Slack PM Worker already running in tmux session 'slack_pm_worker'"
            echo "Use 'ai-slack-pm stop' first or 'tmux attach -t slack_pm_worker' to view"
            exit 1
        fi

        # Ë®≠ÂÆöÁ¢∫Ë™ç
        if [[ ! -f ".env" ]] || ! grep -q "SLACK_BOT_TOKEN" .env; then
            echo "‚ùå Slack configuration missing!"
            echo "Please set SLACK_BOT_TOKEN and SLACK_APP_TOKEN in .env file"
            exit 1
        fi

        # tmux„Åß„ÉØ„Éº„Ç´„ÉºÈñãÂßã
        tmux new-session -d -s slack_pm_worker \
            "cd '$PROJECT_DIR' && python3 workers/slack_pm_worker.py"

        sleep 2

        if tmux has-session -t slack_pm_worker 2>/dev/null; then
            echo "‚úÖ Slack PM Worker started successfully"
            echo "üìã View logs: tmux attach -t slack_pm_worker"
            echo "üìä Check status: ai-slack-pm status"
        else
            echo "‚ùå Failed to start Slack PM Worker"
            echo "üìã Check logs: ai-logs"
        fi
        ;;

    stop)
        echo "üõë Stopping Slack PM Worker..."

        if tmux has-session -t slack_pm_worker 2>/dev/null; then
            tmux kill-session -t slack_pm_worker
            echo "‚úÖ Slack PM Worker stopped"
        else
            echo "‚ö†Ô∏è Slack PM Worker not running"
        fi
        ;;

    restart)
        echo "üîÑ Restarting Slack PM Worker..."

        # ÂÅúÊ≠¢
        if tmux has-session -t slack_pm_worker 2>/dev/null; then
            tmux kill-session -t slack_pm_worker
            echo "üõë Stopped Slack PM Worker"
            sleep 2
        fi

        # ÈñãÂßã
        tmux new-session -d -s slack_pm_worker \
            "cd '$PROJECT_DIR' && python3 workers/slack_pm_worker.py"

        sleep 2

        if tmux has-session -t slack_pm_worker 2>/dev/null; then
            echo "‚úÖ Slack PM Worker restarted successfully"
        else
            echo "‚ùå Failed to restart Slack PM Worker"
        fi
        ;;

    status)
        echo "üìä Slack PM Worker Status"
        echo "=" * 40

        # tmuxÁä∂ÊÖãÁ¢∫Ë™ç
        if tmux has-session -t slack_pm_worker 2>/dev/null; then
            echo "Process: üü¢ Running (tmux session: slack_pm_worker)"
        else
            echo "Process: üî¥ Not Running"
        fi

        # Ë©≥Á¥∞„Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó
        python3 -c "
import sys
sys.path.append('$PROJECT_DIR')
try:
    from libs.slack_pm_manager import SlackPMManager

    pm = SlackPMManager('$PROJECT_DIR/config/config.json')
    sessions = pm.get_active_sessions()

    print(f'Active Sessions: {len(sessions)}')

    if sessions:
        print()
        print('üìã Active Conversations:')
        for user_id, session_info in sessions.items():
            print(f'  üë§ {user_id}:')
            print(f'    State: {session_info[\"state\"]}')
            print(f'    Task: {session_info[\"current_task\"] or \"None\"}')
            print(f'    Messages: {session_info[\"messages_count\"]}')
            print(f'    Last Activity: {session_info[\"last_activity\"]}')
            print()
    else:
        print('No active conversations')

except Exception as e:
    print(f'‚ùå Failed to get detailed status: {e}')
"
        ;;

    sessions)
        echo "üí¨ Active Slack PM Sessions"
        echo "=" * 50

        python3 -c "
import sys
import json
sys.path.append('$PROJECT_DIR')
try:
    from libs.slack_pm_manager import SlackPMManager

    pm = SlackPMManager('$PROJECT_DIR/config/config.json')
    sessions = pm.get_active_sessions()

    if not sessions:
        print('No active sessions')
    else:
        for user_id, session_info in sessions.items():
            print(f'üë§ User: {user_id}')
            print(f'   Session ID: {session_info[\"session_id\"]}')
            print(f'   State: {session_info[\"state\"]}')
            print(f'   Current Task: {session_info[\"current_task\"] or \"None\"}')
            print(f'   Messages: {session_info[\"messages_count\"]}')
            print(f'   Last Activity: {session_info[\"last_activity\"]}')
            print('-' * 40)

except Exception as e:
    print(f'‚ùå Error: {e}')
"
        ;;

    test-message)
        echo "üì§ Sending test message to Slack..."

        python3 -c "
import sys
sys.path.append('$PROJECT_DIR')
try:
    from libs.slack_notifier import SlackNotifier

    notifier = SlackNotifier()
    success = notifier.send_message('ü§ñ Slack PM Worker „ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏ - ' + str(__import__('datetime').datetime.now()))

    if success:
        print('‚úÖ Test message sent successfully')
    else:
        print('‚ùå Failed to send test message')

except Exception as e:
    print(f'‚ùå Error: {e}')
"
        ;;

    config)
        echo "‚öôÔ∏è Slack PM Configuration"
        echo "=" * 40

        if [[ -f ".env" ]]; then
            echo "üîê Environment Variables:"
            echo "  SLACK_BOT_TOKEN: $(grep SLACK_BOT_TOKEN .env | cut -d'=' -f2 | sed 's/.*/.../g')"
            echo "  SLACK_APP_TOKEN: $(grep SLACK_APP_TOKEN .env | cut -d'=' -f2 | sed 's/.*/.../g')"
            echo "  SLACK_CHANNEL: $(grep SLACK_CHANNEL .env | cut -d'=' -f2 || echo 'Not set')"
        else
            echo "‚ùå .env file not found"
        fi

        echo ""
        echo "üìã Configuration File:"
        if [[ -f "config/config.json" ]]; then
            python3 -c "
import json
try:
    with open('config/config.json', 'r') as f:
        config = json.load(f)
        slack_config = config.get('slack_pm', {})

        print(f'  Response Delay: {slack_config.get(\"slack\", {}).get(\"response_delay\", \"Not set\")}s')
        print(f'  Session Timeout: {slack_config.get(\"pm_settings\", {}).get(\"session_timeout_hours\", \"Not set\")}h')
        print(f'  Auto Start Tasks: {slack_config.get(\"pm_settings\", {}).get(\"auto_start_tasks\", \"Not set\")}')
        print(f'  Require Approval: {slack_config.get(\"pm_settings\", {}).get(\"require_approval\", \"Not set\")}')

except Exception as e:
    print(f'‚ùå Error reading config: {e}')
"
        else
            echo "‚ùå config/config.json not found"
        fi
        ;;

    *)
        echo "‚ùå Unknown command: $COMMAND"
        echo "Use 'ai-slack-pm' without arguments to see usage"
        exit 1
        ;;
esac
