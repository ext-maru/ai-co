name: 🔍 PR品質チェック

on:
  pull_request:
    types: [opened, synchronize]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # PR自動ラベリング
  auto-labeling:
    name: 🏷️ Auto Labeling
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🏷️ Apply Labels
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml

  # 4賢者レビュー要請
  four-sages-review:
    name: 🧙‍♂️ Four Sages Review Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📝 Request Review
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            let reviewMessage = '## 🏛️ エルダーズギルド PRレビュー要請\n\n';
            let requiredSages = new Set();
            
            // ファイルタイプに基づいて賢者を選定
            for (const file of files.data) {
              if (file.filename.includes('knowledge') || file.filename.includes('.md')) {
                requiredSages.add('📚 Knowledge Sage');
              }
              if (file.filename.includes('task') || file.filename.includes('workflow')) {
                requiredSages.add('📋 Task Sage');
              }
              if (file.filename.includes('test') || file.filename.includes('.spec.')) {
                requiredSages.add('🚨 Incident Sage');
              }
              if (file.filename.includes('search') || file.filename.includes('rag')) {
                requiredSages.add('🔍 RAG Sage');
              }
            }
            
            if (requiredSages.size === 0) {
              requiredSages = new Set(['📚 Knowledge Sage', '📋 Task Sage', '🚨 Incident Sage', '🔍 RAG Sage']);
            }
            
            reviewMessage += '### レビュー担当賢者\n';
            for (const sage of requiredSages) {
              reviewMessage += `- ${sage}\n`;
            }
            
            reviewMessage += '\n### レビューチェックリスト\n';
            reviewMessage += '- [ ] コード品質基準を満たしている\n';
            reviewMessage += '- [ ] テストカバレッジ90%以上\n';
            reviewMessage += '- [ ] エルダーズギルド命名規則遵守\n';
            reviewMessage += '- [ ] ドキュメント更新済み\n';
            reviewMessage += '- [ ] E2Eテスト追加（必要な場合）\n';
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: reviewMessage
            });

  # コマンドハンドラー
  command-handler:
    name: 🤖 Command Handler
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/elder')
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔧 Process Command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment;
            const command = comment.body.trim();
            
            // /elder test - テスト実行
            if (command === '/elder test') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🧪 テストを実行します...'
              });
              
              // テスト実行ワークフローをトリガー
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'quality-gate.yml',
                ref: 'main'
              });
            }
            
            // /elder approve - 賢者承認
            else if (command.startsWith('/elder approve')) {
              const sage = command.split(' ')[2];
              let approvalMessage = '';
              
              switch(sage) {
                case 'knowledge':
                  approvalMessage = '📚 Knowledge Sage が承認しました';
                  break;
                case 'task':
                  approvalMessage = '📋 Task Sage が承認しました';
                  break;
                case 'incident':
                  approvalMessage = '🚨 Incident Sage が承認しました';
                  break;
                case 'rag':
                  approvalMessage = '🔍 RAG Sage が承認しました';
                  break;
                default:
                  approvalMessage = '❌ 無効な賢者名です';
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: approvalMessage
              });
            }
            
            // /elder council - 評議会招集
            else if (command === '/elder council') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '🏛️ エルダー評議会を招集します...\n\n全賢者の承認が必要です。'
              });
            }

  # PR サイズチェック
  pr-size-check:
    name: 📏 PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📊 Check PR Size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { additions, deletions } = pr;
            const totalChanges = additions + deletions;
            
            let sizeLabel = '';
            let sizeEmoji = '';
            
            if (totalChanges < 10) {
              sizeLabel = 'size/XS';
              sizeEmoji = '🟢';
            } else if (totalChanges < 50) {
              sizeLabel = 'size/S';
              sizeEmoji = '🟢';
            } else if (totalChanges < 200) {
              sizeLabel = 'size/M';
              sizeEmoji = '🟡';
            } else if (totalChanges < 500) {
              sizeLabel = 'size/L';
              sizeEmoji = '🟠';
            } else {
              sizeLabel = 'size/XL';
              sizeEmoji = '🔴';
            }
            
            // ラベル追加
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [sizeLabel]
            });
            
            // コメント追加
            if (totalChanges > 500) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `${sizeEmoji} **PR サイズ警告**\n\nこのPRは ${totalChanges} 行の変更を含んでいます。\nエルダーズギルドのベストプラクティスでは、PRは500行以下に保つことを推奨しています。\n\n可能であれば、複数の小さなPRに分割することを検討してください。`
              });
            }

# 🧙‍♂️ Four Sages評価
# 
# ✅ Knowledge Sage: PR自動分析・ラベリング
# ✅ Task Sage: 効率的なレビュープロセス
# ✅ Incident Sage: サイズチェック・品質警告
# ✅ RAG Sage: コマンドベース操作
# 
# PR機能:
# - 自動ラベリング
# - 4賢者レビュー要請
# - コマンドハンドラー
# - PRサイズチェック
# - レビューチェックリスト