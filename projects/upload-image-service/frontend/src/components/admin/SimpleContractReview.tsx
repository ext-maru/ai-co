import React, { useState, useEffect } from 'react';\nimport './SimpleContractReview.css';\n\n// シンプルなステータス定義\nexport enum SimpleStatus {\n  NOT_UPLOADED = 'not_uploaded',     // アップしてない\n  NEEDS_REUPLOAD = 'needs_reupload', // NG出て再アップ必要\n  APPROVED = 'approved'              // OKでた\n}\n\ninterface ContractItem {\n  id: string;\n  user_name: string;\n  contract_type: 'individual' | 'corporate';\n  status: SimpleStatus;\n  created_at: string;\n  google_drive_folder_url?: string;\n  document_count: number;\n  required_document_count: number;\n}\n\ninterface SimpleContractReviewProps {\n  // 必要に応じてpropsを追加\n}\n\nexport const SimpleContractReview: React.FC<SimpleContractReviewProps> = () => {\n  const [contracts, setContracts] = useState<ContractItem[]>([]);\n  const [filterStatus, setFilterStatus] = useState<SimpleStatus | 'all'>('all');\n  const [loading, setLoading] = useState(false);\n\n  // サンプルデータ（実際はAPIから取得）\n  useEffect(() => {\n    const sampleData: ContractItem[] = [\n      {\n        id: '1',\n        user_name: '田中太郎',\n        contract_type: 'individual',\n        status: SimpleStatus.NOT_UPLOADED,\n        created_at: '2025-01-10T10:00:00Z',\n        google_drive_folder_url: 'https://drive.google.com/drive/folders/xxx',\n        document_count: 2,\n        required_document_count: 5\n      },\n      {\n        id: '2',\n        user_name: '株式会社ABC',\n        contract_type: 'corporate',\n        status: SimpleStatus.NEEDS_REUPLOAD,\n        created_at: '2025-01-09T15:30:00Z',\n        google_drive_folder_url: 'https://drive.google.com/drive/folders/yyy',\n        document_count: 8,\n        required_document_count: 8\n      },\n      {\n        id: '3',\n        user_name: '佐藤花子',\n        contract_type: 'individual',\n        status: SimpleStatus.APPROVED,\n        created_at: '2025-01-08T09:15:00Z',\n        google_drive_folder_url: 'https://drive.google.com/drive/folders/zzz',\n        document_count: 5,\n        required_document_count: 5\n      }\n    ];\n    setContracts(sampleData);\n  }, []);\n\n  const getStatusLabel = (status: SimpleStatus): string => {\n    switch (status) {\n      case SimpleStatus.NOT_UPLOADED:\n        return 'アップしてない';\n      case SimpleStatus.NEEDS_REUPLOAD:\n        return 'NG・再アップ必要';\n      case SimpleStatus.APPROVED:\n        return 'OK完了';\n      default:\n        return '不明';\n    }\n  };\n\n  const getStatusColor = (status: SimpleStatus): string => {\n    switch (status) {\n      case SimpleStatus.NOT_UPLOADED:\n        return 'status-not-uploaded';\n      case SimpleStatus.NEEDS_REUPLOAD:\n        return 'status-needs-reupload';\n      case SimpleStatus.APPROVED:\n        return 'status-approved';\n      default:\n        return '';\n    }\n  };\n\n  const getContractTypeLabel = (type: string): string => {\n    return type === 'individual' ? '個人' : '法人';\n  };\n\n  const handleStatusChange = async (contractId: string, newStatus: SimpleStatus) => {\n    setLoading(true);\n    try {\n      // TODO: APIコール実装\n      // await updateContractStatus(contractId, newStatus);\n      \n      setContracts(prev => \n        prev.map(contract => \n          contract.id === contractId \n            ? { ...contract, status: newStatus }\n            : contract\n        )\n      );\n      \n      console.log(`Contract ${contractId} status updated to ${newStatus}`);\n    } catch (error) {\n      console.error('ステータス更新エラー:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const openGoogleDrive = (url?: string) => {\n    if (url) {\n      window.open(url, '_blank', 'noopener,noreferrer');\n    }\n  };\n\n  const filteredContracts = contracts.filter(contract => {\n    if (filterStatus === 'all') return true;\n    return contract.status === filterStatus;\n  });\n\n  // 作業中案件（アップしてない、またはNG）のカウント\n  const pendingCount = contracts.filter(c => \n    c.status === SimpleStatus.NOT_UPLOADED || c.status === SimpleStatus.NEEDS_REUPLOAD\n  ).length;\n\n  return (\n    <div className=\"simple-contract-review\">\n      <div className=\"review-header\">\n        <h1>📋 契約書類チェック</h1>\n        <div className=\"quick-stats\">\n          <div className=\"stat-item pending\">\n            <span className=\"count\">{pendingCount}</span>\n            <span className=\"label\">作業中</span>\n          </div>\n          <div className=\"stat-item total\">\n            <span className=\"count\">{contracts.length}</span>\n            <span className=\"label\">総件数</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"review-controls\">\n        <div className=\"filter-section\">\n          <label>絞り込み:</label>\n          <select \n            value={filterStatus} \n            onChange={(e) => setFilterStatus(e.target.value as SimpleStatus | 'all')}\n            className=\"status-filter\"\n          >\n            <option value=\"all\">すべて</option>\n            <option value={SimpleStatus.NOT_UPLOADED}>アップしてない</option>\n            <option value={SimpleStatus.NEEDS_REUPLOAD}>NG・再アップ必要</option>\n            <option value={SimpleStatus.APPROVED}>OK完了</option>\n          </select>\n        </div>\n        \n        <button \n          className=\"btn-quick-search\"\n          onClick={() => setFilterStatus(SimpleStatus.NOT_UPLOADED)}\n        >\n          🔍 作業中案件のみ表示\n        </button>\n      </div>\n\n      <div className=\"contracts-grid\">\n        {filteredContracts.map(contract => (\n          <div key={contract.id} className=\"contract-card\">\n            <div className=\"card-header\">\n              <div className=\"user-info\">\n                <h3>{contract.user_name}</h3>\n                <span className=\"contract-type\">\n                  {getContractTypeLabel(contract.contract_type)}\n                </span>\n              </div>\n              <div className={`status-badge ${getStatusColor(contract.status)}`}>\n                {getStatusLabel(contract.status)}\n              </div>\n            </div>\n\n            <div className=\"card-body\">\n              <div className=\"progress-info\">\n                <span>書類: {contract.document_count}/{contract.required_document_count}</span>\n                <div className=\"progress-bar\">\n                  <div \n                    className=\"progress-fill\"\n                    style={{ \n                      width: `${(contract.document_count / contract.required_document_count) * 100}%` \n                    }}\n                  />\n                </div>\n              </div>\n\n              <div className=\"created-date\">\n                作成: {new Date(contract.created_at).toLocaleDateString('ja-JP')}\n              </div>\n\n              {contract.google_drive_folder_url && (\n                <button \n                  className=\"btn-drive\"\n                  onClick={() => openGoogleDrive(contract.google_drive_folder_url)}\n                >\n                  📁 Google Driveで確認\n                </button>\n              )}\n            </div>\n\n            <div className=\"card-actions\">\n              <div className=\"status-buttons\">\n                <button \n                  className={`btn-status ok ${\n                    contract.status === SimpleStatus.APPROVED ? 'active' : ''\n                  }`}\n                  onClick={() => handleStatusChange(contract.id, SimpleStatus.APPROVED)}\n                  disabled={loading}\n                >\n                  ✅ OK\n                </button>\n                <button \n                  className={`btn-status ng ${\n                    contract.status === SimpleStatus.NEEDS_REUPLOAD ? 'active' : ''\n                  }`}\n                  onClick={() => handleStatusChange(contract.id, SimpleStatus.NEEDS_REUPLOAD)}\n                  disabled={loading}\n                >\n                  ❌ NG\n                </button>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {filteredContracts.length === 0 && (\n        <div className=\"empty-state\">\n          <p>条件に合う案件がありません</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimpleContractReview;"