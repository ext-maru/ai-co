#!/bin/bash
#
# AI Company Command Installation Tool
# 新しい命名規則のコマンドをシステムにインストール
#
# Usage:
#   ai-command-install setup          # 初期セットアップ
#   ai-command-install aliases        # エイリアス設定
#   ai-command-install completion     # シェル補完設定
#   ai-command-install symlinks       # システムワイドシンボリックリンク
#   ai-command-install all            # 全ての設定を実行
#   ai-command-install uninstall      # アンインストール
#

set -e

PROJECT_ROOT="/home/aicompany/ai_co"
INSTALL_DIR="/usr/local/bin"
COMPLETION_DIR="/etc/bash_completion.d"
ALIAS_FILE="$HOME/.ai_company_aliases"

# Color codes
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
blue='\033[0;34m'
purple='\033[0;35m'
cyan='\033[0;36m'
nc='\033[0m'

log_info() {
    echo -e "${green}[INFO]${nc} $1"
}

log_warning() {
    echo -e "${yellow}[WARNING]${nc} $1"
}

log_error() {
    echo -e "${red}[ERROR]${nc} $1"
}

log_debug() {
    echo -e "${blue}[DEBUG]${nc} $1"
}

# Check if running as root for system-wide installation
check_permissions() {
    local install_type="$1"

    if [ "$install_type" = "system" ] && [ "$EUID" -ne 0 ]; then
        log_error "System-wide installation requires root privileges"
        echo "Run with: sudo $0 $2"
        exit 1
    fi
}

# Setup initial AI Company command environment
setup_environment() {
    log_info "🔧 Setting up AI Company command environment"

    # Create user-level directories
    mkdir -p "$HOME/.ai_company"
    mkdir -p "$HOME/.ai_company/bin"
    mkdir -p "$HOME/.ai_company/completions"

    # Add AI Company bin to PATH if not already there
    local path_entry="export PATH=\"\$HOME/.ai_company/bin:\$PATH\""

    if ! grep -q ".ai_company/bin" "$HOME/.bashrc" 2>/dev/null; then
        echo "" >> "$HOME/.bashrc"
        echo "# AI Company Commands" >> "$HOME/.bashrc"
        echo "$path_entry" >> "$HOME/.bashrc"
        log_info "✅ Added AI Company bin to PATH in ~/.bashrc"
    else
        log_debug "AI Company bin already in PATH"
    fi

    # Add completion loading
    local completion_entry="[ -f \"\$HOME/.ai_company/completions/ai-completion.bash\" ] && source \"\$HOME/.ai_company/completions/ai-completion.bash\""

    if ! grep -q "ai-completion.bash" "$HOME/.bashrc" 2>/dev/null; then
        echo "$completion_entry" >> "$HOME/.bashrc"
        log_info "✅ Added completion loading to ~/.bashrc"
    else
        log_debug "Completion loading already configured"
    fi

    log_info "✅ Environment setup complete"
    echo "Note: Run 'source ~/.bashrc' or restart terminal to activate changes"
}

# Install command aliases
install_aliases() {
    log_info "🔗 Installing AI Company command aliases"

    # Create comprehensive alias file
    cat > "$ALIAS_FILE" << 'EOF'
#!/bin/bash
# AI Company Command Aliases
# Automatically generated by ai-command-install

# Source the main aliases file
if [ -f "/home/aicompany/ai_co/ai_commands/aliases.sh" ]; then
    source "/home/aicompany/ai_co/ai_commands/aliases.sh"
fi

# System commands (most common)
alias ai-system-start='python3 /home/aicompany/ai_co/commands/ai_start.py'
alias ai-system-stop='python3 /home/aicompany/ai_co/commands/ai_stop.py'
alias ai-system-status='python3 /home/aicompany/ai_co/commands/ai_status.py'
alias ai-system-health='python3 /home/aicompany/ai_co/commands/ai_health.py'
alias ai-system-monitor='python3 /home/aicompany/ai_co/commands/ai_monitor.py'
alias ai-system-backup='python3 /home/aicompany/ai_co/commands/ai_backup.py'
alias ai-system-config='python3 /home/aicompany/ai_co/commands/ai_config.py'
alias ai-system-update='python3 /home/aicompany/ai_co/commands/ai_update.py'
alias ai-system-version='python3 /home/aicompany/ai_co/commands/ai_version.py'

# Task commands
alias ai-task-send='python3 /home/aicompany/ai_co/commands/ai_send.py'
alias ai-task-list='python3 /home/aicompany/ai_co/commands/ai_tasks.py'
alias ai-task-info='python3 /home/aicompany/ai_co/commands/ai_task_info.py'
alias ai-task-retry='python3 /home/aicompany/ai_co/commands/ai_task_retry.py'
alias ai-task-cancel='python3 /home/aicompany/ai_co/commands/ai_task_cancel.py'
alias ai-task-queue='python3 /home/aicompany/ai_co/commands/ai_queue.py'
alias ai-task-queue-clear='python3 /home/aicompany/ai_co/commands/ai_queue_clear.py'

# Worker commands
alias ai-worker-list='python3 /home/aicompany/ai_co/commands/ai_workers.py'
alias ai-worker-add='python3 /home/aicompany/ai_co/commands/ai_worker_add.py'
alias ai-worker-remove='python3 /home/aicompany/ai_co/commands/ai_worker_rm.py'
alias ai-worker-restart='python3 /home/aicompany/ai_co/commands/ai_worker_restart.py'
alias ai-worker-recover='python3 /home/aicompany/ai_co/commands/ai_worker_recovery.py'
alias ai-worker-comm='python3 /home/aicompany/ai_co/commands/ai_worker_comm.py'
alias ai-worker-scale='python3 /home/aicompany/ai_co/commands/ai_worker_scale.py'

# Development commands
alias ai-dev-test='python3 /home/aicompany/ai_co/commands/ai_test.py'
alias ai-dev-debug='python3 /home/aicompany/ai_co/commands/ai_debug.py'
alias ai-dev-logs='python3 /home/aicompany/ai_co/commands/ai_logs.py'
alias ai-dev-clean='python3 /home/aicompany/ai_co/commands/ai_clean.py'

# Knowledge commands
alias ai-knowledge-search='python3 /home/aicompany/ai_co/commands/ai_knowledge.py'
alias ai-rag-search='python3 /home/aicompany/ai_co/commands/ai_rag_search.py'
alias ai-rag-manage='python3 /home/aicompany/ai_co/commands/ai_rag.py'

# Elder Council commands
alias ai-elder-council='python3 /home/aicompany/ai_co/commands/ai_elder_council.py'
alias ai-elder-pm='python3 /home/aicompany/ai_co/commands/ai_elder_pm.py'
alias ai-elder-proactive='python3 /home/aicompany/ai_co/commands/ai_elder_proactive.py'
alias ai-elder-grand='python3 /home/aicompany/ai_co/commands/ai_grand_elder.py'

# Incident management
alias ai-incident-knights='python3 /home/aicompany/ai_co/commands/ai_incident_knights.py'

# Documentation commands
alias ai-docs-generate='python3 /home/aicompany/ai_co/commands/ai_document.py'
alias ai-analytics-report='python3 /home/aicompany/ai_co/commands/ai_report.py'
alias ai-analytics-stats='python3 /home/aicompany/ai_co/commands/ai_stats.py'
alias ai-analytics-metrics='python3 /home/aicompany/ai_co/commands/ai_metrics.py'

# Integration commands
alias ai-integration-docker='python3 /home/aicompany/ai_co/commands/ai_docker.py'
alias ai-integration-shell='python3 /home/aicompany/ai_co/commands/ai_shell.py'

# Interface commands
alias ai-ui-web='python3 /home/aicompany/ai_co/commands/ai_webui.py'
alias ai-ui-help='python3 /home/aicompany/ai_co/commands/ai_help.py'

# Evolution commands
alias ai-evolution-manage='python3 /home/aicompany/ai_co/commands/ai_evolve.py'
alias ai-evolution-daily='python3 /home/aicompany/ai_co/commands/ai_evolve_daily.py'
alias ai-evolution-test='python3 /home/aicompany/ai_co/commands/ai_evolve_test.py'

# Legacy backward compatibility
alias ai-send='ai-task-send'
alias ai-start='ai-system-start'
alias ai-stop='ai-system-stop'
alias ai-status='ai-system-status'
alias ai-workers='ai-worker-list'
alias ai-logs='ai-dev-logs'
alias ai-test='ai-dev-test'
alias ai-help='ai-ui-help'

# Ultra-short convenience aliases
alias ais='ai-system-status'
alias ait='ai-task-send'
alias aiw='ai-worker-list'
alias ail='ai-dev-logs'
alias aih='ai-ui-help'
alias aie='ai-elder-council'

echo "🚀 AI Company commands loaded! Use 'ai-ui-help' for assistance."
EOF

    # Add alias loading to bashrc
    local alias_entry="[ -f \"$ALIAS_FILE\" ] && source \"$ALIAS_FILE\""

    if ! grep -q ".ai_company_aliases" "$HOME/.bashrc" 2>/dev/null; then
        echo "" >> "$HOME/.bashrc"
        echo "# AI Company Aliases" >> "$HOME/.bashrc"
        echo "$alias_entry" >> "$HOME/.bashrc"
        log_info "✅ Added alias loading to ~/.bashrc"
    else
        log_debug "Alias loading already configured"
    fi

    log_info "✅ Aliases installed: $ALIAS_FILE"
}

# Install shell completion
install_completion() {
    log_info "🔧 Installing shell completion"

    local user_completion="$HOME/.ai_company/completions/ai-completion.bash"

    # Create user completion file
    cat > "$user_completion" << 'EOF'
#!/bin/bash
# AI Company Command Completion
# Enhanced tab completion for unified command structure

_ai_company_completion() {
    local cur prev words cword
    _init_completion || return

    # Define domains and their actions
    local domains="system task worker knowledge rag elder incident dev api integration ui docs analytics evolution"

    # Domain-specific actions
    case "$prev" in
        ai-system-*)
            COMPREPLY=($(compgen -W "start stop status health monitor backup update config restart reset version" -- "$cur"))
            ;;
        ai-task-*)
            COMPREPLY=($(compgen -W "send list info retry cancel queue queue-clear simulate priority schedule" -- "$cur"))
            ;;
        ai-worker-*)
            COMPREPLY=($(compgen -W "list add remove restart scale recover monitor comm health stats" -- "$cur"))
            ;;
        ai-knowledge-*)
            COMPREPLY=($(compgen -W "search update export import clean backup stats learn" -- "$cur"))
            ;;
        ai-rag-*)
            COMPREPLY=($(compgen -W "search index manage update wizard test optimize" -- "$cur"))
            ;;
        ai-elder-*)
            COMPREPLY=($(compgen -W "council pm compliance proactive summon consult decision grand" -- "$cur"))
            ;;
        ai-incident-*)
            COMPREPLY=($(compgen -W "knights auto report analyze recover prevent" -- "$cur"))
            ;;
        ai-dev-*)
            COMPREPLY=($(compgen -W "test tdd coverage codegen debug logs clean lint format" -- "$cur"))
            ;;
        ai-api-*)
            COMPREPLY=($(compgen -W "status health reset docs test monitor" -- "$cur"))
            ;;
        ai-integration-*)
            COMPREPLY=($(compgen -W "slack git docker mcp shell test" -- "$cur"))
            ;;
        ai-ui-*)
            COMPREPLY=($(compgen -W "web dashboard cli help config" -- "$cur"))
            ;;
        ai-docs-*)
            COMPREPLY=($(compgen -W "generate export update serve validate" -- "$cur"))
            ;;
        ai-analytics-*)
            COMPREPLY=($(compgen -W "report metrics stats trend export" -- "$cur"))
            ;;
        ai-evolution-*)
            COMPREPLY=($(compgen -W "manage daily test wizard plan" -- "$cur"))
            ;;
        *)
            # Complete domain or legacy commands
            if [[ $cur == ai-* ]]; then
                local domain=$(echo "$cur" | cut -d'-' -f2)
                if [[ -n "$domain" && "$domain" != "$cur" ]]; then
                    # Complete action for domain
                    case "$domain" in
                        system)
                            COMPREPLY=($(compgen -W "$(echo ai-system-{start,stop,status,health,monitor,backup,update,config,restart,reset,version})" -- "$cur"))
                            ;;
                        task)
                            COMPREPLY=($(compgen -W "$(echo ai-task-{send,list,info,retry,cancel,queue,queue-clear,simulate,priority,schedule})" -- "$cur"))
                            ;;
                        worker)
                            COMPREPLY=($(compgen -W "$(echo ai-worker-{list,add,remove,restart,scale,recover,monitor,comm,health,stats})" -- "$cur"))
                            ;;
                        knowledge)
                            COMPREPLY=($(compgen -W "$(echo ai-knowledge-{search,update,export,import,clean,backup,stats,learn})" -- "$cur"))
                            ;;
                        rag)
                            COMPREPLY=($(compgen -W "$(echo ai-rag-{search,index,manage,update,wizard,test,optimize})" -- "$cur"))
                            ;;
                        elder)
                            COMPREPLY=($(compgen -W "$(echo ai-elder-{council,pm,compliance,proactive,summon,consult,decision,grand})" -- "$cur"))
                            ;;
                        incident)
                            COMPREPLY=($(compgen -W "$(echo ai-incident-{knights,auto,report,analyze,recover,prevent})" -- "$cur"))
                            ;;
                        dev)
                            COMPREPLY=($(compgen -W "$(echo ai-dev-{test,tdd,coverage,codegen,debug,logs,clean,lint,format})" -- "$cur"))
                            ;;
                        *)
                            COMPREPLY=($(compgen -W "$(printf 'ai-%s-' $domains)" -- "$cur"))
                            ;;
                    esac
                else
                    # Complete domain
                    COMPREPLY=($(compgen -W "$(printf 'ai-%s-' $domains)" -- "$cur"))
                fi
            else
                # Complete with ai- prefix or legacy commands
                COMPREPLY=($(compgen -W "ai-system- ai-task- ai-worker- ai-knowledge- ai-rag- ai-elder- ai-incident- ai-dev- ai-ui- ai-docs- ai-analytics- ai-evolution- ais ait aiw ail aih aie" -- "$cur"))
            fi
            ;;
    esac
}

# Register completion
complete -F _ai_company_completion ai-system- ai-task- ai-worker- ai-knowledge- ai-rag- ai-elder- ai-incident- ai-dev- ai-api- ai-integration- ai-ui- ai-docs- ai-analytics- ai-evolution-
complete -F _ai_company_completion ai-send ai-start ai-stop ai-status ai-workers ai-logs ai-test ai-help
complete -F _ai_company_completion ais ait aiw ail aih aie

EOF

    log_info "✅ User completion installed: $user_completion"

    # Install system-wide completion if running as root
    if [ "$EUID" -eq 0 ]; then
        local system_completion="$COMPLETION_DIR/ai-company"
        cp "$user_completion" "$system_completion"
        log_info "✅ System completion installed: $system_completion"
    else
        log_debug "Skipping system-wide completion (not root)"
    fi
}

# Create symbolic links for global access
install_symlinks() {
    check_permissions "system" "symlinks"

    log_info "🔗 Installing system-wide symbolic links"

    # Core commands that should be globally accessible
    local core_commands=(
        "ai-system-start:ai_start.py"
        "ai-system-stop:ai_stop.py"
        "ai-system-status:ai_status.py"
        "ai-task-send:ai_send.py"
        "ai-worker-list:ai_workers.py"
        "ai-dev-logs:ai_logs.py"
        "ai-ui-help:ai_help.py"
    )

    for mapping in "${core_commands[@]}"; do
        local symlink_name="${mapping%:*}"
        local target_file="${mapping#*:}"
        local target_path="$PROJECT_ROOT/commands/$target_file"
        local symlink_path="$INSTALL_DIR/$symlink_name"

        if [ -f "$target_path" ]; then
            # Create wrapper script instead of direct symlink for Python files
            cat > "$symlink_path" << EOF
#!/bin/bash
# AI Company Command: $symlink_name
# Auto-generated by ai-command-install
exec python3 "$target_path" "\$@"
EOF
            chmod +x "$symlink_path"
            log_info "✅ Created: $symlink_path"
        else
            log_warning "⚠️ Target not found: $target_path"
        fi
    done

    # Create short aliases
    local short_aliases=(
        "ais:ai-system-status"
        "ait:ai-task-send"
        "aiw:ai-worker-list"
        "ail:ai-dev-logs"
        "aih:ai-ui-help"
    )

    for mapping in "${short_aliases[@]}"; do
        local alias_name="${mapping%:*}"
        local target_command="${mapping#*:}"
        local alias_path="$INSTALL_DIR/$alias_name"

        cat > "$alias_path" << EOF
#!/bin/bash
# AI Company Short Alias: $alias_name -> $target_command
exec "$INSTALL_DIR/$target_command" "\$@"
EOF
        chmod +x "$alias_path"
        log_info "✅ Created alias: $alias_path"
    done

    log_info "✅ System-wide links installed"
}

# Install everything
install_all() {
    log_info "🚀 Installing complete AI Company command system"

    setup_environment
    install_aliases
    install_completion

    if [ "$EUID" -eq 0 ]; then
        install_symlinks
    else
        log_warning "⚠️ Skipping system-wide symlinks (not root)"
        log_info "Run 'sudo ai-command-install symlinks' for global commands"
    fi

    log_info "✅ Installation complete!"
    echo ""
    echo "🎉 AI Company commands are now available:"
    echo "  • Standard: ai-system-start, ai-task-send, ai-worker-list"
    echo "  • Legacy: ai-start, ai-send, ai-workers (via aliases)"
    echo "  • Short: ais, ait, aiw, ail, aih"
    echo ""
    echo "📋 Next steps:"
    echo "  1. source ~/.bashrc    # Activate in current shell"
    echo "  2. ai-system-status    # Test installation"
    echo "  3. ai-ui-help          # Get help"
    echo ""
    echo "🔧 Migration tools:"
    echo "  • ai-command-migrate   # Migrate to new naming"
    echo "  • ai-command-validate  # Validate commands"
}

# Uninstall AI Company commands
uninstall() {
    log_warning "🗑️ Uninstalling AI Company command system"

    # Remove alias file
    if [ -f "$ALIAS_FILE" ]; then
        rm "$ALIAS_FILE"
        log_info "Removed: $ALIAS_FILE"
    fi

    # Remove user directory
    if [ -d "$HOME/.ai_company" ]; then
        rm -rf "$HOME/.ai_company"
        log_info "Removed: $HOME/.ai_company"
    fi

    # Remove from bashrc
    if grep -q "AI Company" "$HOME/.bashrc" 2>/dev/null; then
        # Create backup
        cp "$HOME/.bashrc" "$HOME/.bashrc.ai_company_backup"

        # Remove AI Company sections
        sed -i '/# AI Company Commands/,+1d' "$HOME/.bashrc"
        sed -i '/# AI Company Aliases/,+1d' "$HOME/.bashrc"
        sed -i '/ai-completion.bash/d' "$HOME/.bashrc"
        sed -i '/.ai_company_aliases/d' "$HOME/.bashrc"

        log_info "Removed AI Company entries from ~/.bashrc"
        log_info "Backup saved: ~/.bashrc.ai_company_backup"
    fi

    # Remove system-wide files (if root)
    if [ "$EUID" -eq 0 ]; then
        # Remove symlinks
        for cmd in ai-system-start ai-system-stop ai-system-status ai-task-send ai-worker-list ai-dev-logs ai-ui-help ais ait aiw ail aih; do
            if [ -f "$INSTALL_DIR/$cmd" ]; then
                rm "$INSTALL_DIR/$cmd"
                log_info "Removed: $INSTALL_DIR/$cmd"
            fi
        done

        # Remove completion
        if [ -f "$COMPLETION_DIR/ai-company" ]; then
            rm "$COMPLETION_DIR/ai-company"
            log_info "Removed: $COMPLETION_DIR/ai-company"
        fi
    fi

    log_info "✅ Uninstallation complete"
    echo "Note: Restart terminal or run 'source ~/.bashrc' to complete removal"
}

# Show installation status
show_status() {
    echo -e "${cyan}AI Company Command Installation Status${nc}"
    echo "======================================"
    echo ""

    # Check environment
    echo -e "${blue}📁 Environment:${nc}"
    [ -d "$HOME/.ai_company" ] && echo "  ✅ User directory exists" || echo "  ❌ User directory missing"
    grep -q ".ai_company/bin" "$HOME/.bashrc" 2>/dev/null && echo "  ✅ PATH configured" || echo "  ❌ PATH not configured"

    # Check aliases
    echo ""
    echo -e "${blue}🔗 Aliases:${nc}"
    [ -f "$ALIAS_FILE" ] && echo "  ✅ Alias file exists" || echo "  ❌ Alias file missing"
    grep -q ".ai_company_aliases" "$HOME/.bashrc" 2>/dev/null && echo "  ✅ Aliases loaded in bashrc" || echo "  ❌ Aliases not loaded"

    # Check completion
    echo ""
    echo -e "${blue}🔧 Completion:${nc}"
    [ -f "$HOME/.ai_company/completions/ai-completion.bash" ] && echo "  ✅ User completion exists" || echo "  ❌ User completion missing"
    [ -f "$COMPLETION_DIR/ai-company" ] && echo "  ✅ System completion exists" || echo "  ❌ System completion missing"

    # Check system links
    echo ""
    echo -e "${blue}🌐 System Links:${nc}"
    local system_commands=("ai-system-status" "ai-task-send" "ais" "ait")
    for cmd in "${system_commands[@]}"; do
        [ -x "$INSTALL_DIR/$cmd" ] && echo "  ✅ $cmd available" || echo "  ❌ $cmd missing"
    done

    # Test command availability
    echo ""
    echo -e "${blue}🧪 Command Test:${nc}"

    # Source aliases temporarily for testing
    if [ -f "$ALIAS_FILE" ]; then
        source "$ALIAS_FILE" 2>/dev/null
        type ai-system-status >/dev/null 2>&1 && echo "  ✅ ai-system-status works" || echo "  ❌ ai-system-status fails"
        type ais >/dev/null 2>&1 && echo "  ✅ ais shortcut works" || echo "  ❌ ais shortcut fails"
    else
        echo "  ❌ Cannot test (aliases not installed)"
    fi

    echo ""
    echo -e "${green}Installation Summary:${nc}"

    local components=0
    local installed=0

    # Count components
    components=$((components + 1))
    [ -d "$HOME/.ai_company" ] && installed=$((installed + 1))

    components=$((components + 1))
    [ -f "$ALIAS_FILE" ] && installed=$((installed + 1))

    components=$((components + 1))
    [ -f "$HOME/.ai_company/completions/ai-completion.bash" ] && installed=$((installed + 1))

    echo "Installed: $installed/$components components"
    echo "Status: $([ $installed -eq $components ] && echo "✅ Complete" || echo "⚠️ Partial")"
}

# Main execution
main() {
    case "${1:-}" in
        "setup")
            setup_environment
            ;;
        "aliases")
            install_aliases
            ;;
        "completion")
            install_completion
            ;;
        "symlinks")
            install_symlinks
            ;;
        "all")
            install_all
            ;;
        "uninstall")
            uninstall
            ;;
        "status")
            show_status
            ;;
        *)
            echo "AI Company Command Installation Tool"
            echo ""
            echo "Usage: $0 {setup|aliases|completion|symlinks|all|uninstall|status}"
            echo ""
            echo "Commands:"
            echo "  setup       Setup environment and PATH"
            echo "  aliases     Install command aliases"
            echo "  completion  Install shell completion"
            echo "  symlinks    Install system-wide symlinks (requires root)"
            echo "  all         Install everything"
            echo "  uninstall   Remove all installations"
            echo "  status      Show installation status"
            echo ""
            echo "Examples:"
            echo "  $0 all                     # Complete installation"
            echo "  sudo $0 symlinks          # Add global commands"
            echo "  $0 status                 # Check what's installed"
            echo ""
            echo "Quick start: $0 all"
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"
