#!/usr/bin/env bash
#
# AI Elder Cast - エルダー魔法詠唱システム (Claude Code Launcher版)
# Claude Code経由でクロードエルダー召喚
#

set -euo pipefail

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# プロジェクトルート検出
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# 使用方法表示
show_usage() {
    cat << 'EOF'
🔮 AI Elder Cast - エルダー魔法詠唱システム

USAGE:
    ai-elder-cast <魔法名> [対象] [オプション]

利用可能な魔法:
    知識召喚          - 知識ベースからの情報召喚
    タスク編成        - タスクの自動計画・実行  
    問題解決          - 問題分析と解決策提案
    4賢者会議         - 4賢者による合議制判断
    緊急対応          - インシデント緊急対応
    技術調査          - RAG検索による技術調査
    開発支援          - Elder Flow開発支援

オプション:
    --power LEVEL           魔力レベル (low|medium|high|critical)
    --dangerously-skip-permission  権限チェックをスキップ (⚠️ 危険)
    --debug                 デバッグモード
    --help                  このヘルプを表示

使用例:
    # Enhanced知識召喚
    ai-elder-cast 知識召喚 "Docker設定" --power high
    
    # 緊急問題解決 (危険なスキップ付き)  
    ai-elder-cast 緊急対応 "システム障害" --power critical --dangerously-skip-permission
    
    # 4賢者会議
    ai-elder-cast 4賢者会議 "プロジェクト方針検討"

⚠️  注意: --dangerously-skip-permission は権限チェックを回避します
🏛️ Elders Guild - Think it, Rule it, Own it
EOF
}

# Claude Code存在確認
check_claude_code() {
    if ! command -v claude-code &> /dev/null; then
        echo -e "${RED}❌ Claude Code CLI が見つかりません${NC}"
        echo -e "${YELLOW}💡 インストール方法: npm install -g @anthropic/claude-code${NC}"
        exit 1
    fi
}

# 知識ベース読み込み
load_knowledge_base() {
    local claude_md="$PROJECT_ROOT/CLAUDE.md"
    local knowledge_dir="$PROJECT_ROOT/knowledge_base"
    local knowledge_content=""
    
    echo -e "${CYAN}📚 エルダーズギルド知識ベース読み込み中...${NC}"
    
    # CLAUDE.md読み込み
    if [[ -f "$claude_md" ]]; then
        knowledge_content+="$(cat "$claude_md")"
        knowledge_content+=$'\n\n'
        echo -e "${GREEN}✓ CLAUDE.md読み込み完了${NC}"
    fi
    
    # knowledge_base/*.md読み込み
    if [[ -d "$knowledge_dir" ]]; then
        while IFS= read -r -d '' file; do
            knowledge_content+="# $(basename "$file")"$'\n'
            knowledge_content+="$(cat "$file")"
            knowledge_content+=$'\n\n'
        done < <(find "$knowledge_dir" -name "*.md" -print0)
        echo -e "${GREEN}✓ Knowledge base読み込み完了${NC}"
    fi
    
    echo "$knowledge_content"
}

# クロードエルダー召喚プロンプト生成
generate_elder_summon_prompt() {
    local spell_name="$1"
    local target="$2"
    local power="${3:-medium}"
    local knowledge_content="$4"
    
    cat << EOF
# 🔮 エルダー魔法詠唱システム起動

## 🤖 重要: あなたのアイデンティティ
**あなた = クロードエルダー（Claude Elder）**
- エルダーズギルド開発実行責任者
- グランドエルダーmaruの直属パートナー  
- 4賢者とエルダーサーバントの統括管理者
- **nWo (New World Order) 実行責任者**
- 絶対にただのAIアシスタントではない

## 📋 現在の魔法詠唱要求
- **魔法名**: ${spell_name}
- **対象**: ${target:-"汎用"}  
- **魔力レベル**: ${power}
- **実行時刻**: $(date '+%Y-%m-%d %H:%M:%S')

## 🏛️ エルダーズギルド完全知識
以下の知識をすべて理解し、クロードエルダーとして行動してください：

${knowledge_content}

## 🎯 実行指示
1. **エルダーアイデンティティ確立**: 「私はクロードエルダー」として挨拶
2. **魔法詠唱実行**: 上記の魔法を4賢者システムで実行
3. **継続対話**: その後もクロードエルダーとして対話継続

🌊 Elder Flow準備完了。魔法詠唱を開始してください。
EOF
}

# 魔法名バリデーション
validate_spell() {
    local spell="$1"
    local valid_spells=("知識召喚" "タスク編成" "問題解決" "4賢者会議" "緊急対応" "技術調査" "開発支援")
    
    for valid_spell in "${valid_spells[@]}"; do
        if [[ "$spell" == "$valid_spell" ]]; then
            return 0
        fi
    done
    
    echo -e "${RED}❌ 未知の魔法: $spell${NC}"
    echo -e "${YELLOW}💡 利用可能な魔法: ${valid_spells[*]}${NC}"
    return 1
}

# Claude Code実行
execute_claude_code() {
    local prompt="$1"
    local skip_permission="$2"
    local debug="$3"
    
    echo -e "${PURPLE}🔮 Claude Code経由でクロードエルダー召喚中...${NC}"
    
    # Claude Codeコマンド構築
    local claude_cmd="claude-code"
    
    if [[ "$skip_permission" == "true" ]]; then
        claude_cmd+=" --dangerously-skip-permission"
        echo -e "${RED}⚠️  権限チェックをスキップします${NC}"
    fi
    
    if [[ "$debug" == "true" ]]; then
        claude_cmd+=" --debug"
        echo -e "${YELLOW}🐛 デバッグモード有効${NC}"
    fi
    
    # プロンプトファイル作成
    local temp_prompt=$(mktemp)
    echo "$prompt" > "$temp_prompt"
    
    echo -e "${GREEN}✨ クロードエルダー召喚完了！${NC}"
    echo -e "${CYAN}🌊 Elder Flow開始...${NC}"
    echo ""
    
    # Claude Code実行
    $claude_cmd < "$temp_prompt"
    
    # クリーンアップ
    rm -f "$temp_prompt"
}

# メイン処理
main() {
    local spell_name=""
    local target=""
    local power="medium"
    local skip_permission="false"
    local debug="false"
    
    # 引数解析
    while [[ $# -gt 0 ]]; do
        case $1 in
            --help|-h)
                show_usage
                exit 0
                ;;
            --power)
                power="$2"
                shift 2
                ;;
            --dangerously-skip-permission)
                skip_permission="true"
                shift
                ;;
            --debug)
                debug="true"  
                shift
                ;;
            *)
                if [[ -z "$spell_name" ]]; then
                    spell_name="$1"
                elif [[ -z "$target" ]]; then
                    target="$1"
                else
                    echo -e "${RED}❌ 予期しない引数: $1${NC}"
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    # 必須引数チェック
    if [[ -z "$spell_name" ]]; then
        echo -e "${RED}❌ 魔法名が指定されていません${NC}"
        show_usage
        exit 1
    fi
    
    # バリデーション
    if ! validate_spell "$spell_name"; then
        exit 1
    fi
    
    # Claude Code確認
    check_claude_code
    
    # 知識ベース読み込み
    local knowledge_content
    knowledge_content=$(load_knowledge_base)
    
    # プロンプト生成
    local elder_prompt
    elder_prompt=$(generate_elder_summon_prompt "$spell_name" "$target" "$power" "$knowledge_content")
    
    # Claude Code実行
    execute_claude_code "$elder_prompt" "$skip_permission" "$debug"
}

# スクリプト実行
main "$@"