#!/usr/bin/env python3
"""
AI Elder Cast Simple - 最小版知識注入起動スクリプト（タスク統合版）
中間版知識（8KB）を使用してClaude Codeを起動
"""

import asyncio
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path

# プロジェクトルートをパスに追加
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# 色付き出力用のANSIコード
COLORS = {
    "cyan": "\033[0;36m",
    "green": "\033[0;32m",
    "yellow": "\033[1;33m",
    "purple": "\033[0;35m",
    "reset": "\033[0m"
}


def print_colored(text, color="cyan"):
    """色付きテキストを出力"""
    print(f"{COLORS.get(color, '')}{text}{COLORS['reset']}")


async def quick_task_sync():
    """簡易タスク同期処理"""
    try:
        from libs.todo_tracker_integration import TodoTrackerIntegration
        
        # タスクトラッカー統合を初期化
        user_id = os.environ.get("CLAUDE_ELDER_USER", "claude_elder")
        integration = TodoTrackerIntegration(auto_sync=False, user_id=user_id)
        await integration.initialize()
        
        # 双方向同期
        await integration.sync_both_ways(personal_only=True)
        
        # 統計情報を取得
        sync_status = await integration.get_sync_status()
        my_stats = sync_status.get("my_tasks_stats", {})
        
        active_count = my_stats.get("pending", 0) + my_stats.get("in_progress", 0)
        
        print_colored(f"✅ タスク同期完了 (アクティブ: {active_count}件)", "green")
        
        # クリーンアップ
        if integration.tracker:
            await integration.tracker.close()
            
    except Exception as e:
        print_colored(f"⚠️ タスク同期スキップ: {e}", "yellow")


def main():
    """メイン処理"""
    # コマンドライン引数をチェック
    if len(sys.argv) > 1 and sys.argv[1] == "todo":
        # Todo同期機能付きで起動
        print_colored("🔄 Todo同期機能付きで起動します...", "cyan")
        print()
        
        # ai-elder-cast-with-todo-syncを実行
        todo_sync_script = project_root / "scripts" / "ai-elder-cast-with-todo-sync"
        if todo_sync_script.exists():
            try:
                subprocess.run([sys.executable, str(todo_sync_script)])
                return
            except KeyboardInterrupt:
                print()
                print_colored("⚡ セッション中断", "yellow")
                return
            except Exception as e:
                print_colored(f"❌ エラー: {e}", "red")
                sys.exit(1)
        else:
            print_colored("❌ Todo同期スクリプトが見つかりません", "red")
            sys.exit(1)
    
    print_colored("🔮 AI Elder Cast Simple (Task Integration) 起動", "purple")
    print()
    
    # 知識ファイルパス（中間版）
    knowledge_file = project_root / "knowledge_base" / "ELDER_KNOWLEDGE_CONTEXT_MEDIUM.md"
    
    if not knowledge_file.exists():
        print_colored(f"❌ 知識ファイルが見つかりません: {knowledge_file}", "red")
        sys.exit(1)
    
    # 日本語環境設定
    os.environ["LANG"] = "ja_JP.UTF-8"
    os.environ["LC_ALL"] = "ja_JP.UTF-8"
    
    # タスク同期を実行（エラーが発生しても継続）
    if os.environ.get("ELDER_CAST_SKIP_SYNC", "").lower() != "true":
        print_colored("📋 タスク同期中...", "cyan")
        asyncio.run(quick_task_sync())
        print()
    
    # Claude Code起動
    try:
        print_colored("🏛️ クロードエルダー召喚中...", "green")
        print()
        
        subprocess.run([
            "claude", 
            "--dangerously-skip-permissions", 
            str(knowledge_file)
        ])
        
    except KeyboardInterrupt:
        print()
        print_colored("⚡ セッション中断", "yellow")
    except Exception as e:
        print_colored(f"❌ エラー: {e}", "red")
        sys.exit(1)
    
    print()
    print_colored("🏛️ Elder Cast セッション完了", "green")


if __name__ == "__main__":
    main()