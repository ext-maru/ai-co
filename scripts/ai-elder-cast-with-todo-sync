#!/usr/bin/env python3
"""
AI Elder Cast with Todo Synchronization
Claude CodeのTodoRead/TodoWriteとPostgreSQLタスクトラッカーを完全統合
"""

import asyncio
import json
import os
import subprocess
import sys
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple

# プロジェクトルートをパスに追加
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from libs.todo_tracker_integration import TodoTrackerIntegration
from libs.todo_hook_system import TodoHookSystem
from libs.postgres_claude_task_tracker import TaskStatus, TaskPriority

# ANSIカラーコード
COLORS = {
    "cyan": "\033[0;36m",
    "green": "\033[0;32m",
    "yellow": "\033[1;33m",
    "purple": "\033[0;35m",
    "red": "\033[0;31m",
    "blue": "\033[0;34m",
    "bold": "\033[1m",
    "reset": "\033[0m"
}


def print_colored(text, color="cyan"):
    """カラー出力"""
    print(f"{COLORS.get(color, '')}{text}{COLORS['reset']}")


def print_task(task, indent="  "):
    """タスクを整形して表示"""
    status_map = {
        TaskStatus.PENDING: "📋",
        TaskStatus.IN_PROGRESS: "🔄",
        TaskStatus.COMPLETED: "✅",
        TaskStatus.CANCELLED: "❌",
        TaskStatus.BLOCKED: "🚫",
    }
    
    priority_map = {
        TaskPriority.CRITICAL: "🔴",
        TaskPriority.HIGH: "🟠",
        TaskPriority.MEDIUM: "🟡",
        TaskPriority.LOW: "🟢",
    }
    
    status_emoji = status_map.get(task.status, "❓")
    priority_emoji = priority_map.get(task.priority, "⚪")
    
    print(f"{indent}{status_emoji} {priority_emoji} {task.title}")
    if task.description:
        desc = task.description[:60] + "..." if len(task.description) > 60 else task.description
        print(f"{indent}  └─ {desc}")


async def check_and_inherit_tasks(integration: TodoTrackerIntegration) -> bool:
    """前回の未完了タスクを確認して引き継ぎ"""
    try:
        # 未完了タスクを取得
        pending_tasks = await integration.tracker.list_tasks(
            assigned_to=integration.user_id,
            status_filter=[TaskStatus.PENDING, TaskStatus.IN_PROGRESS],
            limit=20
        )
        
        if not pending_tasks:
            return False
        
        # タスクを表示
        print_colored("\n📋 前回のセッションで未完了のタスクが見つかりました:", "yellow")
        print_colored(f"   {len(pending_tasks)}件のアクティブタスク\n", "yellow")
        
        # 進行中のタスク
        in_progress = [t for t in pending_tasks if t.status == TaskStatus.IN_PROGRESS]
        if in_progress:
            print_colored("🔄 進行中のタスク:", "cyan")
            for task in in_progress[:5]:
                print_task(task)
            if len(in_progress) > 5:
                print(f"  ... 他 {len(in_progress) - 5}件")
            print()
        
        # 未着手のタスク
        pending = [t for t in pending_tasks if t.status == TaskStatus.PENDING]
        if pending:
            print_colored("📋 未着手のタスク:", "cyan")
            for task in pending[:5]:
                print_task(task)
            if len(pending) > 5:
                print(f"  ... 他 {len(pending) - 5}件")
            print()
        
        # 引き継ぎ確認
        print_colored("これらのタスクを引き継ぎますか？", "bold")
        print("  [Y] 引き継ぐ (デフォルト)")
        print("  [N] 新規セッションで開始")
        print("  [S] 選択して引き継ぐ")
        
        # ユーザー入力待ち（タイムアウト10秒）
        try:
            choice = await asyncio.wait_for(
                asyncio.get_event_loop().run_in_executor(None, input, "> "),
                timeout=10.0
            )
            choice = choice.strip().upper()
        except asyncio.TimeoutError:
            print_colored("\n⏱️ タイムアウト - 自動的に引き継ぎます", "yellow")
            choice = "Y"
        
        if choice == "N":
            print_colored("\n✨ 新規セッションを開始します", "green")
            return False
        
        elif choice == "S":
            # 選択モード（未実装）
            print_colored("\n⚠️ 選択モードは準備中です。全タスクを引き継ぎます", "yellow")
            choice = "Y"
        
        if choice != "N":
            # タスクを引き継ぎ
            print_colored("\n🔄 タスクを引き継いでいます...", "cyan")
            
            # TodoListフォーマットに変換
            todo_items = []
            for task in pending_tasks[:10]:  # 最大10件
                todo_items.append({
                    "id": f"task-{task.id[:8]}",
                    "content": task.title,
                    "status": "in_progress" if task.status == TaskStatus.IN_PROGRESS else "pending",
                    "priority": task.priority.value.lower()
                })
            
            # 初期TodoListをファイルに書き込み
            initial_todos_file = Path.home() / ".claude_initial_todos.json"
            with open(initial_todos_file, 'w', encoding='utf-8') as f:
                json.dump(todo_items, f, ensure_ascii=False, indent=2)
            
            print_colored(f"✅ {len(todo_items)}件のタスクを引き継ぎました", "green")
            return True
        
        return False
        
    except Exception as e:
        print_colored(f"⚠️ タスク引き継ぎエラー: {e}", "yellow")
        return False


async def start_todo_monitor(integration: TodoTrackerIntegration):
    """バックグラウンドでTodo監視を開始"""
    try:
        # TodoHookSystemを初期化
        hook_system = TodoHookSystem(integration_module=integration)
        
        # 監視開始
        await hook_system.start_monitoring()
        
        print_colored("🔍 Todo監視システムを開始しました", "green")
        print_colored("   TodoWrite/TodoReadの変更を自動的にPostgreSQLと同期します", "cyan")
        
        # プロセスIDを記録（後で停止するため）
        pid_file = Path.home() / ".claude_todo_monitor.pid"
        with open(pid_file, 'w') as f:
            f.write(str(os.getpid()))
        
        return hook_system
        
    except Exception as e:
        print_colored(f"⚠️ Todo監視システムの起動に失敗: {e}", "yellow")
        return None


def create_startup_knowledge(has_inherited_tasks: bool) -> str:
    """起動時の知識コンテンツを作成"""
    content = []
    
    # 基本的な知識を読み込み
    knowledge_file = project_root / "docs" / "technical" / "ELDER_KNOWLEDGE_CONTEXT_MEDIUM.md"
    if knowledge_file.exists():
        with open(knowledge_file, 'r', encoding='utf-8') as f:
            content.append(f.read())
    
    # Todo同期システムの説明を追加
    content.append(f"""
# 📋 Todo同期システム

**セッション開始時刻**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Todo同期**: ✅ 有効（PostgreSQLタスクトラッカーと連携）

## 🔄 自動同期機能
- TodoWriteで追加/更新 → 自動的にPostgreSQLに保存
- セッション終了後もタスクは永続化
- 次回起動時に前回のタスクを引き継ぎ可能

## 📝 使用方法
通常通りTodoRead/TodoWriteツールを使用してください。
すべての変更は自動的にタスクトラッカーと同期されます。

""")
    
    if has_inherited_tasks:
        content.append("""
## ✅ タスク引き継ぎ完了
前回のセッションから未完了タスクを引き継ぎました。
TodoReadツールで確認できます。
""")
    
    return "\n".join(content)


async def main():
    print_colored("🔮 AI Elder Cast with Todo Sync 起動", "purple")
    print_colored("🏛️ エルダーズギルド Todo完全統合システム", "bold")
    print()
    
    # ユーザーIDを環境変数から取得
    user_id = os.environ.get("CLAUDE_ELDER_USER", "claude_elder")
    
    # タスクトラッカー統合を初期化
    print_colored("📊 タスクトラッカーに接続中...", "cyan")
    
    try:
        integration = TodoTrackerIntegration(
            auto_sync=False,  # 手動制御
            user_id=user_id
        )
        await integration.initialize()
        print_colored("✅ 接続成功", "green")
        
        # 前回の未完了タスクを確認
        has_inherited = await check_and_inherit_tasks(integration)
        
        # Todo監視システムを起動
        print()
        hook_system = await start_todo_monitor(integration)
        
        # 知識コンテンツを準備
        knowledge_content = create_startup_knowledge(has_inherited)
        
        # 一時ファイルに保存
        with tempfile.NamedTemporaryFile(
            mode="w", encoding="utf-8", suffix=".md", delete=False
        ) as tmp:
            tmp.write(knowledge_content)
            tmp_path = tmp.name
        
        # 日本語環境設定
        os.environ["LANG"] = "ja_JP.UTF-8"
        os.environ["LC_ALL"] = "ja_JP.UTF-8"
        
        # 初期Todoファイルがあれば環境変数に設定
        initial_todos_file = Path.home() / ".claude_initial_todos.json"
        if initial_todos_file.exists():
            os.environ["CLAUDE_INITIAL_TODOS"] = str(initial_todos_file)
        
        # Claude Code起動
        try:
            print()
            print_colored("🏛️ クロードエルダー召喚中...", "green")
            print()
            
            subprocess.run(["claude", "--dangerously-skip-permissions", tmp_path])
            
        finally:
            # クリーンアップ
            if os.path.exists(tmp_path):
                os.unlink(tmp_path)
            
            # 初期Todoファイルを削除
            if initial_todos_file.exists():
                initial_todos_file.unlink()
            
            # Todo監視を停止
            if hook_system:
                await hook_system.stop_monitoring()
            
            # 統合をクリーンアップ
            if integration.tracker:
                await integration.tracker.close()
        
    except Exception as e:
        print_colored(f"❌ エラー: {e}", "red")
        sys.exit(1)
    
    print()
    print_colored("🏛️ Elder Cast セッション完了", "green")
    
    # PIDファイルを削除
    pid_file = Path.home() / ".claude_todo_monitor.pid"
    if pid_file.exists():
        pid_file.unlink()


if __name__ == "__main__":
    asyncio.run(main())