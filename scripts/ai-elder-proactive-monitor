#!/bin/bash
#
# AI Elder Proactive Monitoring System
# エルダー評議会先制的監視システム - 継続監視サイクル
#
# Usage:
#   ./ai-elder-proactive-monitor        # 1回実行
#   ./ai-elder-proactive-monitor daemon # デーモンモード
#

set -e

PROJECT_ROOT="/home/aicompany/ai_co"
COMMAND="$PROJECT_ROOT/commands/ai_elder_proactive.py"
LOG_FILE="$PROJECT_ROOT/logs/elder_proactive_monitor.log"

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[$(date -Iseconds)]${NC} $1" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date -Iseconds)]${NC} $1" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date -Iseconds)]${NC} $1" | tee -a "$LOG_FILE"
}

# Initialize monitoring
init_monitoring() {
    mkdir -p "$(dirname "$LOG_FILE")"
    log_info "🏛️ Elder Council Proactive Monitoring System - 監視開始"
    log_info "📊 Target: AI Company System Health & Performance"
}

# Execute monitoring cycle
execute_monitoring_cycle() {
    log_info "🔮 先制的監視サイクル実行中..."
    
    # Generate proactive insights
    log_info "💡 洞察生成開始"
    if python3 "$COMMAND" generate 2>&1 | tee -a "$LOG_FILE"; then
        log_info "✅ 洞察生成完了"
    else
        log_error "❌ 洞察生成失敗"
        return 1
    fi
    
    # Check system status
    log_info "📊 システム状況確認"
    if python3 "$COMMAND" status 2>&1 | tee -a "$LOG_FILE"; then
        log_info "✅ 状況確認完了"
    else
        log_warning "⚠️ 状況確認で警告"
    fi
    
    # Generate comprehensive report
    log_info "📋 包括レポート生成"
    if python3 "$COMMAND" report --type comprehensive 2>&1 | tee -a "$LOG_FILE"; then
        log_info "✅ レポート生成完了"
    else
        log_warning "⚠️ レポート生成で警告"
    fi
    
    log_info "🌟 監視サイクル完了"
}

# Daemon mode
run_daemon() {
    log_info "🤖 デーモンモード開始 - 継続監視"
    
    local cycle_count=0
    while true; do
        cycle_count=$((cycle_count + 1))
        log_info "🔄 監視サイクル #$cycle_count 開始"
        
        if execute_monitoring_cycle; then
            log_info "✅ サイクル #$cycle_count 成功"
        else
            log_error "❌ サイクル #$cycle_count 失敗"
        fi
        
        # Wait 30 minutes between cycles
        log_info "⏰ 次の監視まで30分待機..."
        sleep 1800
    done
}

# Single execution
run_single() {
    log_info "🎯 単発監視実行"
    execute_monitoring_cycle
}

# Main execution
main() {
    init_monitoring
    
    case "${1:-single}" in
        "daemon")
            run_daemon
            ;;
        "single"|"")
            run_single
            ;;
        *)
            echo "Usage: $0 [daemon|single]"
            echo ""
            echo "Options:"
            echo "  daemon  - 継続監視モード（30分間隔）"
            echo "  single  - 単発実行モード"
            exit 1
            ;;
    esac
}

# Handle interruption
trap 'log_info "🛑 監視システム停止"; exit 0' INT TERM

# Execute main function
main "$@"