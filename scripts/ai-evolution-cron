#!/bin/bash
#
# AI Evolution Cron Manager - AI進化システムCron管理ツール
# Cron設定の管理、監視、トラブルシューティング用のコマンドラインツール
#
# 使用方法:
#   ai-evolution-cron setup     # Cron設定セットアップ
#   ai-evolution-cron status    # Cron状況確認
#   ai-evolution-cron logs      # ログ確認
#   ai-evolution-cron test      # テスト実行
#   ai-evolution-cron remove    # Cron設定削除
#

set -e

PROJECT_ROOT="/home/aicompany/ai_co"
LOG_DIR="$PROJECT_ROOT/logs/cron"
SCRIPT_NAME="ai-evolution-cron"

# 色付きログ出力
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
blue='\033[0;34m'
purple='\033[0;35m'
cyan='\033[0;36m'
nc='\033[0m' # No Color

log_info() {
    echo -e "${green}[INFO]${nc} $1"
}

log_warning() {
    echo -e "${yellow}[WARNING]${nc} $1"
}

log_error() {
    echo -e "${red}[ERROR]${nc} $1"
}

log_debug() {
    echo -e "${blue}[DEBUG]${nc} $1"
}

show_help() {
    echo -e "${cyan}AI Evolution Cron Manager${nc}"
    echo ""
    echo "使用方法:"
    echo "  $SCRIPT_NAME setup     # Cron設定セットアップ"
    echo "  $SCRIPT_NAME status    # Cron状況確認"
    echo "  $SCRIPT_NAME logs      # ログ確認"
    echo "  $SCRIPT_NAME test      # テスト実行"
    echo "  $SCRIPT_NAME remove    # Cron設定削除"
    echo "  $SCRIPT_NAME monitor   # リアルタイム監視"
    echo ""
    echo "オプション:"
    echo "  --help, -h    このヘルプを表示"
    echo "  --verbose     詳細出力"
}

setup_cron() {
    log_info "🔧 AI進化システムCron設定開始"
    
    if [ -f "$PROJECT_ROOT/scripts/setup_evolution_cron.sh" ]; then
        cd "$PROJECT_ROOT"
        bash scripts/setup_evolution_cron.sh
        log_info "✅ Cron設定完了"
    else
        log_error "❌ セットアップスクリプトが見つかりません: scripts/setup_evolution_cron.sh"
        exit 1
    fi
}

show_status() {
    log_info "📊 AI進化システムCron状況確認"
    echo ""
    
    # Cron設定確認
    echo -e "${cyan}🔧 現在のCron設定:${nc}"
    if crontab -l 2>/dev/null | grep -q "AI Company"; then
        crontab -l | grep -A 20 "AI Company" | head -25
        echo ""
        log_info "✅ AI進化システムのCron設定が見つかりました"
    else
        log_warning "⚠️ AI進化システムのCron設定が見つかりません"
        echo "セットアップコマンド: $SCRIPT_NAME setup"
        echo ""
    fi
    
    # ログファイル確認
    echo -e "${cyan}📁 ログファイル状況:${nc}"
    if [ -d "$LOG_DIR" ]; then
        ls -la "$LOG_DIR" | while read line; do
            echo "  $line"
        done
        echo ""
        
        # 最新ログエントリ確認
        echo -e "${cyan}📈 最新の実行状況:${nc}"
        for log_file in daily_evolution weekly_strategy hourly_status; do
            if [ -f "$LOG_DIR/${log_file}.log" ]; then
                last_entry=$(tail -1 "$LOG_DIR/${log_file}.log" 2>/dev/null || echo "No entries")
                echo -e "  ${green}${log_file}:${nc} $last_entry"
            fi
        done
    else
        log_warning "⚠️ ログディレクトリが見つかりません: $LOG_DIR"
    fi
    
    # システムリソース確認
    echo ""
    echo -e "${cyan}💻 システムリソース:${nc}"
    echo "  ディスク使用量: $(df -h "$PROJECT_ROOT" | tail -1 | awk '{print $5 " (" $4 " available)"}')"
    echo "  メモリ使用量: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
    echo "  現在時刻: $(date)"
}

show_logs() {
    log_info "📋 AI進化システムログ確認"
    
    if [ ! -d "$LOG_DIR" ]; then
        log_error "❌ ログディレクトリが見つかりません: $LOG_DIR"
        return 1
    fi
    
    echo ""
    echo -e "${cyan}📁 利用可能なログファイル:${nc}"
    ls -la "$LOG_DIR"/*.log 2>/dev/null | nl
    
    echo ""
    echo "確認したいログ番号を入力してください (Enter=全て):"
    read -r log_choice
    
    if [ -z "$log_choice" ]; then
        # 全ログの最新エントリを表示
        for log_file in "$LOG_DIR"/*.log; do
            if [ -f "$log_file" ]; then
                filename=$(basename "$log_file")
                echo ""
                echo -e "${cyan}=== $filename (最新10行) ===${nc}"
                tail -10 "$log_file"
            fi
        done
    else
        # 指定されたログファイルを表示
        log_files=("$LOG_DIR"/*.log)
        if [ "$log_choice" -gt 0 ] && [ "$log_choice" -le "${#log_files[@]}" ]; then
            selected_log="${log_files[$((log_choice-1))]}"
            echo ""
            echo -e "${cyan}=== $(basename "$selected_log") ===${nc}"
            echo "ファイル全体を見る場合は 'less'、最新100行は 'tail'、リアルタイムは 'follow' を入力:"
            read -r view_mode
            
            case "$view_mode" in
                "less")
                    less "$selected_log"
                    ;;
                "tail")
                    tail -100 "$selected_log"
                    ;;
                "follow")
                    tail -f "$selected_log"
                    ;;
                *)
                    tail -20 "$selected_log"
                    ;;
            esac
        else
            log_error "❌ 無効な選択です"
        fi
    fi
}

test_evolution_system() {
    log_info "🧪 AI進化システムテスト実行"
    
    cd "$PROJECT_ROOT"
    
    echo ""
    echo -e "${cyan}1. システム状況確認テスト${nc}"
    if python3 commands/ai_evolve_daily.py --status; then
        log_info "✅ システム状況確認: OK"
    else
        log_error "❌ システム状況確認: Failed"
    fi
    
    echo ""
    echo -e "${cyan}2. 保留相談確認テスト${nc}"
    if python3 commands/ai_evolve_daily.py --pending; then
        log_info "✅ 保留相談確認: OK"
    else
        log_error "❌ 保留相談確認: Failed"
    fi
    
    echo ""
    echo -e "${cyan}3. 進化履歴確認テスト${nc}"
    if python3 commands/ai_evolve_daily.py --history --limit 3; then
        log_info "✅ 進化履歴確認: OK"
    else
        log_error "❌ 進化履歴確認: Failed"
    fi
    
    echo ""
    echo -e "${cyan}4. グランドエルダーインターフェーステスト${nc}"
    if python3 commands/ai_grand_elder.py --consultation-log --limit 3; then
        log_info "✅ グランドエルダーインターフェース: OK"
    else
        log_error "❌ グランドエルダーインターフェース: Failed"
    fi
    
    echo ""
    echo -e "${cyan}5. Cron設定構文チェック${nc}"
    if crontab -l | grep "ai_evolve_daily" >/dev/null 2>&1; then
        log_info "✅ Cron設定: 検出されました"
        echo "次回実行予定時刻の計算..."
        
        # 次の実行時刻を計算（簡易版）
        current_hour=$(date +%H)
        if [ "$current_hour" -lt 2 ]; then
            echo "  日次進化サイクル: 今日 2:00 AM"
        else
            echo "  日次進化サイクル: 明日 2:00 AM"
        fi
    else
        log_warning "⚠️ Cron設定: AI進化システムの設定が見つかりません"
    fi
    
    log_info "🎉 テスト完了"
}

remove_cron() {
    log_warning "⚠️ AI進化システムCron設定削除"
    echo ""
    echo "この操作により、以下の自動化が停止されます:"
    echo "  - 日次自己進化サイクル"
    echo "  - 週次戦略レビュー"
    echo "  - システム監視・ヘルスチェック"
    echo "  - ログローテーション"
    echo ""
    echo -e "${red}本当に削除しますか？ (yes/no):${nc}"
    read -r confirmation
    
    if [ "$confirmation" = "yes" ]; then
        # 現在のcrontabをバックアップ
        crontab -l > "/tmp/crontab_backup_$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
        
        # AI Company関連のエントリを除去
        crontab -l 2>/dev/null | grep -v "AI Company\|ai_evolve_daily\|ai_grand_elder" | crontab -
        
        log_info "✅ AI進化システムCron設定を削除しました"
        log_info "📋 バックアップ: /tmp/crontab_backup_*"
    else
        log_info "❌ 削除をキャンセルしました"
    fi
}

monitor_system() {
    log_info "🔍 AI進化システムリアルタイム監視開始"
    echo "Ctrl+C で監視を停止します"
    echo ""
    
    while true; do
        clear
        echo -e "${cyan}🤖 AI Company 自己進化システム監視ダッシュボード${nc}"
        echo "更新時刻: $(date)"
        echo "==========================================​=================================="
        
        # システム状況
        echo -e "${green}📊 システム状況:${nc}"
        if [ -f "$LOG_DIR/hourly_status.log" ]; then
            tail -1 "$LOG_DIR/hourly_status.log" 2>/dev/null || echo "  状況確認中..."
        else
            echo "  ログファイルを待機中..."
        fi
        
        # 最新の進化活動
        echo ""
        echo -e "${green}🌟 最新の進化活動:${nc}"
        if [ -f "$LOG_DIR/daily_evolution.log" ]; then
            tail -3 "$LOG_DIR/daily_evolution.log" 2>/dev/null | sed 's/^/  /' || echo "  進化ログを待機中..."
        else
            echo "  進化ログを待機中..."
        fi
        
        # 保留中の相談
        echo ""
        echo -e "${green}👑 保留中の相談:${nc}"
        if [ -f "$LOG_DIR/pending_consultations.log" ]; then
            tail -2 "$LOG_DIR/pending_consultations.log" 2>/dev/null | sed 's/^/  /' || echo "  相談ログを待機中..."
        else
            echo "  相談ログを待機中..."
        fi
        
        # システムリソース
        echo ""
        echo -e "${green}💻 システムリソース:${nc}"
        echo "  CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)% 使用中"
        echo "  メモリ: $(free | grep Mem | awk '{printf "%.1f%%", $3/$2 * 100.0}') 使用中"
        echo "  ディスク: $(df "$PROJECT_ROOT" | tail -1 | awk '{print $5}') 使用中"
        
        # 次回実行予定
        echo ""
        echo -e "${green}⏰ 次回実行予定:${nc}"
        current_time=$(date +%H%M)
        if [ "$current_time" -lt "0200" ]; then
            echo "  日次進化サイクル: 今日 2:00 AM"
        else
            echo "  日次進化サイクル: 明日 2:00 AM"
        fi
        
        sleep 10
    done
}

# メイン実行ロジック
case "${1:-}" in
    "setup")
        setup_cron
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "test")
        test_evolution_system
        ;;
    "remove")
        remove_cron
        ;;
    "monitor")
        monitor_system
        ;;
    "--help"|"-h"|"help")
        show_help
        ;;
    "")
        log_error "❌ コマンドが指定されていません"
        echo ""
        show_help
        exit 1
        ;;
    *)
        log_error "❌ 不明なコマンド: $1"
        echo ""
        show_help
        exit 1
        ;;
esac