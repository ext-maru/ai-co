#!/bin/bash
# 🤖 AI Knights Auto-Dispatch - Automated Emergency Response
# Intelligent automatic knights deployment based on system conditions

cd "$(dirname "$0")/.."

# Colors and symbols
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

ROBOT="🤖"
SHIELD="🛡️"
FIRE="🔥"
CHECK="✅"
WARN="⚠️"
THINKING="🤔"

show_banner() {
    echo -e "${PURPLE}╭────────────────────────────────────────────────────────────╮${NC}"
    echo -e "${PURPLE}│${NC} ${ROBOT} ${CYAN}AI Knights Auto-Dispatch System${NC} ${ROBOT}                 ${PURPLE}│${NC}"
    echo -e "${PURPLE}│${NC}     ${YELLOW}Intelligent Automatic Emergency Response${NC}         ${PURPLE}│${NC}"
    echo -e "${PURPLE}╰────────────────────────────────────────────────────────────╯${NC}"
}

show_help() {
    show_banner
    echo ""
    echo -e "${CYAN}Usage:${NC} ai-knights-auto [mode] [options]"
    echo ""
    echo -e "${YELLOW}Modes:${NC}"
    echo -e "  ${GREEN}monitor${NC}     ${THINKING} Continuous monitoring and auto-dispatch"
    echo -e "  ${GREEN}once${NC}       ${SHIELD} Single assessment and dispatch if needed"
    echo -e "  ${GREEN}smart${NC}      ${ROBOT} AI-powered intelligent dispatch decisions"
    echo -e "  ${GREEN}emergency${NC}  ${FIRE} Emergency-only auto-dispatch (CRITICAL only)"
    echo ""
    echo -e "${YELLOW}Options:${NC}"
    echo -e "  ${GREEN}--interval N${NC}  Set monitoring interval (seconds, default: 60)"
    echo -e "  ${GREEN}--threshold L${NC} Set dispatch threshold (LOW|MEDIUM|HIGH|CRITICAL)"
    echo -e "  ${GREEN}--quiet${NC}      Minimal output mode"
    echo -e "  ${GREEN}--log FILE${NC}   Log activities to file"
    echo -e "  ${GREEN}--help${NC}       Show this help message"
    echo ""
    echo -e "${CYAN}Examples:${NC}"
    echo -e "  ai-knights-auto monitor --interval 30    # Monitor every 30 seconds"
    echo -e "  ai-knights-auto once --threshold HIGH    # Dispatch if HIGH+ issues"
    echo -e "  ai-knights-auto smart --quiet            # Smart mode, minimal output"
    echo -e "  ai-knights-auto emergency                # Emergency-only monitoring"
}

log_message() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')

    if [ "$QUIET_MODE" != "true" ]; then
        echo -e "$message"
    fi

    if [ -n "$LOG_FILE" ]; then
        echo "[$timestamp] $message" | sed 's/\x1B\[[0-9;]*[JKmsu]//g' >> "$LOG_FILE"
    fi
}

assess_system_threat_level() {
    local threat_level="NONE"
    local issue_count=0

    # Check Elder Council triggers
    if command -v python3 >/dev/null 2>&1; then
        local triggers_output=$(python3 commands/ai_elder_council.py triggers 2>/dev/null)

        if echo "$triggers_output" | grep -q "CRITICAL"; then
            threat_level="CRITICAL"
            issue_count=$((issue_count + $(echo "$triggers_output" | grep -c "CRITICAL")))
        elif echo "$triggers_output" | grep -q "HIGH"; then
            threat_level="HIGH"
            issue_count=$((issue_count + $(echo "$triggers_output" | grep -c "HIGH")))
        elif echo "$triggers_output" | grep -q "MEDIUM"; then
            threat_level="MEDIUM"
            issue_count=$((issue_count + $(echo "$triggers_output" | grep -c "MEDIUM")))
        elif echo "$triggers_output" | grep -q "LOW"; then
            threat_level="LOW"
            issue_count=$((issue_count + $(echo "$triggers_output" | grep -c "LOW")))
        fi
    fi

    echo "$threat_level:$issue_count"
}

should_dispatch_knights() {
    local current_threat="$1"
    local threshold="$2"

    case "$threshold" in
        "CRITICAL")
            [ "$current_threat" = "CRITICAL" ]
            ;;
        "HIGH")
            [ "$current_threat" = "CRITICAL" ] || [ "$current_threat" = "HIGH" ]
            ;;
        "MEDIUM")
            [ "$current_threat" = "CRITICAL" ] || [ "$current_threat" = "HIGH" ] || [ "$current_threat" = "MEDIUM" ]
            ;;
        "LOW")
            [ "$current_threat" = "CRITICAL" ] || [ "$current_threat" = "HIGH" ] || [ "$current_threat" = "MEDIUM" ] || [ "$current_threat" = "LOW" ]
            ;;
        *)
            false
            ;;
    esac
}

smart_dispatch_decision() {
    local threat_info="$1"
    local threat_level=$(echo "$threat_info" | cut -d: -f1)
    local issue_count=$(echo "$threat_info" | cut -d: -f2)

    log_message "${THINKING} ${CYAN}AI Analysis: Threat=${threat_level}, Issues=${issue_count}${NC}"

    # Smart decision logic
    case "$threat_level" in
        "CRITICAL")
            echo "FULL_DEPLOYMENT"
            ;;
        "HIGH")
            if [ "$issue_count" -gt 3 ]; then
                echo "FULL_DEPLOYMENT"
            else
                echo "TARGETED_DEPLOYMENT"
            fi
            ;;
        "MEDIUM")
            if [ "$issue_count" -gt 5 ]; then
                echo "TARGETED_DEPLOYMENT"
            else
                echo "PATROL_ONLY"
            fi
            ;;
        "LOW")
            echo "PATROL_ONLY"
            ;;
        "NONE")
            echo "NO_ACTION"
            ;;
        *)
            echo "NO_ACTION"
            ;;
    esac
}

execute_dispatch() {
    local dispatch_type="$1"
    local quiet_flag=""

    if [ "$QUIET_MODE" = "true" ]; then
        quiet_flag="--quiet"
    fi

    case "$dispatch_type" in
        "FULL_DEPLOYMENT")
            log_message "${FIRE} ${RED}Executing FULL DEPLOYMENT${NC}"
            ./scripts/ai-knights-dispatch deploy $quiet_flag
            ;;
        "TARGETED_DEPLOYMENT")
            log_message "${SHIELD} ${YELLOW}Executing TARGETED DEPLOYMENT${NC}"
            ./scripts/ai-knights-dispatch repair $quiet_flag
            ;;
        "PATROL_ONLY")
            log_message "${ROBOT} ${BLUE}Starting PATROL MODE${NC}"
            # For patrol, we just check status instead of full patrol to avoid blocking
            ./scripts/ai-knights-dispatch status $quiet_flag
            ;;
        "NO_ACTION")
            log_message "${CHECK} ${GREEN}No action required - system stable${NC}"
            ;;
        *)
            log_message "${WARN} ${YELLOW}Unknown dispatch type: $dispatch_type${NC}"
            ;;
    esac
}

monitor_mode() {
    local interval="$1"
    local threshold="$2"

    log_message "${ROBOT} ${CYAN}Starting continuous monitoring mode${NC}"
    log_message "${BLUE}Interval: ${interval}s, Threshold: ${threshold}${NC}"
    log_message "${YELLOW}Press Ctrl+C to stop monitoring${NC}"
    echo ""

    while true; do
        local threat_info=$(assess_system_threat_level)
        local threat_level=$(echo "$threat_info" | cut -d: -f1)
        local issue_count=$(echo "$threat_info" | cut -d: -f2)

        log_message "${THINKING} ${CYAN}[$(date '+%H:%M:%S')] Threat Level: ${threat_level}, Issues: ${issue_count}${NC}"

        if should_dispatch_knights "$threat_level" "$threshold"; then
            log_message "${FIRE} ${RED}Threat threshold exceeded! Dispatching knights...${NC}"

            if [ "$MODE" = "smart" ]; then
                local decision=$(smart_dispatch_decision "$threat_info")
                execute_dispatch "$decision"
            else
                execute_dispatch "FULL_DEPLOYMENT"
            fi
        else
            log_message "${CHECK} ${GREEN}System within acceptable parameters${NC}"
        fi

        sleep "$interval"
    done
}

once_mode() {
    local threshold="$1"

    log_message "${SHIELD} ${CYAN}Single assessment mode${NC}"

    local threat_info=$(assess_system_threat_level)
    local threat_level=$(echo "$threat_info" | cut -d: -f1)
    local issue_count=$(echo "$threat_info" | cut -d: -f2)

    log_message "${THINKING} ${CYAN}Assessment: Threat=${threat_level}, Issues=${issue_count}${NC}"

    if should_dispatch_knights "$threat_level" "$threshold"; then
        log_message "${FIRE} ${YELLOW}Dispatching knights based on assessment...${NC}"

        if [ "$MODE" = "smart" ]; then
            local decision=$(smart_dispatch_decision "$threat_info")
            execute_dispatch "$decision"
        else
            execute_dispatch "FULL_DEPLOYMENT"
        fi
    else
        log_message "${CHECK} ${GREEN}No dispatch required${NC}"
    fi
}

emergency_mode() {
    log_message "${FIRE} ${RED}Emergency-only monitoring mode${NC}"
    log_message "${YELLOW}Will only dispatch for CRITICAL threats${NC}"

    monitor_mode "$INTERVAL" "CRITICAL"
}

# Default values
MODE="once"
INTERVAL=60
THRESHOLD="HIGH"
QUIET_MODE="false"
LOG_FILE=""

# Parse arguments
if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

MODE="$1"
shift

while [[ $# -gt 0 ]]; do
    case $1 in
        --interval)
            INTERVAL="$2"
            shift 2
            ;;
        --threshold)
            THRESHOLD="$2"
            shift 2
            ;;
        --quiet)
            QUIET_MODE="true"
            shift
            ;;
        --log)
            LOG_FILE="$2"
            shift 2
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}Unknown option: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Validate interval
if ! [[ "$INTERVAL" =~ ^[0-9]+$ ]] || [ "$INTERVAL" -lt 1 ]; then
    echo -e "${RED}Invalid interval: $INTERVAL${NC}"
    exit 1
fi

# Validate threshold
case "$THRESHOLD" in
    LOW|MEDIUM|HIGH|CRITICAL)
        ;;
    *)
        echo -e "${RED}Invalid threshold: $THRESHOLD${NC}"
        echo -e "${YELLOW}Valid thresholds: LOW, MEDIUM, HIGH, CRITICAL${NC}"
        exit 1
        ;;
esac

# Create log file if specified
if [ -n "$LOG_FILE" ]; then
    touch "$LOG_FILE" || {
        echo -e "${RED}Cannot create log file: $LOG_FILE${NC}"
        exit 1
    }
fi

# Execute based on mode
case "$MODE" in
    monitor)
        show_banner
        monitor_mode "$INTERVAL" "$THRESHOLD"
        ;;
    once)
        show_banner
        once_mode "$THRESHOLD"
        ;;
    smart)
        show_banner
        log_message "${ROBOT} ${CYAN}Smart mode enabled - AI-powered decisions${NC}"
        once_mode "$THRESHOLD"
        ;;
    emergency)
        show_banner
        emergency_mode
        ;;
    --help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}Unknown mode: $MODE${NC}"
        show_help
        exit 1
        ;;
esac

exit $?
