#!/bin/bash
#
# AI Queue Monitor - „Ç≠„É•„ÉºÁä∂ÊÖãÁõ£Ë¶ñ„Å®„Ç¢„É©„Éº„Éà
#

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# „Ç™„Éó„Ç∑„Éß„É≥Ëß£Êûê
WATCH_MODE=false
INTERVAL=10
JSON_OUTPUT=false
ALERT_THRESHOLD=100

while [[ $# -gt 0 ]]; do
    case $1 in
        --watch)
            WATCH_MODE=true
            shift
            ;;
        --interval)
            INTERVAL="$2"
            shift 2
            ;;
        --json)
            JSON_OUTPUT=true
            shift
            ;;
        --alert-threshold)
            ALERT_THRESHOLD="$2"
            shift 2
            ;;
        --help)
            echo "Usage: ai-queue-monitor [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --watch              Continuous monitoring mode"
            echo "  --interval SECONDS   Update interval (default: 10)"
            echo "  --json              JSON output format"
            echo "  --alert-threshold N  Alert when queue size exceeds N (default: 100)"
            echo "  --help              Show this help"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

cd "$PROJECT_DIR"

# ‰ªÆÊÉ≥Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ
if [[ ! "$AI_VENV_ACTIVE" == "1" ]]; then
    if [[ -f "venv/bin/activate" ]]; then
        source venv/bin/activate
        export AI_VENV_ACTIVE=1
    fi
fi

# Áõ£Ë¶ñÂÆüË°åÈñ¢Êï∞
run_queue_monitor() {
    python3 -c "
import sys
import os
import json
from datetime import datetime
sys.path.append('$PROJECT_DIR')

try:
    from libs.rate_limit_queue_processor import RateLimitQueueProcessor
    from libs.priority_queue_manager import TaskPriority
    
    # „Éó„É≠„Çª„ÉÉ„Çµ„ÉºÂàùÊúüÂåñ
    processor = RateLimitQueueProcessor('$PROJECT_DIR/config/config.json')
    
    # „Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó
    status = processor.get_status()
    
    if '$JSON_OUTPUT' == 'true':
        print(json.dumps(status, indent=2, default=str))
    else:
        print(f'üîç Queue Monitor - {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")}')
        print('=' * 70)
        
        # „Éó„É≠„Çª„ÉÉ„Çµ„ÉºÁä∂ÊÖã
        print(f'üìä Processor Status:')
        print(f'   Processing: {\"üü¢ Active\" if status[\"processing\"] else \"üî¥ Inactive\"}')
        print(f'   Rate Limited: {\"üü° Yes\" if status[\"rate_limited\"] else \"üü¢ No\"}')
        print(f'   Last Success: {status[\"last_successful_request\"]}')
        print(f'   Estimated Delay: {status[\"estimated_delay_seconds\"]}s')
        print()
        
        # „Ç≠„É•„ÉºÁä∂ÊÖã
        queue_status = status['queue_status']
        queue_sizes = queue_status['queue_sizes']
        total_queued = queue_status['total_queued']
        
        print(f'üìã Queue Status:')
        print(f'   Total Queued: {total_queued}')
        print(f'   Processing: {queue_status[\"processing_count\"]}')
        print(f'   Failed: {queue_status[\"failed_count\"]}')
        print()
        
        print(f'üéØ Priority Breakdown:')
        for priority_name, size in queue_sizes.items():
            if size > 0:
                emoji = {'CRITICAL': 'üî¥', 'HIGH': 'üü†', 'NORMAL': 'üü°', 'LOW': 'üü¢', 'BACKGROUND': 'üîµ'}.get(priority_name, '‚ö™')
                print(f'   {emoji} {priority_name}: {size}')
        print()
        
        # Áµ±Ë®àÊÉÖÂ†±
        stats = status['statistics']
        print(f'üìà Statistics:')
        print(f'   Queued Tasks: {stats[\"queued_tasks\"]}')
        print(f'   Processed Tasks: {stats[\"processed_tasks\"]}')
        print(f'   Rate Limited Tasks: {stats[\"rate_limited_tasks\"]}')
        print(f'   Failed Tasks: {stats[\"failed_tasks\"]}')
        
        if stats.get('queue_processing_start'):
            print(f'   Processing Since: {stats[\"queue_processing_start\"]}')
        print()
        
        # Claude ClientÁµ±Ë®à
        claude_stats = status['claude_client_stats']
        print(f'ü§ñ Claude Client:')
        print(f'   Total Requests: {claude_stats[\"request_count\"]}')
        print(f'   Success Rate: {claude_stats[\"success_rate\"]:.1f}%')
        print(f'   Active API Keys: {claude_stats[\"api_key_status\"][\"active_keys\"]}/{claude_stats[\"api_key_status\"][\"total_keys\"]}')
        print()
        
        # „Ç¢„É©„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
        alert_threshold = int('$ALERT_THRESHOLD')
        if total_queued >= alert_threshold:
            print(f'üö® ALERT: Queue size ({total_queued}) exceeds threshold ({alert_threshold})')
        
        if status['rate_limited']:
            print(f'‚ö†Ô∏è  WARNING: System is currently rate limited')
        
        if claude_stats['api_key_status']['active_keys'] == 0:
            print(f'üö® CRITICAL: No active API keys available!')
        
        # Êé®Â•®„Ç¢„ÇØ„Ç∑„Éß„É≥
        print(f'üí° Recommendations:')
        if status['rate_limited']:
            print(f'   - Wait for rate limit recovery')
            print(f'   - Consider adding more API keys')
        elif total_queued > 50:
            print(f'   - Monitor queue backlog')
            if not status['processing']:
                print(f'   - Start queue processing: ai-queue-start')
        elif claude_stats['success_rate'] < 90:
            print(f'   - Check API key health: ai-api-health')
        else:
            print(f'   - System operating normally')

except ImportError as e:
    print(f'‚ùå Import Error: {e}')
    print('Please ensure all dependencies are installed.')
except Exception as e:
    print(f'‚ùå Error: {e}')
"
}

# „Ç¢„É©„Éº„ÉàË®≠ÂÆö
send_alert() {
    local message="$1"
    echo "üö® ALERT: $message" >&2
    
    # SlackÈÄöÁü•ÔºàË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÂêàÔºâ
    if [[ -n "$SLACK_BOT_TOKEN" && -n "$SLACK_CHANNEL" ]]; then
        python3 -c "
import sys
sys.path.append('$PROJECT_DIR')
try:
    from libs.slack_notifier import SlackNotifier
    notifier = SlackNotifier()
    notifier.send_message('üö® Queue Monitor Alert: $message')
except:
    pass
"
    fi
}

if [[ "$WATCH_MODE" == "true" ]]; then
    echo "üîÑ Continuous queue monitoring (Ctrl+C to stop)"
    echo "üìä Update interval: ${INTERVAL} seconds"
    echo "üö® Alert threshold: ${ALERT_THRESHOLD} tasks"
    echo ""
    
    last_alert_time=0
    alert_cooldown=300  # 5ÂàÜÈñì„ÅÆ„ÇØ„Éº„É´„ÉÄ„Ç¶„É≥
    
    while true; do
        run_queue_monitor
        
        # „Ç¢„É©„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØÔºàJSONÂá∫ÂäõÊôÇ„ÅØÈô§„ÅèÔºâ
        if [[ "$JSON_OUTPUT" == "false" ]]; then
            current_time=$(date +%s)
            
            # „Ç≠„É•„Éº„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
            queue_size=$(python3 -c "
import sys
sys.path.append('$PROJECT_DIR')
try:
    from libs.rate_limit_queue_processor import RateLimitQueueProcessor
    processor = RateLimitQueueProcessor('$PROJECT_DIR/config/config.json')
    status = processor.get_status()
    print(status['queue_status']['total_queued'])
except:
    print('0')
")
            
            if [[ $queue_size -ge $ALERT_THRESHOLD ]] && [[ $((current_time - last_alert_time)) -ge $alert_cooldown ]]; then
                send_alert "Queue size exceeded threshold: $queue_size >= $ALERT_THRESHOLD"
                last_alert_time=$current_time
            fi
        fi
        
        echo ""
        echo "‚è≥ Next update in ${INTERVAL} seconds..."
        sleep "$INTERVAL"
        
        if [[ "$JSON_OUTPUT" == "false" ]]; then
            clear
        fi
    done
else
    run_queue_monitor
fi