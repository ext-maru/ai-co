#!/usr/bin/env python3
"""
ai-todo コマンド
AI自律型ToDoリスト管理CLI
"""

import argparse
import json
import os
import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

# 仮想環境のアクティベート（無限ループ防止）
os.chdir(str(PROJECT_ROOT))
venv_python = PROJECT_ROOT / "venv" / "bin" / "python3"
if venv_python.exists() and not os.environ.get("AI_VENV_ACTIVE"):
    import subprocess

    env = os.environ.copy()
    env["AI_VENV_ACTIVE"] = "1"  # 無限ループ防止フラグ
    result = subprocess.run(
        [str(venv_python), __file__] + sys.argv[1:],
        cwd=str(PROJECT_ROOT),
        env=env,
        timeout=30,
    )
    sys.exit(result.returncode)

from libs.ai_command_helper import AICommandHelper
from libs.ai_growth_todo_manager import AIGrowthTodoManager
from libs.process_monitor import ProcessMonitor


def main():
    parser = argparse.ArgumentParser(description="AI自律型ToDoリスト管理")
    subparsers = parser.add_subparsers(dest="command", help="実行するコマンド")

    # create コマンド
    create_parser = subparsers.add_parser("create", help="新しいToDoリストを作成")
    create_parser.add_argument("name", help="ToDoリスト名")
    create_parser.add_argument("--tasks-file", help="タスクファイル（JSON形式）")

    # add コマンド
    add_parser = subparsers.add_parser("add", help="タスクを追加")
    add_parser.add_argument("todo_name", help="ToDoリスト名")
    add_parser.add_argument("description", help="タスクの説明")
    add_parser.add_argument(
        "type", choices=["bash", "python", "ai-send", "command"], help="タスクタイプ"
    )
    add_parser.add_argument("content", help="実行内容")
    add_parser.add_argument(
        "--priority", choices=["low", "normal", "high"], default="normal"
    )

    # run コマンド
    run_parser = subparsers.add_parser("run", help="ToDoリストを実行")
    run_parser.add_argument("name", help="実行するToDoリスト名")
    run_parser.add_argument(
        "--async-mode", action="store_true", help="非同期実行（AI Command Executor使用）"
    )

    # status コマンド
    status_parser = subparsers.add_parser("status", help="ToDoリストの状態確認")
    status_parser.add_argument("name", nargs="?", help="ToDoリスト名（省略時は全て）")

    # learn コマンド
    learn_parser = subparsers.add_parser("learn", help="学習内容を表示")
    learn_parser.add_argument("--days", type=int, default=7, help="過去n日間の学習内容")

    # daily コマンド
    daily_parser = subparsers.add_parser("daily", help="日次自己改善ToDoを作成・実行")

    # list コマンド（statusのエイリアス）
    list_parser = subparsers.add_parser("list", help="ToDoリスト一覧（statusのエイリアス）")

    args = parser.parse_args()

    # プロセス監視による安全性チェック
    monitor = ProcessMonitor(max_processes=8, max_memory_mb=800)
    health = monitor.check_system_health()
    if not health["healthy"]:
        print(f"⚠️ システム異常検出: {health['issues']}")
        print("安全のため実行を停止します。")
        sys.exit(1)

    # マネージャー初期化
    manager = AIGrowthTodoManager()
    helper = AICommandHelper()

    if args.command == "create":
        if args.tasks_file:
            with open(args.tasks_file, "r") as f:
                tasks = json.load(f)
        else:
            # インタラクティブにタスクを入力
            tasks = []
            print("タスクを入力してください（空行で終了）:")
            while True:
                desc = input("説明: ").strip()
                if not desc:
                    break
                task_type = input("タイプ (bash/python/ai-send): ").strip()
                content = input("内容: ").strip()
                tasks.append(
                    {"description": desc, "type": task_type, "content": content}
                )

        todo = manager.create_todo_list(args.name, tasks)
        print(f"✅ ToDoリスト '{args.name}' を作成しました（{len(tasks)}タスク）")

    elif args.command == "run":
        if args.async_mode:
            # AI Command Executor経由で非同期実行
            script = f"""
from libs.ai_growth_todo_manager import AIGrowthTodoManager
manager = AIGrowthTodoManager()
manager.process_todo_with_learning("{args.name}")
"""
            helper.create_python_command(script, f"run_todo_{args.name}")
            print(f"✅ ToDoリスト '{args.name}' を非同期実行キューに追加しました")
            print("⏳ 6秒後に自動実行されます...")
        else:
            # 同期実行
            print(f"🚀 ToDoリスト '{args.name}' を実行中...")
            result = manager.process_todo_with_learning(args.name)
            print("✅ 実行完了")

    elif args.command == "status":
        todo_dir = PROJECT_ROOT / "ai_todo"
        if args.name:
            # 特定のToDoリストの状態
            result_files = list(todo_dir.glob(f"{args.name}_result_*.json"))
            if result_files:
                latest = max(result_files, key=lambda x: x.stat().st_mtime)
                with open(latest, "r") as f:
                    result = json.load(f)
                print(f"ToDoリスト: {result['todo_name']}")
                print(f"実行日時: {result['execution_date']}")
                print(
                    f"成功率: {result['success_rate']*100:.1f}% ({result['successful']}/{result['total_tasks']})"
                )
                print(f"実行時間: {result['total_duration']:.2f}秒")
            else:
                print(f"ToDoリスト '{args.name}' の実行結果が見つかりません")
        else:
            # 全ToDoリストの一覧
            todo_files = list(todo_dir.glob("*_[0-9]*.json"))
            todo_names = set()
            for f in todo_files:
                if "_result_" not in f.name:
                    name = f.name.split("_")[0]
                    todo_names.add(name)

            print("📋 ToDoリスト一覧:")
            for name in sorted(todo_names):
                print(f"  - {name}")

    elif args.command == "learn":
        insights = manager.get_learning_insights(args.days)
        print(f"🧠 過去{args.days}日間の学習内容:")
        print(f"総学習数: {insights['total_learnings']}")

        if insights["error_patterns"]:
            print("\nエラーパターン:")
            for error, count in insights["error_patterns"].items():
                print(f"  - {error}: {count}回")

        if insights["performance_tips"]:
            print("\nパフォーマンス最適化:")
            for tip in insights["performance_tips"][:5]:
                print(f"  - {tip}")

        if insights["auto_fixes"]:
            print("\n自動修正:")
            for fix in insights["auto_fixes"][:5]:
                print(f"  - {fix}")

    elif args.command == "daily":
        print("📅 日次自己改善ToDoを作成中...")
        todo = manager.create_daily_todo()
        print(f"✅ 作成完了: {len(todo['tasks'])}タスク")

        # 自動実行
        script = """
from libs.ai_growth_todo_manager import AIGrowthTodoManager
manager = AIGrowthTodoManager()
manager.process_todo_with_learning("daily_self_improvement")
"""
        helper.create_python_command(script, "daily_todo_execution")
        print("⏳ 6秒後に自動実行されます...")

    elif args.command == "list":
        # listコマンドはstatusと同じ処理（引数なし）
        todo_dir = PROJECT_ROOT / "ai_todo"
        todo_files = list(todo_dir.glob("*_[0-9]*.json"))
        todo_names = set()
        for f in todo_files:
            if "_result_" not in f.name:
                name = f.name.split("_")[0]
                todo_names.add(name)

        print("📋 ToDoリスト一覧:")
        for name in sorted(todo_names):
            print(f"  - {name}")

    else:
        parser.print_help()


if __name__ == "__main__":
    main()
