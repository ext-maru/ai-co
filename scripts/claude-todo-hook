#!/usr/bin/env python3
"""
Claude Todo Hook Helper
Claude CodeのTodoRead/TodoWrite操作をシミュレートしてテスト
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path

# プロジェクトルートをパスに追加
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from libs.todo_tracker_integration import TodoTrackerIntegration


async def simulate_todo_write(todos):
    """TodoWrite操作をシミュレート"""
    hook_file = Path.home() / ".claude_todo_hook"
    
    # TodoListデータをフックファイルに書き込み
    with open(hook_file, 'w', encoding='utf-8') as f:
        json.dump(todos, f, ensure_ascii=False, indent=2)
    
    print(f"✅ TodoWrite simulated: {len(todos)} items written to hook file")
    print(f"   File: {hook_file}")


async def simulate_todo_read():
    """TodoRead操作をシミュレート"""
    current_file = Path.home() / ".claude_todo_current.json"
    
    if current_file.exists():
        with open(current_file, 'r', encoding='utf-8') as f:
            todos = json.load(f)
        
        print(f"📋 TodoRead result: {len(todos)} items")
        for todo in todos:
            status_emoji = {
                "pending": "📋",
                "in_progress": "🔄",
                "completed": "✅"
            }.get(todo.get("status", "pending"), "❓")
            
            priority_emoji = {
                "high": "🔴",
                "medium": "🟡",
                "low": "🟢"
            }.get(todo.get("priority", "medium"), "⚪")
            
            print(f"  {status_emoji} {priority_emoji} {todo.get('content', 'No content')}")
    else:
        print("📋 TodoRead result: No todos found")


async def test_integration():
    """統合テスト"""
    print("🧪 Claude Todo Hook Integration Test")
    print("=" * 50)
    
    # 1. 初期状態を確認
    print("\n1️⃣ Initial TodoRead:")
    await simulate_todo_read()
    
    # 2. 新しいTodoを追加
    print("\n2️⃣ Simulating TodoWrite with new items:")
    test_todos = [
        {
            "id": "test-1",
            "content": "OAuth2.0認証システムの実装",
            "status": "in_progress",
            "priority": "high"
        },
        {
            "id": "test-2",
            "content": "ユニットテストの追加",
            "status": "pending",
            "priority": "medium"
        },
        {
            "id": "test-3",
            "content": "ドキュメントの更新",
            "status": "pending",
            "priority": "low"
        }
    ]
    await simulate_todo_write(test_todos)
    
    # 3. Todo監視システムが処理するのを待つ
    print("\n3️⃣ Waiting for monitor to process (5 seconds)...")
    await asyncio.sleep(5)
    
    # 4. PostgreSQLから同期された結果を確認
    print("\n4️⃣ Checking synchronized result:")
    await simulate_todo_read()
    
    # 5. タスクトラッカーの状態を確認
    print("\n5️⃣ Checking task tracker status:")
    try:
        integration = TodoTrackerIntegration(
            auto_sync=False,
            user_id="claude_elder"
        )
        await integration.initialize()
        
        sync_status = await integration.get_sync_status()
        my_stats = sync_status.get("my_tasks_stats", {})
        
        print(f"   PostgreSQL Tasks:")
        print(f"   - Total: {my_stats.get('total', 0)}")
        print(f"   - Pending: {my_stats.get('pending', 0)}")
        print(f"   - In Progress: {my_stats.get('in_progress', 0)}")
        print(f"   - Completed: {my_stats.get('completed', 0)}")
        
        await integration.tracker.close()
        
    except Exception as e:
        print(f"   ❌ Error: {e}")
    
    print("\n✅ Test completed!")


async def get_system_status():
    """システム状態を取得"""
    print("🔍 Claude Todo フック システム 状態確認")
    print("=" * 50)
    
    status = {
        "timestamp": datetime.now().isoformat(),
        "hook_files": {},
        "integration_status": {},
        "monitor_status": {}
    }
    
    # 1. フックファイルの状態確認
    print("\n1️⃣ フックファイル状態:")
    hook_file = Path.home() / ".claude_todo_hook"
    current_file = Path.home() / ".claude_todo_current.json"
    monitor_pid = Path.home() / ".claude_todo_monitor.pid"
    
    files_to_check = {
        "フックファイル": hook_file,
        "現在のTodoファイル": current_file,
        "監視プロセスPID": monitor_pid
    }
    
    for name, file_path in files_to_check.items():
        if file_path.exists():
            stat = file_path.stat()
            size = stat.st_size
            modified = datetime.fromtimestamp(stat.st_mtime).isoformat()
            status["hook_files"][name] = {
                "exists": True,
                "path": str(file_path),
                "size": size,
                "modified": modified
            }
            print(f"  ✅ {name}: {size}バイト (更新: {modified})")
        else:
            status["hook_files"][name] = {
                "exists": False,
                "path": str(file_path)
            }
            print(f"  ❌ {name}: 見つかりません")
    
    # 2. 統合システムの状態確認
    print("\n2️⃣ 統合システム状態:")
    try:
        integration = TodoTrackerIntegration(
            auto_sync=False,
            user_id="claude_elder"
        )
        await integration.initialize()
        
        sync_status = await integration.get_sync_status()
        status["integration_status"] = sync_status
        
        print(f"  ✅ PostgreSQL接続: 正常")
        print(f"  👤 ユーザー: {sync_status.get('user_id')} さん")
        print(f"  📋 管理中Todo: {sync_status.get('todo_count', 0)}個")
        print(f"  🔄 自動同期: {'🟢 有効' if sync_status.get('auto_sync_enabled') else '🔴 無効'}")
        print(f"  📊 個人タスク数: {sync_status.get('my_tasks_stats', {}).get('total', 0)}個")
        
        if hasattr(integration.tracker, 'close'):
            await integration.tracker.close()
            
    except Exception as e:
        status["integration_status"] = {"error": str(e)}
        print(f"  ❌ Integration Error: {e}")
    
    # 3. モニタープロセスの状態
    print("\n3️⃣ Monitor Process Status:")
    if monitor_pid.exists():
        try:
            with open(monitor_pid, 'r') as f:
                pid = int(f.read().strip())
            
            # プロセスの生存確認
            import psutil
            if psutil.pid_exists(pid):
                process = psutil.Process(pid)
                status["monitor_status"] = {
                    "running": True,
                    "pid": pid,
                    "name": process.name(),
                    "cpu_percent": process.cpu_percent(),
                    "memory_percent": process.memory_percent()
                }
                print(f"  ✅ Monitor Running: PID {pid}")
                print(f"  💾 Memory: {process.memory_percent():.1f}%")
                print(f"  ⚡ CPU: {process.cpu_percent()}%")
            else:
                status["monitor_status"] = {"running": False, "stale_pid": pid}
                print(f"  ❌ Monitor Not Running (stale PID: {pid})")
                
        except Exception as e:
            status["monitor_status"] = {"error": str(e)}
            print(f"  ❌ Monitor Check Error: {e}")
    else:
        status["monitor_status"] = {"running": False}
        print(f"  ❌ Monitor PID file not found")
    
    # 4. 最近のTodo活動
    print("\n4️⃣ Recent Todo Activity:")
    if current_file.exists():
        with open(current_file, 'r', encoding='utf-8') as f:
            todos = json.load(f)
        
        print(f"  📋 Active Todos: {len(todos)}")
        for i, todo in enumerate(todos[:3], 1):
            status_emoji = {"pending": "📋", "in_progress": "🔄", "completed": "✅"}.get(todo.get("status"), "❓")
            priority_emoji = {"high": "🔴", "medium": "🟡", "low": "🟢"}.get(todo.get("priority"), "⚪")
            print(f"    {i}. {status_emoji} {priority_emoji} {todo.get('content', 'No content')[:50]}...")
    else:
        print(f"  📭 No active todos found")
    
    print(f"\n✅ Status check completed!")
    return status


def main():
    """メイン処理"""
    if len(sys.argv) < 2:
        print("Usage: claude-todo-hook <command>")
        print("Commands:")
        print("  test     - Run integration test")
        print("  write    - Simulate TodoWrite (provide JSON via stdin)")
        print("  read     - Simulate TodoRead")
        print("  status   - Show system status")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "test":
        asyncio.run(test_integration())
    
    elif command == "write":
        # 標準入力からJSONを読む
        try:
            todos = json.load(sys.stdin)
            asyncio.run(simulate_todo_write(todos))
        except json.JSONDecodeError as e:
            print(f"❌ Invalid JSON: {e}")
            sys.exit(1)
    
    elif command == "read":
        asyncio.run(simulate_todo_read())
    
    elif command == "status":
        asyncio.run(get_system_status())
    
    else:
        print(f"❌ Unknown command: {command}")
        sys.exit(1)


if __name__ == "__main__":
    main()