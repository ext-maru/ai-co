#!/usr/bin/env python3
"""
Claude Todo Hook Helper
Claude CodeのTodoRead/TodoWrite操作をシミュレートしてテスト
"""

import asyncio
import json
import sys
from datetime import datetime
from pathlib import Path

# プロジェクトルートをパスに追加
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from libs.todo_tracker_integration import TodoTrackerIntegration


async def simulate_todo_write(todos):
    """TodoWrite操作をシミュレート"""
    hook_file = Path.home() / ".claude_todo_hook"
    
    # TodoListデータをフックファイルに書き込み
    with open(hook_file, 'w', encoding='utf-8') as f:
        json.dump(todos, f, ensure_ascii=False, indent=2)
    
    print(f"✅ TodoWrite simulated: {len(todos)} items written to hook file")
    print(f"   File: {hook_file}")


async def simulate_todo_read():
    """TodoRead操作をシミュレート"""
    current_file = Path.home() / ".claude_todo_current.json"
    
    if current_file.exists():
        with open(current_file, 'r', encoding='utf-8') as f:
            todos = json.load(f)
        
        print(f"📋 TodoRead result: {len(todos)} items")
        for todo in todos:
            status_emoji = {
                "pending": "📋",
                "in_progress": "🔄",
                "completed": "✅"
            }.get(todo.get("status", "pending"), "❓")
            
            priority_emoji = {
                "high": "🔴",
                "medium": "🟡",
                "low": "🟢"
            }.get(todo.get("priority", "medium"), "⚪")
            
            print(f"  {status_emoji} {priority_emoji} {todo.get('content', 'No content')}")
    else:
        print("📋 TodoRead result: No todos found")


async def test_integration():
    """統合テスト"""
    print("🧪 Claude Todo Hook Integration Test")
    print("=" * 50)
    
    # 1. 初期状態を確認
    print("\n1️⃣ Initial TodoRead:")
    await simulate_todo_read()
    
    # 2. 新しいTodoを追加
    print("\n2️⃣ Simulating TodoWrite with new items:")
    test_todos = [
        {
            "id": "test-1",
            "content": "OAuth2.0認証システムの実装",
            "status": "in_progress",
            "priority": "high"
        },
        {
            "id": "test-2",
            "content": "ユニットテストの追加",
            "status": "pending",
            "priority": "medium"
        },
        {
            "id": "test-3",
            "content": "ドキュメントの更新",
            "status": "pending",
            "priority": "low"
        }
    ]
    await simulate_todo_write(test_todos)
    
    # 3. Todo監視システムが処理するのを待つ
    print("\n3️⃣ Waiting for monitor to process (5 seconds)...")
    await asyncio.sleep(5)
    
    # 4. PostgreSQLから同期された結果を確認
    print("\n4️⃣ Checking synchronized result:")
    await simulate_todo_read()
    
    # 5. タスクトラッカーの状態を確認
    print("\n5️⃣ Checking task tracker status:")
    try:
        integration = TodoTrackerIntegration(
            auto_sync=False,
            user_id="claude_elder"
        )
        await integration.initialize()
        
        sync_status = await integration.get_sync_status()
        my_stats = sync_status.get("my_tasks_stats", {})
        
        print(f"   PostgreSQL Tasks:")
        print(f"   - Total: {my_stats.get('total', 0)}")
        print(f"   - Pending: {my_stats.get('pending', 0)}")
        print(f"   - In Progress: {my_stats.get('in_progress', 0)}")
        print(f"   - Completed: {my_stats.get('completed', 0)}")
        
        await integration.tracker.close()
        
    except Exception as e:
        print(f"   ❌ Error: {e}")
    
    print("\n✅ Test completed!")


def main():
    """メイン処理"""
    if len(sys.argv) < 2:
        print("Usage: claude-todo-hook <command>")
        print("Commands:")
        print("  test     - Run integration test")
        print("  write    - Simulate TodoWrite (provide JSON via stdin)")
        print("  read     - Simulate TodoRead")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "test":
        asyncio.run(test_integration())
    
    elif command == "write":
        # 標準入力からJSONを読む
        try:
            todos = json.load(sys.stdin)
            asyncio.run(simulate_todo_write(todos))
        except json.JSONDecodeError as e:
            print(f"❌ Invalid JSON: {e}")
            sys.exit(1)
    
    elif command == "read":
        asyncio.run(simulate_todo_read())
    
    else:
        print(f"❌ Unknown command: {command}")
        sys.exit(1)


if __name__ == "__main__":
    main()