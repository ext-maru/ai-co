#!/bin/bash
# EITMS Command Line Interface
# エルダーズギルド統合タスク管理システム コマンドラインツール

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
DATA_DIR="$PROJECT_ROOT/data"
LOG_DIR="$PROJECT_ROOT/logs"

# Functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

show_help() {
    echo "EITMS - Elders Guild Integrated Task Management System"
    echo
    echo "Usage: eitms <command> [options]"
    echo
    echo "Commands:"
    echo "  start                 Start EITMS services"
    echo "  stop                  Stop EITMS services"  
    echo "  status                Show system status"
    echo "  restart               Restart EITMS services"
    echo
    echo "Task Management:"
    echo "  list [--status STATUS]    List tasks (open, in_progress, completed, all)"
    echo "  create <title> [options]  Create new task"
    echo "  update <id> [options]     Update existing task"
    echo "  delete <id>              Delete task"
    echo "  show <id>                Show task details"
    echo "  search <query>           Search tasks"
    echo
    echo "AI Operations:"
    echo "  analyze <id>             Analyze task with AI"
    echo "  recommend <id>           Get AI recommendations"
    echo "  optimize [priorities]    Run AI optimization"
    echo
    echo "System Operations:"
    echo "  sync                     Force synchronization"
    echo "  check                    Run health check"
    echo "  logs [service]          Show logs"
    echo "  stats                   Show statistics"
    echo
    echo "Options for create/update:"
    echo "  --type TYPE             Task type (todo, project_task, issue, planning)"
    echo "  --priority PRIORITY     Priority (low, medium, high, critical)"
    echo "  --status STATUS         Status (created, in_progress, completed, blocked)"
    echo "  --description DESC      Task description"
    echo "  --estimate HOURS        Estimated hours"
    echo
    echo "Examples:"
    echo "  eitms create \"Implement authentication\" --type issue --priority high"
    echo "  eitms list --status open"
    echo "  eitms analyze task-123"
    echo "  eitms optimize priorities"
}

execute_sql() {
    local query="$1"
    sqlite3 "$DATA_DIR/eitms.db" "$query"
}

generate_task_id() {
    echo "task-$(date +%s)-$(shuf -i 1000-9999 -n 1)"
}

list_tasks() {
    local status_filter="$1"
    local db_path="$DATA_DIR/eitms.db"
    
    if [ ! -f "$db_path" ]; then
        log_error "Database not found. Please start EITMS first."
        return 1
    fi
    
    local query="SELECT id, title, task_type, status, priority, created_at FROM unified_tasks"
    
    if [ -n "$status_filter" ] && [ "$status_filter" != "all" ]; then
        query="$query WHERE status = '$status_filter'"
    fi
    
    query="$query ORDER BY created_at DESC LIMIT 20"
    
    echo -e "${BLUE}Task List${NC}"
    echo "----------------------------------------"
    printf "%-20s %-30s %-12s %-12s %-8s\n" "ID" "TITLE" "TYPE" "STATUS" "PRIORITY"
    echo "----------------------------------------"
    
    execute_sql "$query" | while IFS='|' read -r id title type status priority created_at; do
        # Truncate long titles
        if [ ${#title} -gt 28 ]; then
            title="${title:0:25}..."
        fi
        
        printf "%-20s %-30s %-12s %-12s %-8s\n" "$id" "$title" "$type" "$status" "$priority"
    done
}

create_task() {
    local title="$1"
    shift
    
    if [ -z "$title" ]; then
        log_error "Task title is required"
        return 1
    fi
    
    # Parse options
    local task_type="todo"
    local priority="medium"
    local status="created"
    local description=""
    local estimate=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --type)
                task_type="$2"
                shift 2
                ;;
            --priority)
                priority="$2"
                shift 2
                ;;
            --status)
                status="$2"
                shift 2
                ;;
            --description)
                description="$2"
                shift 2
                ;;
            --estimate)
                estimate="$2"
                shift 2
                ;;
            *)
                log_warning "Unknown option: $1"
                shift
                ;;
        esac
    done
    
    local task_id=$(generate_task_id)
    local now=$(date -Iseconds)
    
    local query="INSERT INTO unified_tasks (id, title, description, task_type, status, priority, created_at, updated_at"
    local values="VALUES ('$task_id', '$title', '$description', '$task_type', '$status', '$priority', '$now', '$now'"
    
    if [ -n "$estimate" ]; then
        query="$query, time_estimated"
        values="$values, $estimate"
    fi
    
    query="$query) $values)"
    
    if execute_sql "$query"; then
        log_info "Task created successfully: $task_id"
        echo "  Title: $title"
        echo "  Type: $task_type"
        echo "  Priority: $priority"
        echo "  Status: $status"
        [ -n "$description" ] && echo "  Description: $description"
        [ -n "$estimate" ] && echo "  Estimated Hours: $estimate"
    else
        log_error "Failed to create task"
        return 1
    fi
}

show_task() {
    local task_id="$1"
    
    if [ -z "$task_id" ]; then
        log_error "Task ID is required"
        return 1
    fi
    
    local query="SELECT * FROM unified_tasks WHERE id = '$task_id'"
    local result=$(execute_sql "$query")
    
    if [ -z "$result" ]; then
        log_error "Task not found: $task_id"
        return 1
    fi
    
    echo -e "${BLUE}Task Details: $task_id${NC}"
    echo "----------------------------------------"
    
    echo "$result" | while IFS='|' read -r id title description task_type status priority created_at updated_at started_at completed_at time_estimated time_spent assigned_to dependencies sub_tasks github_issue_number context; do
        echo "ID: $id"
        echo "Title: $title"
        [ -n "$description" ] && echo "Description: $description"
        echo "Type: $task_type"
        echo "Status: $status"
        echo "Priority: $priority"
        echo "Created: $created_at"
        echo "Updated: $updated_at"
        [ -n "$started_at" ] && echo "Started: $started_at"
        [ -n "$completed_at" ] && echo "Completed: $completed_at"
        [ -n "$time_estimated" ] && echo "Estimated Hours: $time_estimated"
        [ -n "$time_spent" ] && echo "Time Spent: $time_spent"
        [ -n "$assigned_to" ] && echo "Assigned To: $assigned_to"
        [ -n "$dependencies" ] && echo "Dependencies: $dependencies"
        [ -n "$sub_tasks" ] && echo "Sub Tasks: $sub_tasks"
        [ -n "$github_issue_number" ] && echo "GitHub Issue: #$github_issue_number"
        [ -n "$context" ] && echo "Context: $context"
    done
}

search_tasks() {
    local query="$1"
    
    if [ -z "$query" ]; then
        log_error "Search query is required"
        return 1
    fi
    
    local sql_query="SELECT id, title, task_type, status, priority FROM unified_tasks WHERE title LIKE '%$query%' OR description LIKE '%$query%' ORDER BY created_at DESC LIMIT 20"
    
    echo -e "${BLUE}Search Results for: $query${NC}"
    echo "----------------------------------------"
    printf "%-20s %-30s %-12s %-12s %-8s\n" "ID" "TITLE" "TYPE" "STATUS" "PRIORITY"
    echo "----------------------------------------"
    
    execute_sql "$sql_query" | while IFS='|' read -r id title type status priority; do
        # Truncate long titles
        if [ ${#title} -gt 28 ]; then
            title="${title:0:25}..."
        fi
        
        printf "%-20s %-30s %-12s %-12s %-8s\n" "$id" "$title" "$type" "$status" "$priority"
    done
}

show_stats() {
    echo -e "${BLUE}EITMS Statistics${NC}"
    echo "----------------------------------------"
    
    # Task counts by status
    echo "Tasks by Status:"
    execute_sql "SELECT status, COUNT(*) FROM unified_tasks GROUP BY status" | while IFS='|' read -r status count; do
        echo "  $status: $count"
    done
    echo
    
    # Task counts by type
    echo "Tasks by Type:"
    execute_sql "SELECT task_type, COUNT(*) FROM unified_tasks GROUP BY task_type" | while IFS='|' read -r type count; do
        echo "  $type: $count"
    done
    echo
    
    # Task counts by priority
    echo "Tasks by Priority:"
    execute_sql "SELECT priority, COUNT(*) FROM unified_tasks GROUP BY priority" | while IFS='|' read -r priority count; do
        echo "  $priority: $count"
    done
    echo
    
    # Total count
    local total=$(execute_sql "SELECT COUNT(*) FROM unified_tasks")
    echo "Total Tasks: $total"
    
    # Database size
    if [ -f "$DATA_DIR/eitms.db" ]; then
        local db_size=$(du -h "$DATA_DIR/eitms.db" | cut -f1)
        echo "Database Size: $db_size"
    fi
}

show_logs() {
    local service="$1"
    
    if [ -n "$service" ]; then
        local log_file="$LOG_DIR/${service}.log"
        if [ -f "$log_file" ]; then
            tail -50 "$log_file"
        else
            log_error "Log file not found: $log_file"
        fi
    else
        echo "Available log files:"
        ls -la "$LOG_DIR"/*.log 2>/dev/null || log_warning "No log files found"
    fi
}

# Main command handler
main() {
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    case $1 in
        start)
            "$SCRIPT_DIR/eitms_start.sh"
            ;;
        stop)
            "$SCRIPT_DIR/eitms_stop.sh" 2>/dev/null || log_warning "Stop script not implemented yet"
            ;;
        status)
            "$SCRIPT_DIR/eitms_status.sh"
            ;;
        restart)
            "$SCRIPT_DIR/eitms_stop.sh" 2>/dev/null || true
            sleep 2
            "$SCRIPT_DIR/eitms_start.sh"
            ;;
        list)
            list_tasks "$2"
            ;;
        create)
            shift
            create_task "$@"
            ;;
        show)
            show_task "$2"
            ;;
        search)
            search_tasks "$2"
            ;;
        analyze)
            log_info "AI analysis for task: $2"
            log_warning "AI analysis feature requires running AI service"
            ;;
        recommend)
            log_info "AI recommendations for task: $2"  
            log_warning "AI recommendation feature requires running AI service"
            ;;
        optimize)
            log_info "Running AI optimization..."
            log_warning "AI optimization feature requires running AI service"
            ;;
        sync)
            case "$2" in
                github)
                    log_info "GitHub → EITMS同期実行中..."
                    python3 -c "
import asyncio
import sys
sys.path.append('libs')
from eitms_github_integration import EitmsGitHubIntegration

class MockUnifiedManager:
    def __init__(self):
        self.tasks = {}
    async def create_task(self, **kwargs):
        task_id = f'github-sync-{len(self.tasks)}'
        self.tasks[task_id] = kwargs
        return task_id
    async def update_task_status(self, task_id, status):
        if task_id in self.tasks:
            self.tasks[task_id]['status'] = status
            return True
        return False
    @property
    def db(self):
        return type('MockDB', (), {
            'get_task': lambda self, task_id: None,
            'list_tasks': lambda self: []
        })()

async def main():
    manager = MockUnifiedManager()
    github_integration = EitmsGitHubIntegration(manager)
    if github_integration.enabled:
        stats = await github_integration.sync_from_github()
        print(f'GitHub同期完了: {stats}')
    else:
        print('GitHub統合が無効です')

asyncio.run(main())
"
                    ;;
                *)
                    log_info "同期オプション: github"
                    log_warning "Sync feature requires running sync services"
                    ;;
            esac
            ;;
        github)
            case "$2" in
                sync)
                    log_info "GitHub → EITMS同期実行中..."
                    python3 libs/eitms_github_integration.py
                    ;;
                issues)
                    log_info "GitHub Issues一覧表示"
                    python3 -c "
import asyncio
import sys
sys.path.append('libs')
from eitms_github_integration import GitHubClient
import os

async def main():
    token = os.getenv('GITHUB_TOKEN', '')
    owner = os.getenv('GITHUB_REPO_OWNER', '')
    repo = os.getenv('GITHUB_REPO_NAME', '')
    
    if not all([token, owner, repo]):
        print('GitHub設定が不完全です')
        return
    
    client = GitHubClient(token, owner, repo)
    issues = await client.get_issues('open')
    
    print(f'GitHub Issues ({len(issues)}件):')
    print('-' * 60)
    for issue in issues[:10]:  # 最新10件表示
        print(f'#{issue.number:3d} {issue.title[:50]}')
        if issue.labels:
            print(f'     Labels: {', '.join(issue.labels)}')
        print()

asyncio.run(main())
"
                    ;;
                create)
                    shift 2
                    title="$1"
                    if [ -z "$title" ]; then
                        log_error "Issue title is required"
                        exit 1
                    fi
                    log_info "GitHub Issue作成: $title"
                    python3 -c "
import asyncio
import sys
sys.path.append('libs')
from eitms_github_integration import GitHubClient
import os

async def main():
    token = os.getenv('GITHUB_TOKEN', '')
    owner = os.getenv('GITHUB_REPO_OWNER', '')
    repo = os.getenv('GITHUB_REPO_NAME', '')
    
    if not all([token, owner, repo]):
        print('GitHub設定が不完全です')
        return
    
    client = GitHubClient(token, owner, repo)
    issue = await client.create_issue('$title', 'EITMS経由で作成されたIssue')
    
    if issue:
        print(f'GitHub Issue作成完了: #{issue.number} - {issue.title}')
        print(f'URL: {issue.html_url}')

asyncio.run(main())
"
                    ;;
                *)
                    echo "GitHub操作:"
                    echo "  eitms github sync     - GitHub → EITMS同期"
                    echo "  eitms github issues   - GitHub Issues一覧"
                    echo "  eitms github create <title> - GitHub Issue作成"
                    ;;
            esac
            ;;
        check)
            "$SCRIPT_DIR/eitms_status.sh" --verbose
            ;;
        logs)
            show_logs "$2"
            ;;
        stats)
            show_stats
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            echo "Use 'eitms help' for available commands"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"