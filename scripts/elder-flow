#!/usr/bin/env python3
"""
Elder Flow CLI - エルダーフロー コマンドラインインターフェース
Created: 2025-07-12
Author: Claude Elder
Version: 1.0.0
"""

import argparse
import asyncio
import json
import sys
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from libs.elder_flow_integration import (
    ElderFlowWorkflow,
    execute_elder_flow,
    get_elder_flow_statistics,
    get_elder_flow_status,
)

# Retry wrapper import
from libs.elder_flow_retry_wrapper import execute_elder_flow_with_retry

# Elder Soul Integration imports
from libs.elder_flow_soul_integration import (
    ElderFlowSoulMode,
    execute_soul_enhanced_elder_flow,
    get_soul_enhanced_flow_status,
)
from libs.elder_system.flow.elder_flow_engine import ElderFlowEngine


def print_elder_banner():
    """Elder Flow バナー表示"""
    print("🌊 Elder Flow - Claude Elder Automation System")
    print("🏛️ エルダーズギルド完全自動化開発フロー")
    print("=" * 50)


async def cmd_execute(args):
    """Elder Flow実行"""
    print_elder_banner()

    description = args.description
    priority = args.priority
    auto_commit = not args.no_commit
    commit_message = args.commit_message
    soul_mode = getattr(args, "soul_mode", None)
    retry_on_lock = getattr(args, "retry", False)
    max_retries = getattr(args, "max_retries", 3)
    retry_interval = getattr(args, "retry_interval", 5)

    print(f"📋 Task: {description}")
    print(f"⚡ Priority: {priority}")
    print(f"📤 Auto-commit: {'Yes' if auto_commit else 'No'}")

    if soul_mode:
        print(f"🌟 Soul Mode: {soul_mode}")
        print("🧙‍♂️ Using Elder Soul integration")
    else:
        print("👑 Using default Claude Elder Soul integration")
    print()

    try:
        if soul_mode:
            # Elder Soul統合実行
            print("🌊 Starting Soul Enhanced Elder Flow...")
            task_id = await execute_soul_enhanced_elder_flow(
                description, priority, auto_commit, commit_message, soul_mode
            )

            print(f"✅ Soul Enhanced Elder Flow completed!")
            print(f"🆔 Task ID: {task_id}")

            # Soul統合結果表示
            status = await get_soul_enhanced_flow_status(task_id)
            if status:
                print(f"⏱️  Duration: {status['total_duration']:.2f}s")
                print(f"📊 Status: {status['soul_mode']}")

                summary = status.get("soul_results_summary", {})
                completion_rate = summary.get("completion_rate", 0)
                print(
                    f"🌟 Soul Completion: {completion_rate:.1%} ({summary.get('phases_completed', 0)}/5 phases)"
                )

                if status.get("error_message"):
                    print(f"⚠️  Error: {status['error_message']}")
        else:
            # リトライ機能付きElder Flow実行
            if retry_on_lock:
                print("🔄 Retry mode enabled")
                print(f"   Max retries: {max_retries}")
                print(f"   Retry interval: {retry_interval}s")
                print()

            print("🚀 Starting Elder Flow execution...")

            # 新しいElder Flow Engineを使用
            result = await execute_elder_flow_with_retry(
                task_name=description,
                priority=priority,
                auto_retry=retry_on_lock,
                max_retries=max_retries,
                retry_interval=retry_interval,
            )

            if result.get("error") == "Task already running" and result.get(
                "retry_required"
            ):
                # リトライが必要な場合の処理
                print(f"\n💡 ヒント: {result.get('retry_suggestion', '')}")
                return 1
            elif "error" in result:
                print(f"❌ Elder Flow failed: {result['error']}")
                return 1
            else:
                print(f"✅ Elder Flow completed successfully!")
                print(f"🆔 Flow ID: {result.get('flow_id', 'N/A')}")

                if result.get("execution_time"):
                    print(f"⏱️  Completed at: {result['execution_time']}")

    except Exception as e:
        print(f"❌ Elder Flow failed: {str(e)}")
        return 1

    return 0


async def cmd_status(args):
    """Elder Flow状態確認"""
    print_elder_banner()

    if args.task_id:
        # 特定タスクの状態
        status = get_elder_flow_status(args.task_id)
        if not status:
            print(f"❌ Task not found: {args.task_id}")
            return 1

        print(f"🆔 Task ID: {args.task_id}")
        print(f"📋 Description: {status['description']}")
        print(f"📊 Status: {status['status']}")
        print(f"⚡ Priority: {status['priority']}")
        print(f"⏱️  Duration: {status['total_duration']:.2f}s")

        if status.get("orchestration_result"):
            print(f"🏛️ Orchestration: {status['orchestration_result']['status']}")

        if status.get("execution_result"):
            print(f"🤖 Execution: {status['execution_result']['total_tasks']} tasks")

        if status.get("quality_result"):
            quality = status["quality_result"]
            print(
                f"🔍 Quality: {quality['overall_status']} (Score: {quality['overall_score']:.2f}/10)"
            )

        if status.get("report_result"):
            print(f"📊 Reports: {status['report_result']['reports_saved']}")

        if status.get("git_result"):
            git = status["git_result"]
            print(f"📤 Git: {'✅' if git['commit_success'] else '❌'}")

        if args.verbose and status.get("error_message"):
            print(f"⚠️  Error: {status['error_message']}")

    else:
        # 全体統計
        stats = get_elder_flow_statistics()
        print(f"📊 Elder Flow Statistics")
        print(f"📈 Total Tasks: {stats['total_tasks']}")
        print(f"✅ Completed: {stats['completed_tasks']}")
        print(f"❌ Failed: {stats['failed_tasks']}")
        print(f"⏳ Active: {stats['active_tasks']}")
        print(f"🎯 Success Rate: {stats['success_rate']:.1f}%")
        print(f"⏱️  Average Duration: {stats['average_duration']:.2f}s")

    return 0


async def cmd_workflow(args):
    """Elder Flow ワークフロー"""
    print_elder_banner()

    if args.action == "create":
        workflow = ElderFlowWorkflow()

        # ワークフロー定義（例）
        steps = [
            {
                "type": "elder_flow",
                "description": args.description or "Step 1",
                "priority": "high",
            },
            {
                "type": "elder_flow",
                "description": "Add comprehensive tests",
                "priority": "medium",
            },
            {
                "type": "elder_flow",
                "description": "Update documentation",
                "priority": "low",
            },
        ]

        workflow_id = workflow.create_workflow(args.name, steps)
        print(f"✅ Workflow created: {workflow_id}")

        if args.execute:
            print("🚀 Executing workflow...")
            result = await workflow.execute_workflow(workflow_id)
            print(f"✅ Workflow completed: {result['total_steps']} steps")

    return 0


async def cmd_cleanup(args):
    """古いロックのクリーンアップ"""
    print_elder_banner()
    print("🧹 Cleaning up stale locks...")

    engine = ElderFlowEngine()
    result = await engine.cleanup_stale_locks()

    if result.get("status") == "success":
        print(f"✅ {result['cleaned_locks']} stale locks cleaned up")
    else:
        print(f"❌ Cleanup failed: {result.get('error', 'Unknown error')}")
        return 1

    return 0


async def cmd_active(args):
    """アクティブタスクの表示"""
    print_elder_banner()
    print("📋 Active Tasks")
    print()

    engine = ElderFlowEngine()
    result = await engine.get_active_tasks()

    if result.get("status") == "success":
        active_count = result.get("active_tasks_count", 0)

        if active_count == 0:
            print("✨ No active tasks")
        else:
            print(f"🔥 {active_count} active task(s):")
            print()

            for task in result.get("active_tasks", []):
                print(f"  📌 {task['task_id']}")
                print(f"     PID: {task['pid']}")
                print(f"     Started: {task['started_at']}")

                # リトライ推奨コマンドを表示
                print(f"     Retry: elder-flow execute --retry \"{task['task_id']}\"")
                print()
    else:
        print(f"❌ Failed to get active tasks: {result.get('error', 'Unknown error')}")
        return 1

    return 0


async def cmd_souls(args):
    """Elder Soul管理"""
    print_elder_banner()

    if args.action == "status":
        print("🌟 Elder Soul System Status")
        print("=" * 30)

        try:
            from libs.elder_flow_soul_connector import get_elder_flow_soul_connector

            connector = await get_elder_flow_soul_connector()

            # アクティブセッション表示
            sessions = await connector.list_active_soul_sessions()

            if sessions:
                print(f"🔥 Active Soul Sessions: {len(sessions)}")
                for session in sessions:
                    print(
                        f"  🌊 {session['session_id']}: {session['phase']} ({session['soul_count']} souls)"
                    )
            else:
                print("💤 No active soul sessions")

        except Exception as e:
            print(f"❌ Failed to get soul status: {e}")

    elif args.action == "summon":
        phase = args.phase
        description = args.description or "Elder Flow test task"

        print(f"🌟 Summoning souls for {phase}...")

        try:
            from libs.elder_flow_soul_connector import summon_souls_for_elder_flow

            result = await summon_souls_for_elder_flow(phase, description, "medium")

            print(
                f"✅ Summoned {result['summoned_count']}/{result['total_souls']} souls"
            )
            print(f"🆔 Session ID: {result['session_id']}")

            for soul_id, soul_info in result["souls"].items():
                status_icon = "✅" if soul_info.get("status") == "active" else "❌"
                print(
                    f"  {status_icon} {soul_id}: {soul_info.get('purpose', 'Unknown purpose')}"
                )

        except Exception as e:
            print(f"❌ Failed to summon souls: {e}")

    elif args.action == "dismiss":
        session_id = args.session_id

        print(f"🌅 Dismissing soul session: {session_id}")

        try:
            from libs.elder_flow_soul_connector import dismiss_elder_flow_souls

            result = await dismiss_elder_flow_souls(session_id)

            print(f"✅ Dismissed {result['dismissed_souls']} souls")

        except Exception as e:
            print(f"❌ Failed to dismiss souls: {e}")

    return 0


def cmd_help(args):
    """Elder Flow ヘルプ"""
    print_elder_banner()
    print("🔧 Elder Flow Commands:")
    print()
    print("  execute <description>    - Elder Flow実行 (デフォルト: Claude Elder魂統合)")
    print("    --priority <level>     - 優先度 (low/medium/high)")
    print("    --soul-mode <mode>     - Soul統合モード (soul_enhanced/full_soul)")
    print("                           - 未指定時: Claude Elder魂がデフォルト有効")
    print("    --no-commit            - 自動コミット無効")
    print("    --commit-message <msg> - カスタムコミットメッセージ")
    print("    --retry                - ロック時の自動リトライ有効")
    print("    --max-retries N        - 最大リトライ回数 (デフォルト: 3)")
    print("    --retry-interval N     - リトライ間隔(秒) (デフォルト: 5)")
    print()
    print("  status [task_id]         - 状態確認")
    print("    --verbose              - 詳細表示")
    print()
    print("  souls <action>           - Elder Soul管理")
    print("    status                 - アクティブ魂セッション確認")
    print("    summon <phase>         - 指定フェーズの魂召喚")
    print("    dismiss <session_id>   - 魂セッション解散")
    print()
    print("  workflow create <name>   - ワークフロー作成")
    print("    --execute              - 作成後すぐ実行")
    print("    --description <desc>   - ワークフロー説明")
    print()
    print("  cleanup                  - 古いロックのクリーンアップ")
    print()
    print("  active                   - アクティブタスクの表示")
    print()
    print("  help                     - このヘルプ")
    print()
    print("👑 Default Claude Elder Soul Examples:")
    print(
        "  elder-flow execute 'OAuth2.0認証システム実装' --priority high  # Claude Elder魂自動統合"
    )
    print(
        "  elder-flow execute 'バグ修正' --retry --max-retries 5         # Claude Elder魂自動統合"
    )
    print("  elder-flow status")
    print("  elder-flow active")
    print("  elder-flow cleanup")
    print("  elder-flow workflow create oauth_system --execute")
    print()
    print("🌟 Advanced Soul Enhanced Examples:")
    print(
        "  elder-flow execute 'OAuth2.0実装' --soul-mode soul_enhanced    # より高度なSoul統合"
    )
    print(
        "  elder-flow execute 'バグ修正' --soul-mode full_soul --priority high  # 完全Soul統合"
    )
    print("  elder-flow souls status")
    print("  elder-flow souls summon phase1_analysis")
    print()
    print("📋 Available Soul Phases:")
    print(
        "  phase1_analysis  - 4賢者会議 (knowledge_sage, task_sage, rag_sage, incident_sage)"
    )
    print(
        "  phase2_execution - サーバント実行 (code_servant, test_guardian, quality_inspector)"
    )
    print(
        "  phase3_quality   - 品質ゲート (security_auditor, performance_monitor, documentation_keeper)"
    )
    print(
        "  phase4_reporting - 評議会報告 (council_secretary, report_generator, approval_manager)"
    )
    print("  phase5_git       - Git自動化 (git_master, version_guardian, deploy_manager)")
    print()


def main():
    """メイン関数"""
    parser = argparse.ArgumentParser(
        description="Elder Flow - Claude Elder Automation System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )

    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # execute コマンド
    parser_execute = subparsers.add_parser("execute", help="Execute Elder Flow")
    parser_execute.add_argument("description", help="Task description")
    parser_execute.add_argument(
        "--priority",
        choices=["low", "medium", "high"],
        default="medium",
        help="Task priority",
    )
    parser_execute.add_argument(
        "--soul-mode",
        choices=["soul_enhanced", "full_soul"],
        help="Elder Soul integration mode",
    )
    parser_execute.add_argument(
        "--no-commit", action="store_true", help="Disable auto-commit"
    )
    parser_execute.add_argument("--commit-message", help="Custom commit message")
    parser_execute.add_argument(
        "--retry", action="store_true", help="Enable automatic retry on lock"
    )
    parser_execute.add_argument(
        "--max-retries", type=int, default=3, help="Maximum retry attempts (default: 3)"
    )
    parser_execute.add_argument(
        "--retry-interval",
        type=int,
        default=5,
        help="Retry interval in seconds (default: 5)",
    )
    parser_execute.set_defaults(func=cmd_execute)

    # status コマンド
    parser_status = subparsers.add_parser("status", help="Check Elder Flow status")
    parser_status.add_argument("task_id", nargs="?", help="Specific task ID")
    parser_status.add_argument(
        "--verbose", "-v", action="store_true", help="Verbose output"
    )
    parser_status.set_defaults(func=cmd_status)

    # souls コマンド
    parser_souls = subparsers.add_parser("souls", help="Elder Soul management")
    parser_souls.add_argument(
        "action", choices=["status", "summon", "dismiss"], help="Soul action"
    )
    parser_souls.add_argument("phase", nargs="?", help="Phase for summon action")
    parser_souls.add_argument(
        "session_id", nargs="?", help="Session ID for dismiss action"
    )
    parser_souls.add_argument("--description", help="Task description for summon")
    parser_souls.set_defaults(func=cmd_souls)

    # workflow コマンド
    parser_workflow = subparsers.add_parser(
        "workflow", help="Elder Flow workflow management"
    )
    parser_workflow.add_argument("action", choices=["create"], help="Workflow action")
    parser_workflow.add_argument("name", help="Workflow name")
    parser_workflow.add_argument(
        "--execute", action="store_true", help="Execute immediately"
    )
    parser_workflow.add_argument("--description", help="Workflow description")
    parser_workflow.set_defaults(func=cmd_workflow)

    # cleanup コマンド
    parser_cleanup = subparsers.add_parser("cleanup", help="Clean up stale locks")
    parser_cleanup.set_defaults(func=cmd_cleanup)

    # active コマンド
    parser_active = subparsers.add_parser("active", help="Show active tasks")
    parser_active.set_defaults(func=cmd_active)

    # help コマンド
    parser_help = subparsers.add_parser("help", help="Show help")
    parser_help.set_defaults(func=cmd_help)

    args = parser.parse_args()

    if not args.command:
        cmd_help(args)
        return 0

    if args.command == "help":
        cmd_help(args)
        return 0

    # 非同期コマンド実行
    if asyncio.iscoroutinefunction(args.func):
        return asyncio.run(args.func(args))
    else:
        return args.func(args)


if __name__ == "__main__":
    sys.exit(main())
