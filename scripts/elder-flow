#!/usr/bin/env python3
"""
Elder Flow CLI - エルダーフロー コマンドラインインターフェース
Created: 2025-07-12
Author: Claude Elder
Version: 1.0.0
"""

import asyncio
import sys
import argparse
import json
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from libs.elder_flow_integration import (
    execute_elder_flow,
    get_elder_flow_status,
    get_elder_flow_statistics,
    ElderFlowWorkflow
)

def print_elder_banner():
    """Elder Flow バナー表示"""
    print("🌊 Elder Flow - Claude Elder Automation System")
    print("🏛️ エルダーズギルド完全自動化開発フロー")
    print("=" * 50)

async def cmd_execute(args):
    """Elder Flow実行"""
    print_elder_banner()

    description = args.description
    priority = args.priority
    auto_commit = not args.no_commit
    commit_message = args.commit_message

    print(f"📋 Task: {description}")
    print(f"⚡ Priority: {priority}")
    print(f"📤 Auto-commit: {'Yes' if auto_commit else 'No'}")
    print()

    try:
        print("🚀 Starting Elder Flow execution...")
        task_id = await execute_elder_flow(description, priority, auto_commit, commit_message)

        print(f"✅ Elder Flow completed successfully!")
        print(f"🆔 Task ID: {task_id}")

        # 結果表示
        status = get_elder_flow_status(task_id)
        if status:
            print(f"⏱️  Duration: {status['total_duration']:.2f}s")
            print(f"📊 Status: {status['status']}")

            if status.get('quality_result'):
                quality = status['quality_result']
                print(f"🔍 Quality: {quality['overall_status']} (Score: {quality['overall_score']:.2f}/10)")

            if status.get('git_result') and status['git_result']['commit_success']:
                print(f"📤 Git: {status['git_result']['commit_hash'][:8]}")

    except Exception as e:
        print(f"❌ Elder Flow failed: {str(e)}")
        return 1

    return 0

async def cmd_status(args):
    """Elder Flow状態確認"""
    print_elder_banner()

    if args.task_id:
        # 特定タスクの状態
        status = get_elder_flow_status(args.task_id)
        if not status:
            print(f"❌ Task not found: {args.task_id}")
            return 1

        print(f"🆔 Task ID: {args.task_id}")
        print(f"📋 Description: {status['description']}")
        print(f"📊 Status: {status['status']}")
        print(f"⚡ Priority: {status['priority']}")
        print(f"⏱️  Duration: {status['total_duration']:.2f}s")

        if status.get('orchestration_result'):
            print(f"🏛️ Orchestration: {status['orchestration_result']['status']}")

        if status.get('execution_result'):
            print(f"🤖 Execution: {status['execution_result']['total_tasks']} tasks")

        if status.get('quality_result'):
            quality = status['quality_result']
            print(f"🔍 Quality: {quality['overall_status']} (Score: {quality['overall_score']:.2f}/10)")

        if status.get('report_result'):
            print(f"📊 Reports: {status['report_result']['reports_saved']}")

        if status.get('git_result'):
            git = status['git_result']
            print(f"📤 Git: {'✅' if git['commit_success'] else '❌'}")

        if args.verbose and status.get('error_message'):
            print(f"⚠️  Error: {status['error_message']}")

    else:
        # 全体統計
        stats = get_elder_flow_statistics()
        print(f"📊 Elder Flow Statistics")
        print(f"📈 Total Tasks: {stats['total_tasks']}")
        print(f"✅ Completed: {stats['completed_tasks']}")
        print(f"❌ Failed: {stats['failed_tasks']}")
        print(f"⏳ Active: {stats['active_tasks']}")
        print(f"🎯 Success Rate: {stats['success_rate']:.1f}%")
        print(f"⏱️  Average Duration: {stats['average_duration']:.2f}s")

    return 0

async def cmd_workflow(args):
    """Elder Flow ワークフロー"""
    print_elder_banner()

    if args.action == "create":
        workflow = ElderFlowWorkflow()

        # ワークフロー定義（例）
        steps = [
            {"type": "elder_flow", "description": args.description or "Step 1", "priority": "high"},
            {"type": "elder_flow", "description": "Add comprehensive tests", "priority": "medium"},
            {"type": "elder_flow", "description": "Update documentation", "priority": "low"}
        ]

        workflow_id = workflow.create_workflow(args.name, steps)
        print(f"✅ Workflow created: {workflow_id}")

        if args.execute:
            print("🚀 Executing workflow...")
            result = await workflow.execute_workflow(workflow_id)
            print(f"✅ Workflow completed: {result['total_steps']} steps")

    return 0

def cmd_help(args):
    """Elder Flow ヘルプ"""
    print_elder_banner()
    print("🔧 Elder Flow Commands:")
    print()
    print("  execute <description>    - Elder Flow実行")
    print("    --priority <level>     - 優先度 (low/medium/high)")
    print("    --no-commit            - 自動コミット無効")
    print("    --commit-message <msg> - カスタムコミットメッセージ")
    print()
    print("  status [task_id]         - 状態確認")
    print("    --verbose              - 詳細表示")
    print()
    print("  workflow create <name>   - ワークフロー作成")
    print("    --execute              - 作成後すぐ実行")
    print("    --description <desc>   - ワークフロー説明")
    print()
    print("  help                     - このヘルプ")
    print()
    print("🌊 Examples:")
    print("  elder-flow execute 'OAuth2.0認証システム実装' --priority high")
    print("  elder-flow status")
    print("  elder-flow workflow create oauth_system --execute")
    print()

def main():
    """メイン関数"""
    parser = argparse.ArgumentParser(
        description="Elder Flow - Claude Elder Automation System",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # execute コマンド
    parser_execute = subparsers.add_parser('execute', help='Execute Elder Flow')
    parser_execute.add_argument('description', help='Task description')
    parser_execute.add_argument('--priority', choices=['low', 'medium', 'high'], default='medium', help='Task priority')
    parser_execute.add_argument('--no-commit', action='store_true', help='Disable auto-commit')
    parser_execute.add_argument('--commit-message', help='Custom commit message')
    parser_execute.set_defaults(func=cmd_execute)

    # status コマンド
    parser_status = subparsers.add_parser('status', help='Check Elder Flow status')
    parser_status.add_argument('task_id', nargs='?', help='Specific task ID')
    parser_status.add_argument('--verbose', '-v', action='store_true', help='Verbose output')
    parser_status.set_defaults(func=cmd_status)

    # workflow コマンド
    parser_workflow = subparsers.add_parser('workflow', help='Elder Flow workflow management')
    parser_workflow.add_argument('action', choices=['create'], help='Workflow action')
    parser_workflow.add_argument('name', help='Workflow name')
    parser_workflow.add_argument('--execute', action='store_true', help='Execute immediately')
    parser_workflow.add_argument('--description', help='Workflow description')
    parser_workflow.set_defaults(func=cmd_workflow)

    # help コマンド
    parser_help = subparsers.add_parser('help', help='Show help')
    parser_help.set_defaults(func=cmd_help)

    args = parser.parse_args()

    if not args.command:
        cmd_help(args)
        return 0

    if args.command == 'help':
        cmd_help(args)
        return 0

    # 非同期コマンド実行
    if asyncio.iscoroutinefunction(args.func):
        return asyncio.run(args.func(args))
    else:
        return args.func(args)

if __name__ == '__main__':
    sys.exit(main())
