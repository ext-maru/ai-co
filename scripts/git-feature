#\!/bin/bash
# 🌳 Feature Branch自動化ツール
# エルダー評議会令第32号準拠

set -e

# カラー定義
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ヘルプ表示
show_help() {
    cat << EOF
🌳 Feature Branch自動化ツール

使用方法:
    ./scripts/git-feature <issue-number> <description> [branch-type]

引数:
    issue-number : Issue番号 (必須)
    description  : ブランチ説明 (必須、ハイフンで区切られる)
    branch-type  : ブランチタイプ (省略時: feature)
                   - feature : 新機能
                   - fix     : バグ修正  
                   - docs    : ドキュメント
                   - chore   : 雑務

例:
    ./scripts/git-feature 31 feature-branch-tools
    ./scripts/git-feature 32 bug-fix fix
    ./scripts/git-feature 33 update-readme docs

エルダー評議会令第32号:
    1. 1 Issue = 1 Branch = 1 PR の原則
    2. mainブランチへの直接プッシュ禁止
    3. すべての変更はFeature Branch経由
EOF
}

# エラー処理
error() {
    echo -e "${RED}❌ エラー: $1${NC}" >&2
    exit 1
}

# 成功メッセージ
success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# 情報メッセージ
info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# 警告メッセージ
warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# 引数チェック
if [ $# -lt 2 ]; then
    show_help
    exit 1
fi

ISSUE_NUMBER=$1
DESCRIPTION=$2
BRANCH_TYPE=${3:-feature}

# Issue番号の検証
if \! [[ "$ISSUE_NUMBER" =~ ^[0-9]+$ ]]; then
    error "Issue番号は数値である必要があります: $ISSUE_NUMBER"
fi

# ブランチタイプの検証
case $BRANCH_TYPE in
    feature < /dev/null | fix|docs|chore)
        ;;
    *)
        error "無効なブランチタイプ: $BRANCH_TYPE (feature/fix/docs/chore のいずれかを指定)"
        ;;
esac

# ブランチ名の生成
BRANCH_NAME="${BRANCH_TYPE}/issue-${ISSUE_NUMBER}-${DESCRIPTION}"

# Git状態確認
if \! git rev-parse --git-dir > /dev/null 2>&1; then
    error "Gitリポジトリではありません"
fi

# 変更確認
if \! git diff-index --quiet HEAD --; then
    warning "コミットされていない変更があります"
    echo -n "続行しますか？ (y/N): "
    read -r response
    if [[ \! "$response" =~ ^[Yy]$ ]]; then
        info "中止しました"
        exit 0
    fi
fi

# 現在のブランチ確認
CURRENT_BRANCH=$(git branch --show-current)
info "現在のブランチ: $CURRENT_BRANCH"

# mainブランチに切り替え
if [ "$CURRENT_BRANCH" \!= "main" ]; then
    info "mainブランチに切り替えます..."
    git checkout main || error "mainブランチへの切り替えに失敗しました"
fi

# 最新の状態を取得
info "リモートから最新の状態を取得します..."
git pull origin main || warning "リモートからの取得に失敗しました（続行します）"

# ブランチ作成
info "Feature Branchを作成します: $BRANCH_NAME"
git checkout -b "$BRANCH_NAME" || error "ブランチの作成に失敗しました"

# リモートにプッシュ
info "リモートにブランチをプッシュします..."
git push -u origin "$BRANCH_NAME" || error "リモートへのプッシュに失敗しました"

# PR作成用のテンプレート生成
PR_TEMPLATE=$(cat << EOF
## 📋 概要
Issue #${ISSUE_NUMBER} の実装

## 🔧 変更内容
- [ ] 実装内容1
- [ ] 実装内容2
- [ ] 実装内容3

## 🧪 テスト
- [ ] ユニットテスト追加
- [ ] 既存テストの確認
- [ ] 手動テスト完了

## 📸 スクリーンショット
<\!-- 必要に応じて -->

## 📝 注意事項
<\!-- レビュアーへの注意事項 -->

Closes #${ISSUE_NUMBER}
EOF
)

# PR作成コマンドの表示
echo ""
success "Feature Branch '$BRANCH_NAME' を作成しました！"
echo ""
info "次のステップ:"
echo "1. 開発を進めてください"
echo "2. コミット時はIssue番号を含めてください:"
echo "   git commit -m \"feat: 機能の説明 (#${ISSUE_NUMBER})\""
echo ""
echo "3. PR作成時は以下のコマンドを使用:"
echo -e "${YELLOW}gh pr create --title \"${BRANCH_TYPE}: Issue #${ISSUE_NUMBER} の実装\" --body \"\$(cat << 'EOF'${NC}"
echo "$PR_TEMPLATE"
echo -e "${YELLOW}EOF${NC}"
echo -e "${YELLOW})\"${NC}"
echo ""
info "または、GitHub WebUIから作成して上記のテンプレートを使用してください"

# 現在の状態を表示
echo ""
info "現在の状態:"
git status --short --branch
