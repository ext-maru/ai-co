#!/bin/bash

# エルダーズギルド Feature Branch作成ヘルパースクリプト
# Usage: git-feature <issue-number> [description]
# Example: git-feature 17 data-model

set -e

# 色定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 使用方法を表示
usage() {
    echo -e "${BLUE}エルダーズギルド Feature Branch作成ツール${NC}"
    echo ""
    echo "使用方法:"
    echo "  git-feature <issue-number> [description]"
    echo ""
    echo "例:"
    echo "  git-feature 17 data-model"
    echo "  git-feature 23 fix-api-error"
    echo ""
    echo "オプション:"
    echo "  -h, --help    このヘルプを表示"
    echo "  -t, --type    ブランチタイプを指定 (default: feature)"
    echo "                使用可能: feature, fix, docs, chore, test"
    exit 1
}

# エラー表示
error() {
    echo -e "${RED}❌ エラー: $1${NC}" >&2
    exit 1
}

# 成功表示
success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# 情報表示
info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# 警告表示
warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# デフォルトのブランチタイプ
BRANCH_TYPE="feature"

# 引数解析
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -t|--type)
            BRANCH_TYPE="$2"
            shift 2
            ;;
        *)
            if [[ -z "$ISSUE_NUMBER" ]]; then
                ISSUE_NUMBER="$1"
            elif [[ -z "$DESCRIPTION" ]]; then
                DESCRIPTION="$1"
            fi
            shift
            ;;
    esac
done

# Issue番号の確認
if [[ -z "$ISSUE_NUMBER" ]]; then
    error "Issue番号を指定してください"
fi

# Issue番号が数字かチェック
if ! [[ "$ISSUE_NUMBER" =~ ^[0-9]+$ ]]; then
    error "Issue番号は数字で指定してください"
fi

# ブランチタイプの妥当性チェック
case $BRANCH_TYPE in
    feature|fix|docs|chore|test|refactor|perf)
        ;;
    *)
        error "不正なブランチタイプ: $BRANCH_TYPE"
        ;;
esac

# Gitリポジトリかチェック
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    error "Gitリポジトリではありません"
fi

# 現在のブランチ確認
CURRENT_BRANCH=$(git branch --show-current)
info "現在のブランチ: $CURRENT_BRANCH"

# mainブランチに切り替え
if [[ "$CURRENT_BRANCH" != "main" ]]; then
    warning "mainブランチに切り替えます..."
    
    # 未コミットの変更があるかチェック
    if ! git diff --quiet || ! git diff --staged --quiet; then
        warning "未コミットの変更があります"
        echo "1) stashして続行"
        echo "2) 中止"
        read -p "選択してください (1/2): " choice
        
        case $choice in
            1)
                git stash push -m "auto-stash before creating feature branch"
                success "変更をstashしました"
                ;;
            2)
                error "操作を中止しました"
                ;;
            *)
                error "無効な選択です"
                ;;
        esac
    fi
    
    git checkout main
fi

# mainブランチを最新に更新
info "mainブランチを最新に更新しています..."
git pull origin main

# ブランチ名の生成
if [[ -n "$DESCRIPTION" ]]; then
    BRANCH_NAME="${BRANCH_TYPE}/issue-${ISSUE_NUMBER}-${DESCRIPTION}"
else
    BRANCH_NAME="${BRANCH_TYPE}/issue-${ISSUE_NUMBER}"
fi

# ブランチ名の確認
echo ""
info "作成するブランチ: $BRANCH_NAME"
read -p "このブランチ名でよろしいですか？ (y/n): " confirm

if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    read -p "ブランチ名を入力してください: " CUSTOM_BRANCH_NAME
    if [[ -n "$CUSTOM_BRANCH_NAME" ]]; then
        BRANCH_NAME="$CUSTOM_BRANCH_NAME"
    else
        error "ブランチ名が入力されませんでした"
    fi
fi

# ブランチが既に存在するかチェック
if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
    error "ブランチ '$BRANCH_NAME' は既に存在します"
fi

# Feature Branch作成
info "Feature Branchを作成しています..."
git checkout -b "$BRANCH_NAME"
success "Feature Branch '$BRANCH_NAME' を作成しました"

# 初回コミット用のテンプレート表示
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🎯 次のステップ:"
echo ""
echo "1. 開発を開始してください"
echo "2. コミット時は以下のフォーマットを使用:"
echo ""
echo "   git commit -m \"${BRANCH_TYPE}: 変更内容の説明 (#${ISSUE_NUMBER})\""
echo ""
echo "3. 初回プッシュ:"
echo ""
echo "   git push -u origin $BRANCH_NAME"
echo ""
echo "4. PR作成時は本文に以下を含める:"
echo ""
echo "   Closes #${ISSUE_NUMBER}"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# GitHub Issue URLを表示（オプション）
if command -v gh &> /dev/null; then
    REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null || echo "")
    if [[ -n "$REPO" ]]; then
        echo ""
        info "📋 Issue URL: https://github.com/$REPO/issues/$ISSUE_NUMBER"
    fi
fi

# VS Codeが起動している場合は通知
if command -v code &> /dev/null && [[ -n "$VSCODE_IPC_HOOK_CLI" ]]; then
    echo ""
    info "💡 VS Codeでブランチが切り替わりました"
fi