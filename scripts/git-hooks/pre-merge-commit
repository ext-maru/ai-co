#!/bin/bash
#
# 🏛️ Elder Guild Pre-Merge Quality Gate
# エルダーズギルド マージ前品質ゲート
#
# Features:
# - マージ前の統合品質チェック
# - ブランチ間の品質比較分析
# - マージ品質レポート生成
# - 品質基準未満でのマージ阻止
#

set -euo pipefail
IFS=$'\n\t'

# セキュリティ設定
export PATH="/usr/local/bin:/usr/bin:/bin"
umask 077

# Root実行防止
if [[ $(id -u) -eq 0 ]]; then
    echo "❌ ERROR: Security policy violation - script cannot run as root"
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Project root
PROJECT_ROOT="/home/aicompany/ai_co"

print_header() {
    echo -e "${PURPLE}${BOLD}"
    echo "🏛️  ELDER GUILD PRE-MERGE QUALITY GATE"
    echo "    エルダーズギルド マージ前品質ゲート"
    echo "    Protecting the main branch with quality standards"
    echo -e "${NC}"
}

print_status() {
    echo -e "${CYAN}🔧 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if quality bypass is enabled
check_bypass() {
    if [[ "${ELDER_GUILD_BYPASS:-}" == "1" ]]; then
        print_warning "Quality bypass enabled - skipping merge quality checks"
        exit 0
    fi
}

# Validate and sanitize branch names
validate_branch_name() {
    local branch="$1"
    # Allow only alphanumeric, hyphens, underscores, and forward slashes
    if [[ ! "$branch" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
        print_error "Invalid branch name: $branch"
        exit 1
    fi
    echo "$branch"
}

# Get current branch info with validation
get_branch_info() {
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    TARGET_BRANCH=${1:-main}
    
    # Validate branch names
    CURRENT_BRANCH=$(validate_branch_name "$CURRENT_BRANCH")
    TARGET_BRANCH=$(validate_branch_name "$TARGET_BRANCH")
    
    print_status "Analyzing merge: $CURRENT_BRANCH → $TARGET_BRANCH"
}

# Run quality analysis on merge candidate
run_merge_quality_analysis() {
    print_status "Running comprehensive merge quality analysis..."
    
    cd "$PROJECT_ROOT"
    
    # Get list of changed files
    CHANGED_FILES=$(git diff --name-only HEAD $TARGET_BRANCH | grep '\.py$' || true)
    
    if [[ -z "$CHANGED_FILES" ]]; then
        print_success "No Python files changed - quality check passed"
        return 0
    fi
    
    print_status "Analyzing changed files:"
    echo "$CHANGED_FILES" | while read -r file; do
        echo "  - $file"
    done
    
    # Run quality check on each changed file
    QUALITY_FAILED=0
    TOTAL_SCORE=0
    FILE_COUNT=0
    
    echo "$CHANGED_FILES" | while read -r file; do
        if [[ -f "$file" ]]; then
            print_status "Checking quality of: $file"
            
            # Use 4 Sages quality analysis if available (SECURE)
            if [[ -f "$PROJECT_ROOT/libs/four_sages_quality_bridge.py" ]]; then
                # セキュアな実行のため、Elder Guild Security Validatorを使用
                QUALITY_RESULT=$(python3 -c "
import sys
import os
sys.path.insert(0, '$PROJECT_ROOT')
from libs.elder_guild_security_validator import execute_secure_python

# 安全なファイルパス取得
file_path = '$file'

# セキュアなスクリプト
secure_script = '''
import asyncio
import sys
sys.path.insert(0, '/home/aicompany/ai_co')
from libs.four_sages_quality_bridge import four_sages_analyze_file

async def main():
    try:
        result = await four_sages_analyze_file({file_placeholder})
        if result and \"analysis\" in result:
            score = result[\"analysis\"].get(\"quality_score\", 0)
            print(f\"SCORE:{score}\")
            
            # Check Iron Will compliance
            iron_will = result[\"analysis\"].get(\"iron_will_compliance\", True)
            if not iron_will:
                print(\"IRON_WILL_VIOLATION\")
        else:
            print(\"SCORE:70\")
    except Exception as e:
        print(f\"ERROR:{str(e)}\")
        print(\"SCORE:70\")

asyncio.run(main())
'''

# セキュア実行
result = execute_secure_python(secure_script, file_path, 60)
if result['success']:
    print(result['stdout'])
else:
    print('SCORE:70')
    print(f\"ERROR:{result.get('error', 'Unknown error')}\")
" 2>/dev/null || echo "SCORE:70")
                
                # Extract score
                SCORE=$(echo "$QUALITY_RESULT" | grep "^SCORE:" | cut -d: -f2 || echo "70")
                IRON_VIOLATION=$(echo "$QUALITY_RESULT" | grep "IRON_WILL_VIOLATION" || echo "")
                
                # Check minimum quality threshold
                if (( $(echo "$SCORE < 70" | bc -l) )); then
                    print_error "Quality score too low: $SCORE/100 (minimum: 70)"
                    QUALITY_FAILED=1
                fi
                
                # Check Iron Will compliance
                if [[ -n "$IRON_VIOLATION" ]]; then
                    print_error "Iron Will policy violation detected in $file"
                    QUALITY_FAILED=1
                fi
                
                print_success "Quality score: $SCORE/100"
                TOTAL_SCORE=$(echo "$TOTAL_SCORE + $SCORE" | bc -l)
                FILE_COUNT=$((FILE_COUNT + 1))
            else
                print_warning "Quality engine not available - using basic checks"
                
                # Basic static analysis
                if grep -q "TODO\|FIXME\|HACK\|XXX" "$file"; then
                    print_error "TODO/FIXME/HACK comments found in $file (Iron Will violation)"
                    QUALITY_FAILED=1
                fi
            fi
        fi
    done
    
    # Calculate average quality score
    if (( FILE_COUNT > 0 )); then
        AVG_SCORE=$(echo "scale=2; $TOTAL_SCORE / $FILE_COUNT" | bc -l)
        print_status "Average quality score: $AVG_SCORE/100"
        
        # Generate merge quality report with secure temp file
        MERGE_REPORT_FILE="$PROJECT_ROOT/data/merge_quality_reports/merge_report_$(date +%Y%m%d_%H%M%S)_$$.json"
        mkdir -p "$(dirname "$MERGE_REPORT_FILE")"
        chmod 700 "$(dirname "$MERGE_REPORT_FILE")"
        
        # ファイル作成時に権限設定
        touch "$MERGE_REPORT_FILE"
        chmod 600 "$MERGE_REPORT_FILE"
        cat > "$MERGE_REPORT_FILE" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "source_branch": "$CURRENT_BRANCH",
    "target_branch": "$TARGET_BRANCH",
    "changed_files": $(echo "$CHANGED_FILES" | jq -R . | jq -s .),
    "quality_metrics": {
        "average_score": $AVG_SCORE,
        "total_files": $FILE_COUNT,
        "minimum_threshold": 70.0
    },
    "merge_approved": $([ $QUALITY_FAILED -eq 0 ] && echo "true" || echo "false"),
    "elder_guild_seal": "🏛️ Reviewed by Elder Guild Quality Gate"
}
EOF
        print_success "Merge quality report saved: $MERGE_REPORT_FILE"
    fi
    
    return $QUALITY_FAILED
}

# Generate merge approval
generate_merge_approval() {
    print_status "Generating merge approval..."
    
    APPROVAL_FILE="$PROJECT_ROOT/data/merge_approvals/merge_approval_$(date +%Y%m%d_%H%M%S).json"
    mkdir -p "$(dirname "$APPROVAL_FILE")"
    
    cat > "$APPROVAL_FILE" << EOF
{
    "approval_id": "merge_$(date +%Y%m%d_%H%M%S)",
    "timestamp": "$(date -Iseconds)",
    "source_branch": "$CURRENT_BRANCH",
    "target_branch": "$TARGET_BRANCH",
    "approved_by": "Elder Guild Quality Gate",
    "quality_verified": true,
    "elder_council_seal": "🏛️ Approved for merge",
    "commit_hash": "$(git rev-parse HEAD)"
}
EOF
    
    print_success "Merge approval generated: $APPROVAL_FILE"
}

# Main execution
main() {
    print_header
    
    # Change to project directory
    cd "$PROJECT_ROOT"
    
    # Check for bypass
    check_bypass
    
    # Get branch information
    get_branch_info "$1"
    
    # Run quality analysis
    if run_merge_quality_analysis; then
        print_success "🏛️ Merge quality gate PASSED"
        print_success "All quality standards met - merge approved"
        
        # Generate approval
        generate_merge_approval
        
        echo ""
        print_success "✨ Elder Guild blessing granted for merge ✨"
        
        exit 0
    else
        print_error "🏛️ Merge quality gate FAILED"
        print_error "Quality standards not met - merge blocked"
        
        echo ""
        echo -e "${RED}${BOLD}❌ MERGE BLOCKED BY ELDER GUILD QUALITY GATE${NC}"
        echo ""
        echo -e "${YELLOW}To fix these issues:${NC}"
        echo "  1. Fix quality issues in your branch"
        echo "  2. Run: quality analyze <file> to check specific files"
        echo "  3. Run: quality report . to see full project quality"
        echo "  4. Commit your fixes and try merging again"
        echo ""
        echo -e "${YELLOW}Emergency bypass (not recommended):${NC}"
        echo "  export ELDER_GUILD_BYPASS=1"
        echo "  git merge --no-verify"
        
        exit 1
    fi
}

# Handle interrupts
trap 'echo -e "\n${YELLOW}🛑 Merge quality check interrupted${NC}"; exit 1' INT TERM

# Run main function
main "$@"