#!/usr/bin/env python3
"""
グリモアアクセス性向上システム
4賢者の魔法書システムをより使いやすく、アクセスしやすくする
"""

import os
import sys
import json
import shutil
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging

PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class GrimoireAccessibilityEnhancer:
    """グリモアアクセス性向上システム"""
    
    def __init__(self):
        self.project_root = PROJECT_ROOT
        self.grimoire_base = self.project_root / "knowledge_base" / "four_sages_grimoires"
        self.access_log = self.project_root / "logs" / "grimoire_accessibility.log"
        self.access_log.parent.mkdir(exist_ok=True)
        
        # アクセス性向上の各フェーズ
        self.enhancement_phases = {
            "index_generation": False,
            "cross_referencing": False,
            "search_optimization": False,
            "navigation_improvement": False,
            "quick_access_tools": False
        }
        
        # 既存の魔法書構造
        self.grimoire_structure = {
            "knowledge_sage": "01_knowledge_sage_grimoire.md",
            "task_oracle": "02_task_oracle_grimoire.md",
            "incident_sage": "03_incident_sage_grimoire.md",
            "rag_mystic": "04_rag_mystic_grimoire.md",
            "common_knowledge": "00_common_knowledge.md"
        }\n        \n    def enhance_accessibility(self) -> Dict[str, Any]:\n        \"\"\"アクセス性向上の実行\"\"\"\n        print(\"🔮 グリモアアクセス性向上を開始...\")\n        \n        enhancement_results = {\n            \"timestamp\": datetime.now().isoformat(),\n            \"phases\": {},\n            \"improvements\": [],\n            \"overall_status\": \"enhancing\",\n            \"metrics\": {}\n        }\n        \n        # Phase 1: 索引生成\n        phase1_result = self._generate_comprehensive_index()\n        enhancement_results[\"phases\"][\"index_generation\"] = phase1_result\n        \n        # Phase 2: 相互参照システム\n        phase2_result = self._create_cross_reference_system()\n        enhancement_results[\"phases\"][\"cross_referencing\"] = phase2_result\n        \n        # Phase 3: 検索最適化\n        phase3_result = self._optimize_search_functionality()\n        enhancement_results[\"phases\"][\"search_optimization\"] = phase3_result\n        \n        # Phase 4: ナビゲーション改善\n        phase4_result = self._improve_navigation()\n        enhancement_results[\"phases\"][\"navigation_improvement\"] = phase4_result\n        \n        # Phase 5: クイックアクセスツール\n        phase5_result = self._create_quick_access_tools()\n        enhancement_results[\"phases\"][\"quick_access_tools\"] = phase5_result\n        \n        # 総合評価\n        enhancement_results[\"overall_status\"] = self._assess_enhancement_status()\n        enhancement_results[\"improvements\"] = self._collect_improvements()\n        enhancement_results[\"metrics\"] = self._calculate_metrics()\n        \n        return enhancement_results\n    \n    def _generate_comprehensive_index(self) -> Dict[str, Any]:\n        \"\"\"包括的索引の生成\"\"\"\n        print(\"  📚 包括的索引を生成中...\")\n        \n        index_result = {\n            \"status\": \"generating\",\n            \"master_index\": {},\n            \"topic_index\": {},\n            \"cross_references\": {},\n            \"generated_files\": []\n        }\n        \n        try:\n            # マスター索引の生成\n            master_index = self._create_master_index()\n            index_result[\"master_index\"] = master_index\n            \n            # トピック別索引の生成\n            topic_index = self._create_topic_index()\n            index_result[\"topic_index\"] = topic_index\n            \n            # 索引ファイルの生成\n            index_files = self._write_index_files(master_index, topic_index)\n            index_result[\"generated_files\"] = index_files\n            \n            index_result[\"status\"] = \"completed\"\n            self.enhancement_phases[\"index_generation\"] = True\n            \n        except Exception as e:\n            index_result[\"status\"] = \"failed\"\n            index_result[\"error\"] = str(e)\n        \n        self._log_enhancement(\"Index generation\", index_result[\"status\"])\n        return index_result\n    \n    def _create_master_index(self) -> Dict[str, Any]:\n        \"\"\"マスター索引の作成\"\"\"\n        master_index = {\n            \"total_entries\": 0,\n            \"sage_entries\": {},\n            \"category_distribution\": {},\n            \"last_updated\": datetime.now().isoformat()\n        }\n        \n        # 各賢者の魔法書を解析\n        for sage_name, grimoire_file in self.grimoire_structure.items():\n            grimoire_path = self.grimoire_base / grimoire_file\n            \n            if grimoire_path.exists():\n                entries = self._extract_entries_from_grimoire(grimoire_path)\n                master_index[\"sage_entries\"][sage_name] = entries\n                master_index[\"total_entries\"] += len(entries)\n                \n                # カテゴリ分布の計算\n                for entry in entries:\n                    category = entry.get(\"category\", \"other\")\n                    master_index[\"category_distribution\"][category] = \\\n                        master_index[\"category_distribution\"].get(category, 0) + 1\n        \n        return master_index\n    \n    def _extract_entries_from_grimoire(self, grimoire_path: Path) -> List[Dict]:\n        \"\"\"魔法書からエントリを抽出\"\"\"\n        entries = []\n        \n        try:\n            with open(grimoire_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n            \n            # マークダウンの見出しを抽出\n            lines = content.split('\\n')\n            current_section = None\n            \n            for line_num, line in enumerate(lines, 1):\n                line = line.strip()\n                \n                # 見出しの検出\n                if line.startswith('#'):\n                    level = len(line) - len(line.lstrip('#'))\n                    title = line.lstrip('#').strip()\n                    \n                    if title and level <= 3:  # レベル3まで索引化\n                        entry = {\n                            \"title\": title,\n                            \"level\": level,\n                            \"line_number\": line_num,\n                            \"file\": grimoire_path.name,\n                            \"category\": self._categorize_entry(title),\n                            \"content_preview\": self._get_content_preview(lines, line_num)\n                        }\n                        entries.append(entry)\n                        \n                        if level == 1:\n                            current_section = title\n                        elif level == 2 and current_section:\n                            entry[\"parent_section\"] = current_section\n        \n        except Exception as e:\n            logger.error(f\"Error extracting entries from {grimoire_path}: {e}\")\n        \n        return entries\n    \n    def _categorize_entry(self, title: str) -> str:\n        \"\"\"エントリのカテゴリ分類\"\"\"\n        title_lower = title.lower()\n        \n        # カテゴリ判定ロジック\n        if any(word in title_lower for word in ['error', 'exception', 'failed', 'crash']):\n            return 'error_handling'\n        elif any(word in title_lower for word in ['test', 'testing', 'tdd']):\n            return 'testing'\n        elif any(word in title_lower for word in ['performance', 'optimization', 'speed']):\n            return 'performance'\n        elif any(word in title_lower for word in ['config', 'setting', 'setup']):\n            return 'configuration'\n        elif any(word in title_lower for word in ['api', 'endpoint', 'service']):\n            return 'api'\n        elif any(word in title_lower for word in ['database', 'db', 'sql']):\n            return 'database'\n        elif any(word in title_lower for word in ['security', 'auth', 'permission']):\n            return 'security'\n        elif any(word in title_lower for word in ['deployment', 'deploy', 'production']):\n            return 'deployment'\n        else:\n            return 'general'\n    \n    def _get_content_preview(self, lines: List[str], start_line: int) -> str:\n        \"\"\"コンテンツプレビューの取得\"\"\"\n        preview_lines = []\n        \n        # 見出しの次の行から数行を取得\n        for i in range(start_line, min(start_line + 3, len(lines))):\n            line = lines[i].strip()\n            if line and not line.startswith('#'):\n                preview_lines.append(line)\n        \n        return ' '.join(preview_lines)[:150] + '...' if preview_lines else ''\n    \n    def _create_topic_index(self) -> Dict[str, Any]:\n        \"\"\"トピック別索引の作成\"\"\"\n        topic_index = {\n            \"topics\": {},\n            \"keyword_map\": {},\n            \"related_topics\": {}\n        }\n        \n        # 主要トピックの定義\n        main_topics = {\n            \"TDD\": [\"test\", \"testing\", \"tdd\", \"unittest\", \"pytest\"],\n            \"Performance\": [\"performance\", \"optimization\", \"speed\", \"memory\", \"cpu\"],\n            \"Error Handling\": [\"error\", \"exception\", \"failed\", \"crash\", \"debug\"],\n            \"Database\": [\"database\", \"db\", \"sql\", \"postgresql\", \"sqlite\"],\n            \"API\": [\"api\", \"endpoint\", \"service\", \"rest\", \"graphql\"],\n            \"Security\": [\"security\", \"auth\", \"permission\", \"token\", \"oauth\"],\n            \"Configuration\": [\"config\", \"setting\", \"setup\", \"environment\", \"env\"],\n            \"Deployment\": [\"deployment\", \"deploy\", \"production\", \"staging\", \"docker\"]\n        }\n        \n        # 各トピックに関連するエントリを収集\n        for topic_name, keywords in main_topics.items():\n            topic_entries = []\n            \n            for sage_name, grimoire_file in self.grimoire_structure.items():\n                grimoire_path = self.grimoire_base / grimoire_file\n                \n                if grimoire_path.exists():\n                    entries = self._extract_entries_from_grimoire(grimoire_path)\n                    \n                    for entry in entries:\n                        if any(keyword in entry[\"title\"].lower() for keyword in keywords):\n                            topic_entries.append({\n                                \"sage\": sage_name,\n                                \"entry\": entry\n                            })\n            \n            topic_index[\"topics\"][topic_name] = topic_entries\n        \n        return topic_index\n    \n    def _write_index_files(self, master_index: Dict, topic_index: Dict) -> List[str]:\n        \"\"\"索引ファイルの書き込み\"\"\"\n        generated_files = []\n        \n        # マスター索引ファイル\n        master_index_path = self.grimoire_base / \"MASTER_INDEX.md\"\n        with open(master_index_path, 'w', encoding='utf-8') as f:\n            f.write(self._generate_master_index_content(master_index))\n        generated_files.append(str(master_index_path))\n        \n        # トピック別索引ファイル\n        topic_index_path = self.grimoire_base / \"TOPIC_INDEX.md\"\n        with open(topic_index_path, 'w', encoding='utf-8') as f:\n            f.write(self._generate_topic_index_content(topic_index))\n        generated_files.append(str(topic_index_path))\n        \n        # クイックリファレンスファイル\n        quick_ref_path = self.grimoire_base / \"QUICK_REFERENCE.md\"\n        with open(quick_ref_path, 'w', encoding='utf-8') as f:\n            f.write(self._generate_quick_reference_content(master_index, topic_index))\n        generated_files.append(str(quick_ref_path))\n        \n        return generated_files\n    \n    def _generate_master_index_content(self, master_index: Dict) -> str:\n        \"\"\"マスター索引コンテンツの生成\"\"\"\n        content = f\"\"\"# 🏛️ 4賢者グリモア マスター索引\n\n**最終更新**: {master_index['last_updated']}\n**総エントリ数**: {master_index['total_entries']}\n\n## 📊 統計情報\n\n### 賢者別エントリ数\n\"\"\"\n        \n        for sage_name, entries in master_index[\"sage_entries\"].items():\n            content += f\"- **{sage_name}**: {len(entries)}エントリ\\n\"\n        \n        content += \"\\n### カテゴリ別分布\\n\\n\"\n        \n        for category, count in sorted(master_index[\"category_distribution\"].items()):\n            content += f\"- **{category}**: {count}エントリ\\n\"\n        \n        content += \"\\n## 📚 賢者別詳細索引\\n\\n\"\n        \n        for sage_name, entries in master_index[\"sage_entries\"].items():\n            content += f\"### {sage_name}\\n\\n\"\n            \n            for entry in entries:\n                content += f\"- **{entry['title']}** (L{entry['level']}) - {entry['file']}:{entry['line_number']}\\n\"\n                if entry.get('content_preview'):\n                    content += f\"  _{entry['content_preview']}_\\n\"\n                content += \"\\n\"\n        \n        return content\n    \n    def _generate_topic_index_content(self, topic_index: Dict) -> str:\n        \"\"\"トピック別索引コンテンツの生成\"\"\"\n        content = f\"\"\"# 🔍 4賢者グリモア トピック別索引\n\n**生成日時**: {datetime.now().isoformat()}\n\n## 📋 主要トピック一覧\n\n\"\"\"\n        \n        for topic_name, entries in topic_index[\"topics\"].items():\n            content += f\"### {topic_name} ({len(entries)}エントリ)\\n\\n\"\n            \n            for item in entries:\n                sage = item[\"sage\"]\n                entry = item[\"entry\"]\n                content += f\"- **{entry['title']}** - {sage} ({entry['file']}:{entry['line_number']})\\n\"\n                if entry.get('content_preview'):\n                    content += f\"  _{entry['content_preview']}_\\n\"\n            \n            content += \"\\n\"\n        \n        return content\n    \n    def _generate_quick_reference_content(self, master_index: Dict, topic_index: Dict) -> str:\n        \"\"\"クイックリファレンスコンテンツの生成\"\"\"\n        content = f\"\"\"# ⚡ 4賢者グリモア クイックリファレンス\n\n**生成日時**: {datetime.now().isoformat()}\n\n## 🚀 よく使用される項目\n\n### エラー対応\n\"\"\"\n        \n        # エラー関連の項目を抽出\n        error_entries = []\n        for sage_name, entries in master_index[\"sage_entries\"].items():\n            for entry in entries:\n                if entry[\"category\"] == \"error_handling\":\n                    error_entries.append((sage_name, entry))\n        \n        for sage_name, entry in error_entries[:5]:  # 上位5件\n            content += f\"- **{entry['title']}** - {sage_name}\\n\"\n        \n        content += \"\\n### パフォーマンス最適化\\n\\n\"\n        \n        # パフォーマンス関連の項目を抽出\n        perf_entries = []\n        for sage_name, entries in master_index[\"sage_entries\"].items():\n            for entry in entries:\n                if entry[\"category\"] == \"performance\":\n                    perf_entries.append((sage_name, entry))\n        \n        for sage_name, entry in perf_entries[:5]:  # 上位5件\n            content += f\"- **{entry['title']}** - {sage_name}\\n\"\n        \n        content += \"\\n### TDD・テスト\\n\\n\"\n        \n        # テスト関連の項目を抽出\n        test_entries = []\n        for sage_name, entries in master_index[\"sage_entries\"].items():\n            for entry in entries:\n                if entry[\"category\"] == \"testing\":\n                    test_entries.append((sage_name, entry))\n        \n        for sage_name, entry in test_entries[:5]:  # 上位5件\n            content += f\"- **{entry['title']}** - {sage_name}\\n\"\n        \n        content += \"\\n## 🔗 賢者間相互参照\\n\\n\"\n        content += \"- **ナレッジ賢者** ↔ **RAG賢者**: 知識検索と統合\\n\"\n        content += \"- **タスク賢者** ↔ **インシデント賢者**: 問題対応と進捗管理\\n\"\n        content += \"- **全賢者** ↔ **共通知識**: 基本プロトコルと階層構造\\n\"\n        \n        return content\n    \n    def _create_cross_reference_system(self) -> Dict[str, Any]:\n        \"\"\"相互参照システムの作成\"\"\"\n        print(\"  🔗 相互参照システムを構築中...\")\n        \n        cross_ref_result = {\n            \"status\": \"creating\",\n            \"cross_references\": {},\n            \"related_topics\": {},\n            \"navigation_links\": []\n        }\n        \n        try:\n            # 各魔法書に相互参照リンクを追加\n            for sage_name, grimoire_file in self.grimoire_structure.items():\n                grimoire_path = self.grimoire_base / grimoire_file\n                \n                if grimoire_path.exists():\n                    self._add_cross_references_to_grimoire(grimoire_path, sage_name)\n            \n            cross_ref_result[\"status\"] = \"completed\"\n            self.enhancement_phases[\"cross_referencing\"] = True\n            \n        except Exception as e:\n            cross_ref_result[\"status\"] = \"failed\"\n            cross_ref_result[\"error\"] = str(e)\n        \n        self._log_enhancement(\"Cross-reference system\", cross_ref_result[\"status\"])\n        return cross_ref_result\n    \n    def _add_cross_references_to_grimoire(self, grimoire_path: Path, sage_name: str):\n        \"\"\"魔法書に相互参照を追加\"\"\"\n        try:\n            with open(grimoire_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n            \n            # 相互参照セクションがない場合は追加\n            if \"## 🔗 関連する賢者の知識\" not in content:\n                cross_ref_section = self._generate_cross_reference_section(sage_name)\n                content += \"\\n\\n\" + cross_ref_section\n                \n                with open(grimoire_path, 'w', encoding='utf-8') as f:\n                    f.write(content)\n            \n        except Exception as e:\n            logger.error(f\"Error adding cross-references to {grimoire_path}: {e}\")\n    \n    def _generate_cross_reference_section(self, sage_name: str) -> str:\n        \"\"\"相互参照セクションの生成\"\"\"\n        cross_refs = {\n            \"knowledge_sage\": [\n                \"📋 **タスク賢者**: 学習タスクの管理と進捗追跡\",\n                \"🔍 **RAG賢者**: 知識検索と情報統合\",\n                \"🚨 **インシデント賢者**: 学習失敗の記録と対策\"\n            ],\n            \"task_oracle\": [\n                \"📚 **ナレッジ賢者**: タスク実行のための知識参照\",\n                \"🔍 **RAG賢者**: タスク情報の検索と分析\",\n                \"🚨 **インシデント賢者**: タスク失敗の対応と学習\"\n            ],\n            \"incident_sage\": [\n                \"📚 **ナレッジ賢者**: インシデント対応の知識蓄積\",\n                \"📋 **タスク賢者**: 復旧タスクの管理と追跡\",\n                \"🔍 **RAG賢者**: 類似インシデントの検索と分析\"\n            ],\n            \"rag_mystic\": [\n                \"📚 **ナレッジ賢者**: 検索結果の知識化と蓄積\",\n                \"📋 **タスク賢者**: 検索タスクの効率化\",\n                \"🚨 **インシデント賢者**: 検索失敗の分析と改善\"\n            ]\n        }\n        \n        section = \"## 🔗 関連する賢者の知識\\n\\n\"\n        \n        if sage_name in cross_refs:\n            for ref in cross_refs[sage_name]:\n                section += f\"- {ref}\\n\"\n        \n        section += \"\\n### 📊 共通プロトコル\\n\\n\"\n        section += \"- **00_common_knowledge.md**: 4賢者共通の基本知識\\n\"\n        section += \"- **MASTER_INDEX.md**: 全魔法書の統合索引\\n\"\n        section += \"- **TOPIC_INDEX.md**: トピック別知識索引\\n\"\n        section += \"- **QUICK_REFERENCE.md**: よく使用される知識\\n\"\n        \n        return section\n    \n    def _optimize_search_functionality(self) -> Dict[str, Any]:\n        \"\"\"検索機能最適化\"\"\"\n        print(\"  🔍 検索機能を最適化中...\")\n        \n        search_result = {\n            \"status\": \"optimizing\",\n            \"search_tools\": [],\n            \"improvements\": []\n        }\n        \n        try:\n            # 検索ツールの作成\n            search_tools = self._create_search_tools()\n            search_result[\"search_tools\"] = search_tools\n            \n            search_result[\"status\"] = \"completed\"\n            self.enhancement_phases[\"search_optimization\"] = True\n            \n        except Exception as e:\n            search_result[\"status\"] = \"failed\"\n            search_result[\"error\"] = str(e)\n        \n        self._log_enhancement(\"Search optimization\", search_result[\"status\"])\n        return search_result\n    \n    def _create_search_tools(self) -> List[str]:\n        \"\"\"検索ツールの作成\"\"\"\n        tools = []\n        \n        # 検索スクリプトの作成\n        search_script_path = self.project_root / \"scripts\" / \"grimoire_search.py\"\n        with open(search_script_path, 'w', encoding='utf-8') as f:\n            f.write(self._generate_search_script_content())\n        tools.append(str(search_script_path))\n        \n        # 検索設定ファイルの作成\n        search_config_path = self.project_root / \"config\" / \"grimoire_search_config.json\"\n        search_config_path.parent.mkdir(exist_ok=True)\n        \n        search_config = {\n            \"grimoire_paths\": {\n                sage: str(self.grimoire_base / file)\n                for sage, file in self.grimoire_structure.items()\n            },\n            \"search_options\": {\n                \"case_sensitive\": False,\n                \"whole_word\": False,\n                \"regex_enabled\": True,\n                \"max_results\": 50\n            },\n            \"index_files\": {\n                \"master_index\": str(self.grimoire_base / \"MASTER_INDEX.md\"),\n                \"topic_index\": str(self.grimoire_base / \"TOPIC_INDEX.md\"),\n                \"quick_reference\": str(self.grimoire_base / \"QUICK_REFERENCE.md\")\n            }\n        }\n        \n        with open(search_config_path, 'w', encoding='utf-8') as f:\n            json.dump(search_config, f, indent=2, ensure_ascii=False)\n        tools.append(str(search_config_path))\n        \n        return tools\n    \n    def _generate_search_script_content(self) -> str:\n        \"\"\"検索スクリプトコンテンツの生成\"\"\"\n        return '''#!/usr/bin/env python3\n\"\"\"\n4賢者グリモア検索ツール\n\"\"\"\n\nimport sys\nimport json\nimport re\nfrom pathlib import Path\n\ndef search_grimoires(query, options=None):\n    \"\"\"グリモア検索\"\"\"\n    if options is None:\n        options = {\"case_sensitive\": False, \"whole_word\": False, \"regex_enabled\": True}\n    \n    # 検索実装\n    results = []\n    \n    # 検索結果の構造\n    # {\n    #     \"file\": \"grimoire_file.md\",\n    #     \"line_number\": 123,\n    #     \"content\": \"マッチしたコンテンツ\",\n    #     \"context\": \"前後のコンテキスト\"\n    # }\n    \n    return results\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"使用法: python grimoire_search.py <検索クエリ> [オプション]\")\n        sys.exit(1)\n    \n    query = sys.argv[1]\n    results = search_grimoires(query)\n    \n    if results:\n        print(f\"検索結果: {len(results)}件\")\n        for result in results:\n            print(f\"- {result['file']}:{result['line_number']} - {result['content']}\")\n    else:\n        print(\"検索結果が見つかりませんでした。\")\n'''\n    \n    def _improve_navigation(self) -> Dict[str, Any]:\n        \"\"\"ナビゲーション改善\"\"\"\n        print(\"  🧭 ナビゲーションを改善中...\")\n        \n        nav_result = {\n            \"status\": \"improving\",\n            \"navigation_files\": [],\n            \"improvements\": []\n        }\n        \n        try:\n            # ナビゲーションファイルの作成\n            nav_files = self._create_navigation_files()\n            nav_result[\"navigation_files\"] = nav_files\n            \n            nav_result[\"status\"] = \"completed\"\n            self.enhancement_phases[\"navigation_improvement\"] = True\n            \n        except Exception as e:\n            nav_result[\"status\"] = \"failed\"\n            nav_result[\"error\"] = str(e)\n        \n        self._log_enhancement(\"Navigation improvement\", nav_result[\"status\"])\n        return nav_result\n    \n    def _create_navigation_files(self) -> List[str]:\n        \"\"\"ナビゲーションファイルの作成\"\"\"\n        nav_files = []\n        \n        # README.mdの作成\n        readme_path = self.grimoire_base / \"README.md\"\n        with open(readme_path, 'w', encoding='utf-8') as f:\n            f.write(self._generate_readme_content())\n        nav_files.append(str(readme_path))\n        \n        return nav_files\n    \n    def _generate_readme_content(self) -> str:\n        \"\"\"README.mdコンテンツの生成\"\"\"\n        return f'''# 🏛️ 4賢者グリモア - ナビゲーションガイド\n\n**最終更新**: {datetime.now().isoformat()}\n\n## 🧙‍♂️ 4賢者の魔法書\n\n### 📚 **ナレッジ賢者 (Knowledge Sage)**\n- **ファイル**: `01_knowledge_sage_grimoire.md`\n- **役割**: 過去の英知を蓄積・継承、学習による知恵の進化\n- **主な内容**: 学習パターン、知識統合、経験の蓄積\n\n### 📋 **タスク賢者 (Task Oracle)**\n- **ファイル**: `02_task_oracle_grimoire.md`\n- **役割**: プロジェクト進捗管理、最適な実行順序の導出\n- **主な内容**: タスク管理、優先順位付け、進捗追跡\n\n### 🚨 **インシデント賢者 (Crisis Sage)**\n- **ファイル**: `03_incident_sage_grimoire.md`\n- **役割**: 危機対応専門家、問題の即座感知・解決\n- **主な内容**: エラー対応、障害復旧、予防策\n\n### 🔍 **RAG賢者 (Search Mystic)**\n- **ファイル**: `04_rag_mystic_grimoire.md`\n- **役割**: 情報探索と理解、膨大な知識から最適解発見\n- **主な内容**: 検索技術、情報統合、知識発見\n\n### 🌟 **共通知識**\n- **ファイル**: `00_common_knowledge.md`\n- **役割**: 4賢者共通の基本知識とプロトコル\n- **主な内容**: 階層構造、基本ルール、共通手順\n\n## 📖 索引・参照ファイル\n\n### 📚 **MASTER_INDEX.md**\n- 全魔法書の統合索引\n- 賢者別・カテゴリ別エントリ一覧\n- 詳細な内容プレビュー\n\n### 🔍 **TOPIC_INDEX.md**\n- トピック別知識索引\n- 主要テーマごとの関連エントリ\n- 横断的な知識参照\n\n### ⚡ **QUICK_REFERENCE.md**\n- よく使用される知識のクイックアクセス\n- エラー対応、パフォーマンス最適化、TDD\n- 賢者間の相互参照\n\n## 🔧 検索・アクセスツール\n\n### 検索機能\n```bash\n# グリモア検索\npython scripts/grimoire_search.py \"検索クエリ\"\n\n# 設定ファイル\nconfig/grimoire_search_config.json\n```\n\n### クイックアクセス\n- **エラー対応**: `grep -n \"error\\|exception\\|failed\" *.md`\n- **パフォーマンス**: `grep -n \"performance\\|optimization\" *.md`\n- **TDD**: `grep -n \"test\\|tdd\\|unittest\" *.md`\n\n## 🎯 使用方法\n\n1. **問題解決**: まずQUICK_REFERENCE.mdを確認\n2. **詳細調査**: 該当する賢者のグリモアを参照\n3. **横断検索**: TOPIC_INDEX.mdでトピック別検索\n4. **包括検索**: MASTER_INDEX.mdで全体から検索\n\n## 🔗 賢者間の連携\n\n- **問題発生時**: インシデント賢者 → 他賢者への相談\n- **学習時**: ナレッジ賢者 → RAG賢者での情報収集\n- **タスク実行時**: タスク賢者 → 各賢者の専門知識参照\n\n---\n\n**💡 ヒント**: 迷ったときは共通知識（00_common_knowledge.md）から始めよう！\n'''\n    \n    def _create_quick_access_tools(self) -> Dict[str, Any]:\n        \"\"\"クイックアクセスツールの作成\"\"\"\n        print(\"  ⚡ クイックアクセスツールを作成中...\")\n        \n        tools_result = {\n            \"status\": \"creating\",\n            \"tools\": [],\n            \"shortcuts\": []\n        }\n        \n        try:\n            # クイックアクセススクリプトの作成\n            tools = self._create_quick_access_scripts()\n            tools_result[\"tools\"] = tools\n            \n            tools_result[\"status\"] = \"completed\"\n            self.enhancement_phases[\"quick_access_tools\"] = True\n            \n        except Exception as e:\n            tools_result[\"status\"] = \"failed\"\n            tools_result[\"error\"] = str(e)\n        \n        self._log_enhancement(\"Quick access tools\", tools_result[\"status\"])\n        return tools_result\n    \n    def _create_quick_access_scripts(self) -> List[str]:\n        \"\"\"クイックアクセススクリプトの作成\"\"\"\n        tools = []\n        \n        # クイックヘルプスクリプト\n        help_script_path = self.project_root / \"scripts\" / \"grimoire_help.py\"\n        with open(help_script_path, 'w', encoding='utf-8') as f:\n            f.write(self._generate_help_script_content())\n        tools.append(str(help_script_path))\n        \n        return tools\n    \n    def _generate_help_script_content(self) -> str:\n        \"\"\"ヘルプスクリプトコンテンツの生成\"\"\"\n        return '''#!/usr/bin/env python3\n\"\"\"\n4賢者グリモア クイックヘルプ\n\"\"\"\n\nimport sys\nfrom pathlib import Path\n\ndef show_help(topic=None):\n    \"\"\"ヘルプ表示\"\"\"\n    if topic is None:\n        print(\"🏛️ 4賢者グリモア - クイックヘルプ\")\n        print(\"=\" * 50)\n        print(\"使用法: python grimoire_help.py [トピック]\")\n        print(\"\")\n        print(\"📚 利用可能なトピック:\")\n        print(\"- sages: 4賢者の概要\")\n        print(\"- files: グリモアファイル一覧\")\n        print(\"- search: 検索方法\")\n        print(\"- index: 索引ファイルの使い方\")\n        print(\"- navigation: ナビゲーション方法\")\n        print(\"\")\n        print(\"例: python grimoire_help.py sages\")\n    \n    elif topic == \"sages\":\n        print(\"🧙‍♂️ 4賢者の概要\")\n        print(\"=\" * 30)\n        print(\"📚 ナレッジ賢者: 知識の蓄積と継承\")\n        print(\"📋 タスク賢者: 進捗管理と実行順序\")\n        print(\"🚨 インシデント賢者: 問題対応と復旧\")\n        print(\"🔍 RAG賢者: 情報検索と統合\")\n    \n    elif topic == \"files\":\n        print(\"📁 グリモアファイル一覧\")\n        print(\"=\" * 30)\n        print(\"00_common_knowledge.md - 共通知識\")\n        print(\"01_knowledge_sage_grimoire.md - ナレッジ賢者\")\n        print(\"02_task_oracle_grimoire.md - タスク賢者\")\n        print(\"03_incident_sage_grimoire.md - インシデント賢者\")\n        print(\"04_rag_mystic_grimoire.md - RAG賢者\")\n        print(\"\")\n        print(\"📖 索引ファイル:\")\n        print(\"MASTER_INDEX.md - 統合索引\")\n        print(\"TOPIC_INDEX.md - トピック別索引\")\n        print(\"QUICK_REFERENCE.md - クイックリファレンス\")\n        print(\"README.md - ナビゲーションガイド\")\n    \n    else:\n        print(f\"❌ 不明なトピック: {topic}\")\n        print(\"利用可能なトピック: sages, files, search, index, navigation\")\n\nif __name__ == \"__main__\":\n    topic = sys.argv[1] if len(sys.argv) > 1 else None\n    show_help(topic)\n'''\n    \n    def _assess_enhancement_status(self) -> str:\n        \"\"\"改善状況の評価\"\"\"\n        completed_phases = sum(self.enhancement_phases.values())\n        total_phases = len(self.enhancement_phases)\n        \n        if completed_phases == total_phases:\n            return \"fully_enhanced\"\n        elif completed_phases >= total_phases * 0.8:\n            return \"mostly_enhanced\"\n        elif completed_phases >= total_phases * 0.5:\n            return \"partially_enhanced\"\n        else:\n            return \"needs_enhancement\"\n    \n    def _collect_improvements(self) -> List[str]:\n        \"\"\"改善項目の収集\"\"\"\n        improvements = []\n        \n        if self.enhancement_phases[\"index_generation\"]:\n            improvements.append(\"📚 統合索引システムの構築\")\n        \n        if self.enhancement_phases[\"cross_referencing\"]:\n            improvements.append(\"🔗 賢者間相互参照システムの実装\")\n        \n        if self.enhancement_phases[\"search_optimization\"]:\n            improvements.append(\"🔍 検索機能の最適化\")\n        \n        if self.enhancement_phases[\"navigation_improvement\"]:\n            improvements.append(\"🧭 ナビゲーション機能の改善\")\n        \n        if self.enhancement_phases[\"quick_access_tools\"]:\n            improvements.append(\"⚡ クイックアクセスツールの提供\")\n        \n        return improvements\n    \n    def _calculate_metrics(self) -> Dict[str, Any]:\n        \"\"\"メトリクスの計算\"\"\"\n        metrics = {\n            \"total_grimoires\": len(self.grimoire_structure),\n            \"enhancement_completion\": sum(self.enhancement_phases.values()) / len(self.enhancement_phases) * 100,\n            \"generated_files\": 0,\n            \"total_entries\": 0\n        }\n        \n        # 生成されたファイル数をカウント\n        generated_files = [\n            \"MASTER_INDEX.md\",\n            \"TOPIC_INDEX.md\",\n            \"QUICK_REFERENCE.md\",\n            \"README.md\"\n        ]\n        \n        for file_name in generated_files:\n            file_path = self.grimoire_base / file_name\n            if file_path.exists():\n                metrics[\"generated_files\"] += 1\n        \n        return metrics\n    \n    def _log_enhancement(self, phase_name: str, status: str):\n        \"\"\"改善ログの記録\"\"\"\n        timestamp = datetime.now().isoformat()\n        log_entry = f\"[{timestamp}] {phase_name}: {status}\\n\"\n        \n        with open(self.access_log, 'a', encoding='utf-8') as f:\n            f.write(log_entry)\n\ndef main():\n    \"\"\"メイン処理\"\"\"\n    enhancer = GrimoireAccessibilityEnhancer()\n    \n    print(\"🚀 グリモアアクセス性向上システム\")\n    print(\"=\" * 60)\n    \n    # アクセス性向上の実行\n    enhancement_results = enhancer.enhance_accessibility()\n    \n    # 結果表示\n    print(f\"\\n📊 改善結果サマリー\")\n    print(\"-\" * 40)\n    print(f\"総合状況: {enhancement_results['overall_status'].upper()}\")\n    print(f\"完了フェーズ: {sum(enhancer.enhancement_phases.values())}/{len(enhancer.enhancement_phases)}\")\n    print(f\"改善完了率: {enhancement_results['metrics']['enhancement_completion']:.1f}%\")\n    \n    # フェーズ別詳細\n    print(f\"\\n🔍 フェーズ別状況\")\n    print(\"-\" * 40)\n    for phase_name, result in enhancement_results[\"phases\"].items():\n        status_icon = \"✅\" if result[\"status\"] == \"completed\" else \"❌\"\n        print(f\"{status_icon} {phase_name}: {result['status'].upper()}\")\n    \n    # 実装された改善項目\n    print(f\"\\n💡 実装された改善項目\")\n    print(\"-\" * 40)\n    for i, improvement in enumerate(enhancement_results[\"improvements\"], 1):\n        print(f\"{i}. {improvement}\")\n    \n    # メトリクス\n    metrics = enhancement_results[\"metrics\"]\n    print(f\"\\n📈 メトリクス\")\n    print(\"-\" * 40)\n    print(f\"グリモア数: {metrics['total_grimoires']}\")\n    print(f\"生成ファイル数: {metrics['generated_files']}\")\n    print(f\"改善完了率: {metrics['enhancement_completion']:.1f}%\")\n    \n    # 詳細レポート保存\n    report_file = PROJECT_ROOT / \"logs\" / f\"grimoire_accessibility_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json\"\n    with open(report_file, 'w', encoding='utf-8') as f:\n        json.dump(enhancement_results, f, indent=2, ensure_ascii=False, default=str)\n    \n    print(f\"\\n💾 詳細レポートを保存しました: {report_file}\")\n    \n    # 使用方法の案内\n    print(f\"\\n🎯 使用方法\")\n    print(\"-\" * 40)\n    print(\"1. README.md でナビゲーションガイドを確認\")\n    print(\"2. QUICK_REFERENCE.md でよく使用される知識をチェック\")\n    print(\"3. python scripts/grimoire_help.py でヘルプを表示\")\n    print(\"4. python scripts/grimoire_search.py <クエリ> で検索\")\n\nif __name__ == \"__main__\":\n    main()