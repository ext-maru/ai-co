#!/usr/bin/env python3
"""
Magic Grimoire Migration CLI
È≠îÊ≥ïÊõ∏„Ç∑„Çπ„ÉÜ„É†ÁßªË°åCLI
"""

import sys
import asyncio
import argparse
import json
from pathlib import Path
from datetime import datetime

# Add project root to path
PROJECT_ROOT = Path(__file__).parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from libs.migration_engine import MigrationEngine

def print_banner():
    """„Éê„Éä„ÉºË°®Á§∫"""
    print("""
üèõÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    AI Company Magic Grimoire Migration System
    È≠îÊ≥ïÊõ∏„Ç∑„Çπ„ÉÜ„É†ÁßªË°å„Ç®„É≥„Ç∏„É≥ v1.0
    
    PostgreSQL + pgvector „Å´„Çà„ÇãÊ¨°‰∏ñ‰ª£„Éä„É¨„ÉÉ„Ç∏ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
üèõÔ∏è ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
""")

async def run_migration(source_dir: Path, dry_run: bool = False, verbose: bool = False):
    """ÁßªË°åÂÆüË°å"""
    print_banner()
    
    if dry_run:
        print("üîç DRY RUN MODE - No actual migration will be performed")
    
    print(f"üìÇ Source directory: {source_dir}")
    print(f"üéØ Target: PostgreSQL + pgvector database")
    print()
    
    # Migration engine initialization
    migration_engine = MigrationEngine(source_directory=source_dir)
    
    try:
        print("üöÄ Initializing migration engine...")
        if not dry_run:
            success = await migration_engine.initialize()
            if not success:
                print("‚ùå Failed to initialize migration engine")
                return False
        
        print("‚úÖ Migration engine ready")
        print()
        
        if dry_run:
            # Dry run analysis
            print("üîç Performing analysis (dry run)...")
            
            # Discover files
            md_files = await migration_engine._discover_md_files()
            print(f"üìã Found {len(md_files)} MD files")
            
            # Sample analysis
            if md_files:
                sample_files = md_files[:5] if len(md_files) > 5 else md_files
                print(f"üî¨ Analyzing sample files ({len(sample_files)})...")
                
                analyzed_files = await migration_engine._analyze_files_batch(sample_files)
                
                print("\nüìä Sample Analysis Results:")
                for i, analysis in enumerate(analyzed_files):
                    if 'error' not in analysis:
                        basic_info = analysis.get('basic_info', {})
                        classification = analysis.get('classification', {})
                        print(f"  {i+1}. {basic_info.get('file_name', 'unknown')}")
                        print(f"     üìñ Type: {classification.get('spell_type', 'unknown')}")
                        print(f"     üßô‚Äç‚ôÇÔ∏è School: {classification.get('magic_school', 'unknown')}")
                        print(f"     ‚ö° Power: {classification.get('power_level', 0)}")
                        print(f"     üîí Eternal: {classification.get('is_eternal', False)}")
                        print()
            
            # Duplicate detection
            if md_files:
                print("üîç Checking for duplicates...")
                analyzed_files = await migration_engine._analyze_files_batch(md_files)
                duplicate_groups = await migration_engine.duplicate_detector.detect_duplicates(analyzed_files)
                
                if duplicate_groups:
                    print(f"üìé Found {len(duplicate_groups)} duplicate groups:")
                    for i, group in enumerate(duplicate_groups):
                        print(f"  Group {i+1}: {group}")
                else:
                    print("‚úÖ No duplicates found")
            
            print("\nüéØ Dry run completed - use --execute to perform actual migration")
            return True
        
        else:
            # Actual migration
            print("üöÄ Starting full migration...")
            report = await migration_engine.run_full_migration()
            
            print("\nüìä Migration Report:")
            print("=" * 50)
            
            summary = report['summary']
            print(f"üìÇ Total files discovered: {summary['total_files_discovered']}")
            print(f"‚öôÔ∏è Total files processed: {summary['total_files_processed']}")
            print(f"‚úÖ Successful migrations: {summary['successful_migrations']}")
            print(f"‚ùå Failed migrations: {summary['failed_migrations']}")
            print(f"‚è≠Ô∏è Skipped files: {summary['skipped_files']}")
            print(f"üìà Success rate: {summary['success_rate_percent']}%")
            
            print(f"\nüßô‚Äç‚ôÇÔ∏è Sage Distribution:")
            sage_distribution = report['sage_distribution']
            for sage, count in sage_distribution.items():
                sage_emoji = {
                    'knowledge_sage': 'üìö',
                    'task_oracle': 'üìã',
                    'crisis_sage': 'üö®',
                    'search_mystic': 'üîç'
                }.get(sage, 'üßô‚Äç‚ôÇÔ∏è')
                print(f"  {sage_emoji} {sage}: {count} spells")
            
            duplicate_info = report['duplicate_detection']
            print(f"\nüìé Duplicate Detection:")
            print(f"  Groups: {duplicate_info['total_duplicate_groups']}")
            print(f"  Files: {duplicate_info['total_duplicate_files']}")
            
            print(f"\nüìã Migration ID: {report['migration_id']}")
            print(f"‚è±Ô∏è Duration: {report['duration_seconds']:.2f} seconds")
            
            if summary['success_rate_percent'] >= 90:
                print("\nüéâ Migration completed successfully!")
            elif summary['success_rate_percent'] >= 70:
                print("\n‚ö†Ô∏è Migration completed with some issues")
            else:
                print("\n‚ùå Migration completed with significant issues")
            
            return summary['success_rate_percent'] >= 70
    
    except Exception as e:
        print(f"\n‚ùå Migration failed: {e}")
        if verbose:
            import traceback
            traceback.print_exc()
        return False
    
    finally:
        if not dry_run:
            await migration_engine.close()

def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    parser = argparse.ArgumentParser(
        description="AI Company Magic Grimoire Migration System",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Dry run analysis
  %(prog)s --dry-run
  
  # Full migration
  %(prog)s --execute
  
  # Custom source directory
  %(prog)s --source /path/to/knowledge_base --execute
  
  # Verbose output
  %(prog)s --execute --verbose
        """
    )
    
    parser.add_argument(
        '--source', '-s',
        type=Path,
        default=PROJECT_ROOT / "knowledge_base",
        help='Source knowledge base directory (default: ./knowledge_base)'
    )
    
    parser.add_argument(
        '--dry-run', '-d',
        action='store_true',
        help='Perform analysis without actual migration'
    )
    
    parser.add_argument(
        '--execute', '-e',
        action='store_true',
        help='Execute actual migration (required for non-dry-run)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Enable verbose output'
    )
    
    args = parser.parse_args()
    
    # Validation
    if not args.source.exists():
        print(f"‚ùå Source directory does not exist: {args.source}")
        return 1
    
    if not args.dry_run and not args.execute:
        print("‚ùå Must specify either --dry-run or --execute")
        parser.print_help()
        return 1
    
    if args.dry_run and args.execute:
        print("‚ùå Cannot specify both --dry-run and --execute")
        return 1
    
    # Run migration
    try:
        success = asyncio.run(run_migration(
            source_dir=args.source,
            dry_run=args.dry_run,
            verbose=args.verbose
        ))
        
        return 0 if success else 1
        
    except KeyboardInterrupt:
        print("\nüõë Migration cancelled by user")
        return 1
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())