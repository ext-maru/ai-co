#!/usr/bin/env python3
"""
Test cases for Data Processing implementation - Issue #245
üß™ [EXPERIMENT] AI/ML Pipeline ÂÆüÈ®ìÁöÑÂÆüË£Ö - LLMÁµ±Âêà„Å®„Éô„ÇØ„Éà„É´„Éá„Éº„Çø„Éô„Éº„Çπ

Generated by Elder Flow Auto Issue Processor with Jinja2 Templates
"""

import unittest
from unittest.mock import Mock, patch, MagicMock
import pandas as pd
import numpy as np
from pathlib import Path
import tempfile
import shutil
from datetime import datetime

# Import the implementation
from  import Test245


class TestTest245(unittest.TestCase):
    """Test cases for Test245"""
    
    def setUp(self):
        """Set up test fixtures"""
        # Create temporary directories
        self.temp_dir = tempfile.mkdtemp()
        self.input_dir = Path(self.temp_dir) / "input"
        self.output_dir = Path(self.temp_dir) / "output"
        self.input_dir.mkdir()
        self.output_dir.mkdir()
        
        # Configuration
        self.config = {
            'input_path': str(self.input_dir),
            'output_path': str(self.output_dir),
            'chunk_size': 1000,
            'encoding': 'utf-8'
        }
        
        # Create test data
        self.test_data = pd.DataFrame({
            'id': range(1, 101),
            'name': [f'Item_{i}' for i in range(1, 101)],
            'value': np.random.rand(100) * 100,
            'category': np.random.choice(['A', 'B', 'C'], 100),
            'date': pd.date_range('2025-01-01', periods=100, freq='D')
        })
        
        # Save test data as CSV
        self.test_csv = self.input_dir / "test_data.csv"
        self.test_data.to_csv(self.test_csv, index=False)
        
        # Initialize test instance
        self.instance = Test245(config=self.config)
    
    def tearDown(self):
        """Clean up after tests"""
        # Remove temporary directory
        shutil.rmtree(self.temp_dir)
    
    def test_initialization(self):
        """Test successful initialization"""
        self.assertIsNotNone(self.instance)
        self.assertEqual(self.instance.input_path, str(self.input_dir))
        self.assertEqual(self.instance.output_path, str(self.output_dir))
        self.assertEqual(self.instance.chunk_size, 1000)
        self.assertEqual(self.instance.encoding, 'utf-8')
    
    def test_initialization_creates_output_dir(self):
        """Test that initialization creates output directory"""
        # Remove output directory
        shutil.rmtree(self.output_dir)
        
        # Re-initialize
        instance = Test245(config=self.config)
        
        # Check directory was created
        self.assertTrue(self.output_dir.exists())
    
    def test_validate_input_no_file_or_data(self):
        """Test input validation with no file or data"""
        result = self.instance._validate_input()
        self.assertFalse(result['valid'])
        self.assertIn('No input file', result['error'])
    
    def test_validate_input_file_not_found(self):
        """Test input validation with non-existent file"""
        result = self.instance._validate_input(input_file='nonexistent.csv')
        self.assertFalse(result['valid'])
        self.assertIn('not found', result['error'])
    
    def test_validate_input_valid_file(self):
        """Test input validation with valid file"""
        result = self.instance._validate_input(input_file='test_data.csv')
        self.assertTrue(result['valid'])
    
    def test_validate_input_with_data(self):
        """Test input validation with direct data"""
        result = self.instance._validate_input(data=[{'a': 1}, {'a': 2}])
        self.assertTrue(result['valid'])
    
    def test_load_data_from_csv(self):
        """Test loading data from CSV file"""
        data = self.instance._load_data('test_data.csv')
        
        self.assertIsNotNone(data)
        self.assertIsInstance(data, pd.DataFrame)
        self.assertEqual(len(data), 100)
        self.assertListEqual(list(data.columns), ['id', 'name', 'value', 'category', 'date'])
    
    def test_load_data_from_dict(self):
        """Test loading data from dictionary"""
        test_dict = [{'a': 1, 'b': 2}, {'a': 3, 'b': 4}]
        data = self.instance._load_data(None, data=test_dict)
        
        self.assertIsNotNone(data)
        self.assertIsInstance(data, pd.DataFrame)
        self.assertEqual(len(data), 2)
    
    
    
    def test_execute_success(self):
        """Test successful execution"""
        result = self.instance.execute(
            input_file='test_data.csv',
            output_file='processed_data.csv'
        )
        
        self.assertTrue(result['success'])
        self.assertEqual(result['issue_number'], 245)
        self.assertIn('result', result)
        self.assertIn('input_shape', result['result'])
        self.assertIn('output_shape', result['result'])
        self.assertIn('summary', result['result'])
        
        # Check output file exists
        output_file = Path(result['result']['output_file'])
        self.assertTrue(output_file.exists())
    
    def test_execute_validation_failure(self):
        """Test execution with validation failure"""
        result = self.instance.execute()
        
        self.assertFalse(result['success'])
        self.assertIn('No input file', result['error'])
    
    def test_execute_load_failure(self):
        """Test execution with data load failure"""
        result = self.instance.execute(input_file='nonexistent.csv')
        
        self.assertFalse(result['success'])
    
    
    def test_transform_data(self):
        """Test data transformation"""
        data = pd.DataFrame({
            'value1': [1, 2, 3, 4, 5],
            'value2': [10, 20, 30, 40, 50]
        })
        
        transformed = self.instance._transform_data(data)
        
        # Check normalized columns were added
        self.assertIn('value1_normalized', transformed.columns)
        self.assertIn('value2_normalized', transformed.columns)
        
        # Check normalization (mean should be ~0, std should be ~1)
        self.assertAlmostEqual(transformed['value1_normalized'].mean(), 0, places=5)
        self.assertAlmostEqual(transformed['value1_normalized'].std(), 1, places=5)
    
    
    
    
    def test_save_data_csv(self):
        """Test saving data to CSV"""
        result = self.instance._save_data(self.test_data, 'output.csv')
        
        self.assertTrue(result['success'])
        self.assertTrue(Path(result['file_path']).exists())
        
        # Verify data integrity
        loaded = pd.read_csv(result['file_path'])
        self.assertEqual(len(loaded), len(self.test_data))
    
    
    def test_generate_summary(self):
        """Test summary generation"""
        summary = self.instance._generate_summary(self.test_data)
        
        self.assertIn('total_rows', summary)
        self.assertIn('total_columns', summary)
        self.assertIn('column_types', summary)
        self.assertIn('numeric_summary', summary)
        self.assertIn('categorical_summary', summary)
        
        # Check numeric summary
        self.assertIn('value', summary['numeric_summary'])
        self.assertIn('mean', summary['numeric_summary']['value'])
        self.assertIn('std', summary['numeric_summary']['value'])
        
        # Check categorical summary
        self.assertIn('category', summary['categorical_summary'])
        self.assertIn('unique_values', summary['categorical_summary']['category'])
    
    def test_add_pipeline_step(self):
        """Test adding custom pipeline steps"""
        def custom_step(data):
            data['custom_column'] = 'processed'
            return data
        
        self.instance.add_pipeline_step(custom_step)
        
        result = self.instance.execute(
            input_file='test_data.csv',
            output_file='pipeline_output.csv'
        )
        
        self.assertTrue(result['success'])
        
        # Check custom column was added
        output_path = Path(result['result']['output_file'])
        processed_data = pd.read_csv(output_path)
        self.assertIn('custom_column', processed_data.columns)
        self.assertTrue((processed_data['custom_column'] == 'processed').all())
    
    def test_get_status(self):
        """Test status retrieval"""
        status = self.instance.get_status()
        
        self.assertTrue(status['initialized'])
        self.assertEqual(status['input_path'], str(self.input_dir))
        self.assertEqual(status['output_path'], str(self.output_dir))
        self.assertEqual(status['issue_number'], 245)
        self.assertIn('pipeline_steps', status)
        self.assertIn('configuration', status)


if __name__ == '__main__':
    unittest.main()