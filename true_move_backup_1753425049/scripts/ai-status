#!/bin/bash
# AI Company Status Monitor
# Shows the status of all AI Company workers and logs

# Colors
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}📊 AI Company System Status${NC}"
echo "══════════════════════════════════════════════════════"
echo ""

# Check Workers
echo -e "${YELLOW}🤖 Worker Processes:${NC}"
echo "──────────────────────────────────────────────────────"

# Check for each worker type
declare -A workers=(
    ["TaskWorker"]="task_worker|simple_task_worker|enhanced_task_worker"
    ["SlackPollingWorker"]="slack_polling_worker"
    ["ResultWorker"]="result_worker"
    ["PMWorker"]="pm_worker"
)

for worker_name in "${!workers[@]}"; do
    pattern="${workers[$worker_name]}"
    count=$(ps aux | grep -E "$pattern" | grep -v grep | wc -l)

    if [ $count -gt 0 ]; then
        echo -e "${GREEN}✅ $worker_name${NC} ($count running)"
        ps aux | grep -E "$pattern" | grep -v grep | awk '{printf "   PID: %-8s CPU: %-6s MEM: %-6s CMD: %s\n", $2, $3"%", $4"%", substr($0, index($0,$11))}'
    else
        echo -e "${RED}❌ $worker_name${NC} (not running)"
    fi
    echo ""
done

# Check RabbitMQ
echo -e "${YELLOW}🐰 RabbitMQ Status:${NC}"
echo "──────────────────────────────────────────────────────"
if systemctl is-active rabbitmq-server >/dev/null 2>&1; then
    echo -e "${GREEN}✅ RabbitMQ is active${NC}"
else
    echo -e "${RED}❌ RabbitMQ is not active${NC}"
fi
echo ""

# Recent Logs
echo -e "${YELLOW}📜 Recent Log Activity:${NC}"
echo "──────────────────────────────────────────────────────"

LOG_DIR="/home/aicompany/ai_co/logs"
if [ -d "$LOG_DIR" ]; then
    for log_file in "$LOG_DIR"/*.log; do
        if [ -f "$log_file" ]; then
            filename=$(basename "$log_file")
            last_line=$(tail -1 "$log_file" 2>/dev/null)
            if [ -n "$last_line" ]; then
                echo -e "${BLUE}$filename:${NC}"
                echo "  $last_line"
                echo ""
            fi
        fi
    done
else
    echo "❌ Log directory not found: $LOG_DIR"
fi

# Quick Commands
echo -e "${YELLOW}🚀 Quick Commands:${NC}"
echo "──────────────────────────────────────────────────────"
echo "  📤 Send task:    ai-test \"Your prompt here\""
echo "  📋 View logs:    tail -f $LOG_DIR/*.log"
echo "  🔄 Restart all:  ai-restart"
echo ""

# Task Queue Status (if possible)
echo -e "${YELLOW}📬 Queue Status:${NC}"
echo "──────────────────────────────────────────────────────"
python3 << EOF 2>/dev/null
import pika
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))
    channel = connection.channel()

    # Check ai_tasks queue
    method = channel.queue_declare(queue='ai_tasks', passive=True, durable=True)
    print(f"  ai_tasks queue: {method.method.message_count} messages")

    # Check ai_pm queue
    method = channel.queue_declare(queue='ai_pm', passive=True, durable=True)
    print(f"  ai_pm queue: {method.method.message_count} messages")

    # Check ai_results queue
    method = channel.queue_declare(queue='ai_results', passive=True, durable=True)
    print(f"  ai_results queue: {method.method.message_count} messages")

    connection.close()
except Exception as e:
    print(f"  ❌ Could not connect to RabbitMQ: {e}")
EOF

echo ""
echo "══════════════════════════════════════════════════════"
