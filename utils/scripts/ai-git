#!/bin/bash
# ai-git - AI-powered Git workflow tool with gitflow support
# 使用方法: ai-git <command> [options]

set -e

# 基本設定
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
VENV_PATH="$PROJECT_DIR/venv"

# 色設定
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ログ関数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ヘルプメッセージ
show_help() {
    cat << EOF
ai-git - AI-powered Git workflow tool with gitflow support

使用方法:
    ai-git <command> [options]

コマンド:
    feature <name>         新しいfeatureブランチを作成
    release <version>      新しいreleaseブランチを作成
    hotfix <version>       新しいhotfixブランチを作成
    finish <type>          現在のブランチを完了してマージ
    pr [title]             プルリクエストを作成
    sync                   メインブランチと同期
    status                 現在のブランチ状態を表示
    cleanup                マージ済みブランチを削除
    commit [message]       AI支援による自動コミット
    smart-commit           変更を分析して最適なコミット
    help                   このヘルプを表示

例:
    ai-git feature user-auth
    ai-git release v1.2.0
    ai-git hotfix v1.1.1
    ai-git finish feature
    ai-git pr "Add user authentication"
    ai-git sync
    ai-git smart-commit
EOF
}

# Git設定確認
check_git_config() {
    if ! git config user.name > /dev/null 2>&1; then
        log_error "Git user.name が設定されていません"
        echo "git config --global user.name 'Your Name' で設定してください"
        exit 1
    fi
    
    if ! git config user.email > /dev/null 2>&1; then
        log_error "Git user.email が設定されていません"
        echo "git config --global user.email 'your.email@example.com' で設定してください"
        exit 1
    fi
}

# リモートリポジトリ確認
check_remote() {
    if ! git remote get-url origin > /dev/null 2>&1; then
        log_error "リモートリポジトリが設定されていません"
        exit 1
    fi
}

# メインブランチ名を取得
get_main_branch() {
    # develop ブランチが存在するかチェック
    if git show-ref --verify --quiet refs/heads/develop; then
        echo "develop"
    elif git show-ref --verify --quiet refs/heads/main; then
        echo "main"
    elif git show-ref --verify --quiet refs/heads/master; then
        echo "master"
    else
        log_error "メインブランチが見つかりません"
        exit 1
    fi
}

# 現在のブランチ名を取得
get_current_branch() {
    git branch --show-current
}

# ブランチタイプを判定
get_branch_type() {
    local branch_name="$1"
    if [[ "$branch_name" == feature/* ]]; then
        echo "feature"
    elif [[ "$branch_name" == release/* ]]; then
        echo "release"
    elif [[ "$branch_name" == hotfix/* ]]; then
        echo "hotfix"
    else
        echo "unknown"
    fi
}

# Feature開始
start_feature() {
    local feature_name="$1"
    if [[ -z "$feature_name" ]]; then
        log_error "Feature名を指定してください"
        exit 1
    fi
    
    local main_branch=$(get_main_branch)
    local branch_name="feature/$feature_name"
    
    log_info "Feature開始: $branch_name"
    
    # メインブランチに移動して最新化
    git checkout "$main_branch"
    git pull origin "$main_branch"
    
    # Featureブランチ作成
    git checkout -b "$branch_name"
    
    log_success "Feature '$feature_name' を開始しました"
    log_info "作業完了後は 'ai-git finish feature' を実行してください"
}

# Release開始
start_release() {
    local version="$1"
    if [[ -z "$version" ]]; then
        log_error "バージョンを指定してください"
        exit 1
    fi
    
    local main_branch=$(get_main_branch)
    local branch_name="release/$version"
    
    log_info "Release開始: $branch_name"
    
    # メインブランチに移動して最新化
    git checkout "$main_branch"
    git pull origin "$main_branch"
    
    # Releaseブランチ作成
    git checkout -b "$branch_name"
    
    log_success "Release '$version' を開始しました"
    log_info "作業完了後は 'ai-git finish release' を実行してください"
}

# Hotfix開始
start_hotfix() {
    local version="$1"
    if [[ -z "$version" ]]; then
        log_error "バージョンを指定してください"
        exit 1
    fi
    
    local branch_name="hotfix/$version"
    
    log_info "Hotfix開始: $branch_name"
    
    # masterブランチに移動して最新化（hotfixは常にmaster基準）
    git checkout master
    git pull origin master
    
    # Hotfixブランチ作成
    git checkout -b "$branch_name"
    
    log_success "Hotfix '$version' を開始しました"
    log_info "作業完了後は 'ai-git finish hotfix' を実行してください"
}

# ブランチ完了
finish_branch() {
    local branch_type="$1"
    local current_branch=$(get_current_branch)
    local detected_type=$(get_branch_type "$current_branch")
    
    if [[ "$branch_type" != "$detected_type" ]]; then
        log_error "現在のブランチ ($current_branch) は $branch_type ブランチではありません"
        exit 1
    fi
    
    log_info "$branch_type ブランチを完了します: $current_branch"
    
    # 変更をコミット
    if ! git diff --cached --quiet; then
        log_info "ステージングエリアの変更をコミットします"
        git commit -m "Complete $current_branch" || true
    fi
    
    # プッシュ
    git push origin "$current_branch"
    
    case "$branch_type" in
        "feature")
            local main_branch=$(get_main_branch)
            git checkout "$main_branch"
            git pull origin "$main_branch"
            git merge --no-ff "$current_branch"
            git push origin "$main_branch"
            ;;
        "release")
            # masterとdevelopの両方にマージ
            git checkout master
            git pull origin master
            git merge --no-ff "$current_branch"
            git push origin master
            
            if git show-ref --verify --quiet refs/heads/develop; then
                git checkout develop
                git pull origin develop
                git merge --no-ff "$current_branch"
                git push origin develop
            fi
            ;;
        "hotfix")
            # masterとdevelopの両方にマージ
            git checkout master
            git pull origin master
            git merge --no-ff "$current_branch"
            git push origin master
            
            if git show-ref --verify --quiet refs/heads/develop; then
                git checkout develop
                git pull origin develop
                git merge --no-ff "$current_branch"
                git push origin develop
            fi
            ;;
    esac
    
    # ブランチ削除
    git branch -d "$current_branch"
    git push origin --delete "$current_branch"
    
    log_success "$branch_type ブランチ '$current_branch' を完了しました"
}

# プルリクエスト作成
create_pr() {
    local title="$1"
    local current_branch=$(get_current_branch)
    local main_branch=$(get_main_branch)
    
    if [[ "$current_branch" == "$main_branch" ]]; then
        log_error "メインブランチからはプルリクエストを作成できません"
        exit 1
    fi
    
    # GitHubリポジトリ情報取得
    local repo_url=$(git config --get remote.origin.url)
    local repo_name=$(echo "$repo_url" | sed -n 's/.*[:/]\([^/]*\/[^/]*\)\.git$/\1/p')
    
    if [[ -z "$repo_name" ]]; then
        log_error "GitHub リポジトリ情報を取得できませんでした"
        exit 1
    fi
    
    # タイトルが指定されていない場合は自動生成
    if [[ -z "$title" ]]; then
        title=$(echo "$current_branch" | sed 's/.*\///' | sed 's/-/ /g' | sed 's/\b\w/\u&/g')
    fi
    
    # 現在のブランチをプッシュ
    git push -u origin "$current_branch"
    
    # AI支援でPR説明を生成
    local pr_body="Auto-generated PR from ai-git"
    if [[ -f "$VENV_PATH/bin/activate" ]]; then
        source "$VENV_PATH/bin/activate"
        if python3 -c "import sys; sys.path.append('$PROJECT_DIR'); from libs.ai_git_assistant import AIGitAssistant; print('AI available')" 2>/dev/null; then
            log_info "AI支援でPR説明を生成中..."
            pr_body=$(python3 -c "
import sys
sys.path.append('$PROJECT_DIR')
from libs.ai_git_assistant import AIGitAssistant
assistant = AIGitAssistant('$PROJECT_DIR')
changes = assistant.analyze_changes()
print(assistant.suggest_pr_description('$current_branch', changes))
" 2>/dev/null || echo "Auto-generated PR from ai-git")
        else
            log_warning "AI支援が利用できません（モジュールが見つかりません）"
        fi
    else
        log_warning "AI支援が利用できません（Python環境が見つかりません）"
    fi
    
    # GitHub CLI使用可能かチェック
    if command -v gh > /dev/null 2>&1; then
        log_info "GitHub CLI を使用してプルリクエストを作成します"
        
        # 一時ファイルにPR本文を保存
        local temp_file=$(mktemp)
        echo "$pr_body" > "$temp_file"
        
        # PR作成（エラーハンドリング付き）
        if gh pr create --title "$title" --body-file "$temp_file" --base "$main_branch" --head "$current_branch"; then
            log_success "プルリクエストを作成しました: $title"
        else
            log_error "プルリクエストの作成に失敗しました"
            log_info "手動で作成してください: https://github.com/$repo_name/compare/$main_branch...$current_branch"
        fi
        
        # 一時ファイル削除
        rm -f "$temp_file"
    else
        # GitHub CLI が無い場合はURLを表示
        local pr_url="https://github.com/$repo_name/compare/$main_branch...$current_branch"
        log_info "GitHub CLI が見つかりません"
        log_info "以下のURLからプルリクエストを作成してください:"
        echo "$pr_url"
        echo
        echo "=== AI生成PR説明 ==="
        echo "$pr_body"
    fi
}

# 同期
sync_branch() {
    local current_branch=$(get_current_branch)
    local main_branch=$(get_main_branch)
    
    log_info "ブランチを同期します"
    
    # 変更を一時退避
    if ! git diff --quiet; then
        log_info "未コミットの変更を一時退避します"
        git stash push -m "ai-git sync stash"
        local stashed=true
    else
        local stashed=false
    fi
    
    # メインブランチを最新化
    git checkout "$main_branch"
    git pull origin "$main_branch"
    
    # 元のブランチに戻る
    if [[ "$current_branch" != "$main_branch" ]]; then
        git checkout "$current_branch"
        git merge "$main_branch"
    fi
    
    # 変更を復元
    if [[ "$stashed" == "true" ]]; then
        log_info "一時退避した変更を復元します"
        git stash pop
    fi
    
    log_success "同期が完了しました"
}

# ステータス表示
show_status() {
    local current_branch=$(get_current_branch)
    local branch_type=$(get_branch_type "$current_branch")
    
    echo "=== ai-git Status ==="
    echo "現在のブランチ: $current_branch"
    echo "ブランチタイプ: $branch_type"
    echo
    
    # 未コミット変更
    if ! git diff --quiet; then
        echo "未コミット変更:"
        git diff --name-only | sed 's/^/  /'
        echo
    fi
    
    # ステージング変更
    if ! git diff --cached --quiet; then
        echo "ステージング変更:"
        git diff --cached --name-only | sed 's/^/  /'
        echo
    fi
    
    # リモート追跡状況
    if git rev-parse --abbrev-ref --symbolic-full-name @{u} > /dev/null 2>&1; then
        local ahead=$(git rev-list --count HEAD..@{u})
        local behind=$(git rev-list --count @{u}..HEAD)
        
        if [[ "$ahead" -gt 0 ]]; then
            echo "リモートより $ahead コミット遅れています"
        fi
        
        if [[ "$behind" -gt 0 ]]; then
            echo "リモートより $behind コミット進んでいます"
        fi
        
        if [[ "$ahead" -eq 0 && "$behind" -eq 0 ]]; then
            echo "リモートと同期済み"
        fi
    else
        echo "リモート追跡ブランチがありません"
    fi
}

# クリーンアップ
cleanup_branches() {
    local main_branch=$(get_main_branch)
    
    log_info "マージ済みブランチをクリーンアップします"
    
    # ローカルブランチクリーンアップ
    git checkout "$main_branch"
    git branch --merged | grep -v -E "(^\*|$main_branch|develop|master)" | xargs -r git branch -d
    
    # リモート追跡ブランチクリーンアップ
    git remote prune origin
    
    log_success "クリーンアップが完了しました"
}

# AI支援コミット
smart_commit() {
    local message="$1"
    
    log_info "AI支援でコミットを作成します"
    
    # 変更確認
    if git diff --quiet && git diff --cached --quiet; then
        log_warning "コミットする変更がありません"
        return 0
    fi
    
    # AI支援でコミットメッセージ生成
    if [[ -f "$VENV_PATH/bin/activate" ]]; then
        source "$VENV_PATH/bin/activate"
        if python3 -c "import sys; sys.path.append('$PROJECT_DIR'); from libs.ai_git_assistant import AIGitAssistant; print('AI available')" 2>/dev/null; then
            log_info "変更を分析中..."
            
            # AI支援でコミット実行
            if python3 -c "
import sys
sys.path.append('$PROJECT_DIR')
from libs.ai_git_assistant import AIGitAssistant
assistant = AIGitAssistant('$PROJECT_DIR')
success = assistant.auto_commit_with_ai('$message' if '$message' else None)
exit(0 if success else 1)
" 2>/dev/null; then
                log_success "AI支援コミットが完了しました"
            else
                log_error "AI支援コミットに失敗しました"
                exit 1
            fi
        else
            log_warning "AI支援が利用できません。通常のコミットを実行します"
            manual_commit "$message"
        fi
    else
        log_warning "Python環境が見つかりません。通常のコミットを実行します"
        manual_commit "$message"
    fi
}

# 手動コミット
manual_commit() {
    local message="$1"
    
    if [[ -z "$message" ]]; then
        log_error "コミットメッセージを指定してください"
        exit 1
    fi
    
    git add .
    git commit -m "$message"
    
    log_success "コミットが完了しました: $message"
}

# メイン処理
main() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    # Git設定確認
    check_git_config
    check_remote
    
    local command="$1"
    shift
    
    case "$command" in
        "feature")
            start_feature "$1"
            ;;
        "release")
            start_release "$1"
            ;;
        "hotfix")
            start_hotfix "$1"
            ;;
        "finish")
            finish_branch "$1"
            ;;
        "pr")
            create_pr "$*"
            ;;
        "sync")
            sync_branch
            ;;
        "status")
            show_status
            ;;
        "cleanup")
            cleanup_branches
            ;;
        "commit")
            manual_commit "$*"
            ;;
        "smart-commit")
            smart_commit "$*"
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "不明なコマンド: $command"
            show_help
            exit 1
            ;;
    esac
}

# スクリプト実行
main "$@"